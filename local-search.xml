<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vue 笔记整理06</title>
    <link href="/2020/05/01/vue6/"/>
    <url>/2020/05/01/vue6/</url>
    
    <content type="html"><![CDATA[<h1 id="五、条件判断"><a href="#五、条件判断" class="headerlink" title="五、条件判断"></a>五、条件判断</h1><h2 id="🚩-v-if、v-else-if、v-else"><a href="#🚩-v-if、v-else-if、v-else" class="headerlink" title="🚩  v-if、v-else-if、v-else"></a>🚩  v-if、v-else-if、v-else</h2><p>🔺 这三个指令与<code>JavaScript</code>的条件语句<code>if</code>、<code>else</code>、<code>else if</code>类似。<code>Vue</code>的条件指令可以根据表达式的值在DOM中渲染或销毁元素或组件。</p><p>🔺<code>v-if</code>的原理：<code>v-if</code>后面的条件为<code>false</code>时，对应的元素以及其子元素不会渲染，也就是根本没有不会有对应的标签出现在DOM中。</p><p>🔺<code>v-show</code>的用法和<code>v-if</code>非常相似，也用于决定一个元素是否渲染。<code>v-if</code>和<code>v-show</code>对比：</p><p>🔺<code>v-if</code>和<code>v-show</code>都可以决定一个元素是否渲染，那么开发中我们如何选择呢？</p><ul><li><p><code>v-if</code>当条件为<code>false</code>时，压根不会有对应的元素在DOM中。</p></li><li><p><code>v-show</code>当条件为<code>false</code>时，仅仅是将元素的<code>display</code>属性设置为<code>none</code>而已。</p></li></ul><p>🔺 开发中如何选择呢？</p><ul><li><p>当需要在显示与隐藏之间切片很频繁时，使用<code>v-show</code>。</p></li><li><p>当只有一次切换时，通过使用<code>v-if</code>。</p></li></ul><h2 id="🚩-v-if"><a href="#🚩-v-if" class="headerlink" title="🚩  v-if"></a>🚩  v-if</h2><p>🔺<code>v-if</code>用于条件判断，判断DOM元素是否显示。</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-if使用<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"isFlag"</span>&gt;</span>isFlag为true显示这个<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">"isShow"</span>&gt;</span>isShow为true是显示这个<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"age&lt;18"</span>&gt;</span>小于18岁未成年<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">"age&lt;60"</span>&gt;</span>大于18岁小于60岁正值壮年<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else</span>=<span class="hljs-string">""</span>&gt;</span>大于60岁,暮年<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"src="</span><span class="hljs-attr">..</span>/<span class="hljs-attr">js</span>/<span class="hljs-attr">vue.js</span>"&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">      el:<span class="hljs-string">"#app"</span>,</span>      data:&#123;<span class="actionscript">        isFlag:<span class="hljs-literal">true</span>,</span><span class="actionscript">        isShow:<span class="hljs-literal">false</span>,</span>        age:66      &#125;    &#125;)  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><blockquote><p>👩注意👩:</p><ul><li><p>单独使用<code>v-if</code>，变量为布尔值，为<code>true</code>才渲染Dom</p></li><li><p><code>v-show</code>的变量也是布尔值，为<code>true</code>才显示内容，类似<code>css</code>的<code>display</code></p></li><li><code>v-if</code>、<code>v-else</code>、<code>v-else-if</code>联合使用相当于<code>if</code>、<code>else if</code>、<code>else</code>，但是在条件比较多的时候建议使用计算属性。</li></ul></blockquote><h2 id="🚩-v-if-的Demo"><a href="#🚩-v-if-的Demo" class="headerlink" title="🚩  v-if 的Demo"></a>🚩  v-if 的Demo</h2><p>🔺 在登录网站是经常可以选择使用账户名或者邮箱登录的切换按钮，要求点击按钮切换登录方式。</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-if的Demo<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"isUser"</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"username"</span>&gt;</span>用户账号<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"请输入用户名"</span> &gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-else</span>=<span class="hljs-string">"isUser"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"email"</span>&gt;</span>用户邮箱<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"email"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"请输入用户邮箱"</span> &gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"isUser=!isUser"</span>&gt;</span>切换类型<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">      el:<span class="hljs-string">"#app"</span>,</span>      data:&#123;<span class="actionscript">        isUser:<span class="hljs-literal">true</span></span>      &#125;    &#125;)  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><blockquote><p>👩注意👩:使用<code>v-if</code>和<code>v-else</code>选择渲染指定的Dom，点击按钮对<code>isUser</code>变量取反。</p><p>>但是 这里有个小问题，如果已经输入了账号了，此时想切换到邮箱输入，输入框未自己清空。</p><p>这里需要了解一下<code>Vue</code>底层操作，此时<code>input</code>输入框值被复用了。</p><ul><li><p><code>Vue</code>在进行DOM渲染时，处于性能考虑，会复用已经存在的元素，而不是每次都创建新的DOM元素。</p></li><li><p>在上面demo中，<code>Vue</code>内部发现原来的<code>input</code>元素不再使用，所以直接将其映射对应虚拟DOM，用来复用。</p></li><li><p>如果不希望出现类似复用问题，可以给对应的DOM元素加上<code>key</code>值，并保证<code>key</code>不同。</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"请输入用户名"</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"username"</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"email"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"请输入用户邮箱"</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"email"</span>&gt;</span></code></pre></li></ul></blockquote><h2 id="🚩-v-show"><a href="#🚩-v-show" class="headerlink" title="🚩  v-show"></a>🚩  v-show</h2><p>🔺 <code>v-if</code>看似和<code>v-show</code>实现一样的效果，但是内部<code>v-show</code>只是用<code>css</code>将操作的元素隐藏显示，而<code>v-if</code>是新增和删除元素。<code>v-show</code>只是操作元素的<code>style</code>属性<code>display</code>，都没会被创建。</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>V-show<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">"isFlag"</span>&gt;</span>v-show只是操作元素的style属性display，都没会被创建<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"isFlag"</span>&gt;</span>v-if是新增和删除dom元素<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">      el:<span class="hljs-string">"#app"</span>,</span>      data:&#123;<span class="actionscript">        isFlag:<span class="hljs-literal">true</span></span>      &#125;    &#125;)  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue 整理笔记05</title>
    <link href="/2020/04/30/vue5/"/>
    <url>/2020/04/30/vue5/</url>
    
    <content type="html"><![CDATA[<h1 id="五、事件监听"><a href="#五、事件监听" class="headerlink" title="五、事件监听"></a>五、事件监听</h1><h2 id="🚩-如何监听事件？"><a href="#🚩-如何监听事件？" class="headerlink" title="🚩 如何监听事件？"></a>🚩 如何监听事件？</h2><p>🔺  在前端开发中，我们需要经常和用于交互。这个时候，我们就必须监听用户发生的时间，比如点击、拖拽、键盘事件等等。在<code>Vue</code>中如何监听事件呢？使用<code>v-on</code>指令。</p><h2 id="🚩-v-on-介绍"><a href="#🚩-v-on-介绍" class="headerlink" title="🚩 v-on 介绍"></a>🚩 v-on 介绍</h2><p>🔺 <code>v-on</code>介绍</p><ul><li><p><strong>作用</strong>：绑定事件监听器</p></li><li><p><strong>缩写</strong>：<code>@</code></p></li><li><p><strong>预期</strong>：<code>Function | Inline Statement | Object</code></p></li><li><p><strong>参数</strong>：<code>event</code></p></li></ul><p>🔺 下面，我们就具体来学习<code>v-on</code>的使用。</p><h2 id="🚩-v-on-基础"><a href="#🚩-v-on-基础" class="headerlink" title="🚩 v-on 基础"></a>🚩 v-on 基础</h2><p>🔺 这里，我们用一个监听按钮的点击事件，来简单看看<code>v-on</code>的使用。</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-on基本使用<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;counter&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-bind:title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">:title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">"counter++"</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">"counter<span class="hljs-symbol">&amp;#45;</span><span class="hljs-symbol">&amp;#45;</span>"</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">"increment"</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">"decrement"</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"increment"</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"decrement"</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">    el: <span class="hljs-string">'#app'</span>,</span>    data: &#123;      counter: 0    &#125;,    methods: &#123;      increment() &#123;<span class="actionscript">        <span class="hljs-keyword">this</span>.counter++</span>      &#125;,      decrement() &#123;<span class="actionscript">        <span class="hljs-keyword">this</span>.counter--</span>      &#125;    &#125;  &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>🔺 上面面的代码中，第十三行我们使用了v-on。</p><pre><code class="hljs html">v-on:click="counter++</code></pre><p>🔺 另外，我们可以像28-33行那样将事件指向一个在<code>methods</code>中定义的函数。</p><blockquote><p>👩注意👩:v-on也有对应的语法糖：<code>v-on:click</code>可以写成@click，如17/18行这样写。</p></blockquote><h2 id="🚩-v-on-参数"><a href="#🚩-v-on-参数" class="headerlink" title="🚩 v-on 参数"></a>🚩 v-on 参数</h2><p>🔺 当通过<code>methods</code>中定义方法，以供<code>@click</code>调用时，需要<strong>注意参数问题</strong>：</p><ul><li>情况一：如果该方法不需要额外参数，那么方法后的<code>()</code>可以不添加。</li></ul><blockquote><p>👩注意👩：如果方法本身中有一个参数，那么会默认将原生事件<code>event</code>参数传递进去.</p></blockquote><ul><li>情况二：如果需要同时传入某个参数，同时需要<code>event</code>时，可以通过<code>$event</code>传入事件</li></ul><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-on参数<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-comment">&lt;!--1.事件调用的方法没有参数--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"btn1Click()"</span>&gt;</span>按钮1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"btn1Click"</span>&gt;</span>按钮1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <span class="hljs-comment">&lt;!--2.在事件定义时, 写方法时省略了小括号, 但是方法本身是需要一个参数的, 这个时候, Vue会默认将浏览器生产的event事件对象作为参数传入到方法--&gt;</span>  <span class="hljs-comment">&lt;!--&lt;button @click="btn2Click(123)"&gt;按钮2&lt;/button&gt;--&gt;</span>  <span class="hljs-comment">&lt;!--&lt;button @click="btn2Click()"&gt;按钮2&lt;/button&gt;--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"btn2Click"</span>&gt;</span>按钮2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <span class="hljs-comment">&lt;!--3.方法定义时, 我们需要event对象, 同时又需要其他参数--&gt;</span>  <span class="hljs-comment">&lt;!-- 在调用方式, 如何手动的获取到浏览器参数的event对象: $event--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"btn3Click(abc, $event)"</span>&gt;</span>按钮3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">    el: <span class="hljs-string">'#app'</span>,</span>    data: &#123;<span class="actionscript">      message: <span class="hljs-string">'你好啊'</span>,</span>      abc: 123    &#125;,    methods: &#123;      btn1Click() &#123;<span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"btn1Click"</span>);</span>      &#125;,      btn2Click(event) &#123;<span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'--------'</span>, event);</span>      &#125;,      btn3Click(abc, event) &#123;<span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'++++++++'</span>, abc, event);</span>      &#125;    &#125;  &#125;)<span class="actionscript">  <span class="hljs-comment">// 如果函数需要参数,但是没有传入, 那么函数的形参为undefined</span></span><span class="actionscript">  <span class="hljs-comment">// function abc(name) &#123;</span></span><span class="actionscript">  <span class="hljs-comment">//   console.log(name);</span></span><span class="actionscript">  <span class="hljs-comment">// &#125;</span></span><span class="actionscript">  <span class="hljs-comment">//</span></span><span class="actionscript">  <span class="hljs-comment">// abc()</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><h2 id="🚩-v-on-修饰符"><a href="#🚩-v-on-修饰符" class="headerlink" title="🚩 v-on 修饰符"></a>🚩 v-on 修饰符</h2><p>🔺 在某些情况下，我们拿到event的目的可能是进行一些事件处理。<code>Vue</code>提供了修饰符来帮助我们方便的处理一些事件：</p><pre><code class="hljs html"><span class="hljs-comment">&lt;!--.stop - 调用 event.stopPropagation()--&gt;</span><span class="hljs-comment">&lt;!--.prevent - 调用 event.preventDefault()--&gt;</span><span class="hljs-comment">&lt;!--.&#123;keyCode | keyAlias&#125; - 只当事件是从特定键触发时才触发回调--&gt;</span><span class="hljs-comment">&lt;!--.native - 监听组件根元素的原生事件--&gt;</span><span class="hljs-comment">&lt;!--.once - 只触发一次回调--&gt;</span></code></pre><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-on修饰符<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-comment">&lt;!--1. .stop修饰符的使用--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"divClick"</span>&gt;</span>    aaaaaaa    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">"btnClick"</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-comment">&lt;!--2. .prevent修饰符的使用--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"baidu"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"提交"</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">"submitClick"</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>  <span class="hljs-comment">&lt;!--3. .监听某个键盘的键帽--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">"keyUp"</span>&gt;</span>  <span class="hljs-comment">&lt;!--4. .once修饰符的使用--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.once</span>=<span class="hljs-string">"btn2Click"</span>&gt;</span>按钮2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">    el: <span class="hljs-string">'#app'</span>,</span>    data: &#123;<span class="actionscript">      message: <span class="hljs-string">'你好啊'</span></span>    &#125;,    methods: &#123;      btnClick() &#123;<span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"btnClick"</span>);</span>      &#125;,      divClick() &#123;<span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"divClick"</span>);</span>      &#125;,      submitClick() &#123;<span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'submitClick'</span>);</span>      &#125;,      keyUp() &#123;<span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'keyUp'</span>);</span>      &#125;,      btn2Click() &#123;<span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'btn2Click'</span>);</span>      &#125;    &#125;  &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue 笔记整理04</title>
    <link href="/2020/04/27/vue4/"/>
    <url>/2020/04/27/vue4/</url>
    
    <content type="html"><![CDATA[<h1 id="四-计算属性"><a href="#四-计算属性" class="headerlink" title="四. 计算属性"></a>四. 计算属性</h1><h2 id="🚩-什么是计算属性？"><a href="#🚩-什么是计算属性？" class="headerlink" title="🚩 什么是计算属性？"></a>🚩 什么是计算属性？</h2><p>🔺  我们知道，在模板中可以直接通过插值语法显示一些<code>data</code>中的数据。但是在某些情况，我们可能需要对数据进行一些转化后再显示，或者需要将多个数据结合起来进行显示。比如我们有<code>firstName</code>和<code>lastName</code>两个变量，我们需要显示完整的名称。但是如果多个地方都需要显示完整的名称，我们就需要写多个<code></code>，<code></code>.我们可以将上面的代码换成计算属性,并且我们发现计算属性是写在实例的<code>computed</code>选项中的。</p><h2 id="🚩-计算属性的基本使用"><a href="#🚩-计算属性的基本使用" class="headerlink" title="🚩 计算属性的基本使用"></a>🚩 计算属性的基本使用</h2><p>🔺  假如现在有变量姓氏和名字，要得到完整的名字，应该怎么用计算属性实现呢？</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>计算属性的基本使用<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;firstName + ' ' + lastName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">    el: <span class="hljs-string">'#app'</span>,</span>    data: &#123;<span class="actionscript">      firstName: <span class="hljs-string">'Lebron'</span>,</span><span class="actionscript">      lastName: <span class="hljs-string">'James'</span></span>    &#125;,<span class="actionscript">    <span class="hljs-comment">// computed: 计算属性()</span></span>    computed: &#123;<span class="actionscript">      fullName: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;</span><span class="actionscript">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.firstName + <span class="hljs-string">' '</span> + <span class="hljs-keyword">this</span>.lastName</span>      &#125;    &#125;,    methods: &#123;      getFullName() &#123;<span class="actionscript">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.firstName + <span class="hljs-string">' '</span> + <span class="hljs-keyword">this</span>.lastName</span>      &#125;    &#125;  &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>🔺  第十行：使用<code>Mastache</code>语法拼接</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span> &#123;&#123;firstName+ " " + lastName&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></code></pre><p>🔺  第三十二行：使用方法methods</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span> &#123;&#123;getFullName()&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></code></pre><p>🔺  第二十七行：使用计算属性computed</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span> &#123;&#123;fullName&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></code></pre><blockquote><p>👩注意👩: 例子中计算属性<code>computed</code>的使用看起来和方法<code>methods</code>似乎一样，只是方法<code>methods</code>在调用时需要使用<code>()</code>，而计算属性不用，方法取名字一般是动词见名知义，而计算属性是属性是名词，但这只是基本使用。</p></blockquote><h2 id="🚩-计算属性的复杂操作"><a href="#🚩-计算属性的复杂操作" class="headerlink" title="🚩 计算属性的复杂操作"></a>🚩 <strong>计算属性的复杂操作</strong></h2><p>🔺  计算属性中也可以进行一些更加复杂的操作，比如下面的例子：</p><p>如果现在有一个数组数据<code>books</code>，里面包含许多<code>book</code>对象，数据结构如下：</p><pre><code class="hljs javascript">books:[     &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">110</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">"Unix编程艺术"</span>,<span class="hljs-attr">price</span>:<span class="hljs-number">119</span>&#125;,      &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">111</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">"代码大全"</span>,<span class="hljs-attr">price</span>:<span class="hljs-number">105</span>&#125;,     &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">112</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">"精通JavaScript"</span>,<span class="hljs-attr">price</span>:<span class="hljs-number">80</span>&#125;,     &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">113</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">"现代操作系统"</span>,<span class="hljs-attr">price</span>:<span class="hljs-number">87</span>&#125;,    ]</code></pre><p>要求你计算出所有<code>book</code>的总价格<code>totalPrice</code>,你该怎么做呢？</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>计算属性的复杂操作<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>总价格: &#123;&#123;totalPrice&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>总价格: &#123;&#123;totalPrice&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>总价格: &#123;&#123;totalPrice&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>总价格: &#123;&#123;totalPrice&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>总价格: &#123;&#123;getTotalPrice()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>总价格: &#123;&#123;getTotalPrice()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>总价格: &#123;&#123;getTotalPrice()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>总价格: &#123;&#123;getTotalPrice()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">    el: <span class="hljs-string">'#app'</span>,</span>    data: &#123;      books: [<span class="actionscript">        &#123;id: <span class="hljs-number">110</span>, name: <span class="hljs-string">'Unix编程艺术'</span>, price: <span class="hljs-number">119</span>&#125;,</span><span class="actionscript">        &#123;id: <span class="hljs-number">111</span>, name: <span class="hljs-string">'代码大全'</span>, price: <span class="hljs-number">105</span>&#125;,</span><span class="actionscript">        &#123;id: <span class="hljs-number">112</span>, name: <span class="hljs-string">'精通JavaScript'</span>, price: <span class="hljs-number">80</span>&#125;,</span><span class="actionscript">        &#123;id: <span class="hljs-number">113</span>, name: <span class="hljs-string">'现代操作系统'</span>, price: <span class="hljs-number">87</span>&#125;,</span>      ]    &#125;,    methods: &#123;<span class="actionscript">      getTotalPrice: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;</span><span class="javascript">        <span class="hljs-keyword">let</span> result = <span class="hljs-number">0</span></span><span class="javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>.books.length; i++) &#123;</span><span class="actionscript">          result += <span class="hljs-keyword">this</span>.books[i].price</span>        &#125;<span class="actionscript">        <span class="hljs-keyword">return</span> result</span>      &#125;    &#125;,    computed: &#123;<span class="actionscript">      totalPrice: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;</span><span class="javascript">        <span class="hljs-keyword">let</span> result = <span class="hljs-number">0</span></span><span class="javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>.books.length; i++) &#123;</span><span class="actionscript">          result += <span class="hljs-keyword">this</span>.books[i].price</span>        &#125;<span class="actionscript">        <span class="hljs-keyword">return</span> result</span><span class="actionscript">        <span class="hljs-comment">// for (let i in this.books) &#123;</span></span><span class="actionscript">        <span class="hljs-comment">//   this.books[i]</span></span><span class="actionscript">        <span class="hljs-comment">// &#125;</span></span><span class="actionscript">        <span class="hljs-comment">//</span></span><span class="actionscript">        <span class="hljs-comment">// for (let book of this.books) &#123;</span></span><span class="actionscript">        <span class="hljs-comment">//</span></span><span class="actionscript">        <span class="hljs-comment">// &#125;</span></span>      &#125;    &#125;  &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><blockquote><p>方法👩: 通过获取每一个<code>book</code>对象的<code>price</code>属性，将他们累加起来，当其中一个<code>book</code>的价格发生改变时候，总价会随之变化。</p></blockquote><h2 id="🚩-计算属性的setter和getter"><a href="#🚩-计算属性的setter和getter" class="headerlink" title="🚩 计算属性的setter和getter"></a>🚩 <strong>计算属性的</strong>setter<strong>和</strong>getter</h2><p>🔺  每个计算属性都包含一个<code>getter</code>和一个<code>setter</code>。在上面的例子中，我们只是使用<code>getter</code>来读取。在某些情况下，你也可以提供一个<code>setter</code>方法（不常用）。在需要写<code>setter</code>的时候，代码如下：</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>计算属性的setter和getter<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">    el: <span class="hljs-string">'#app'</span>,</span>    data: &#123;<span class="actionscript">      firstName: <span class="hljs-string">'Kobe'</span>,</span><span class="actionscript">      lastName: <span class="hljs-string">'Bryant'</span></span>    &#125;,    computed: &#123;<span class="actionscript">      <span class="hljs-comment">// fullName: function () &#123;</span></span><span class="actionscript">      <span class="hljs-comment">//   return this.firstName + ' ' + this.lastName</span></span><span class="actionscript">      <span class="hljs-comment">// &#125;</span></span><span class="actionscript">      <span class="hljs-comment">// name: 'coderwhy'</span></span><span class="actionscript">      <span class="hljs-comment">// 计算属性一般是没有set方法, 只读属性.</span></span>      fullName: &#123;<span class="actionscript">        <span class="hljs-keyword">set</span>: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(newValue)</span> </span>&#123;</span><span class="actionscript">          <span class="hljs-comment">// console.log('-----', newValue);</span></span><span class="actionscript">          <span class="hljs-keyword">const</span> names = newValue.split(<span class="hljs-string">' '</span>);</span><span class="actionscript">          <span class="hljs-keyword">this</span>.firstName = names[<span class="hljs-number">0</span>];</span><span class="actionscript">          <span class="hljs-keyword">this</span>.lastName = names[<span class="hljs-number">1</span>];</span>        &#125;,<span class="actionscript">        <span class="hljs-keyword">get</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;</span><span class="actionscript">          <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.firstName + <span class="hljs-string">' '</span> + <span class="hljs-keyword">this</span>.lastName</span>        &#125;      &#125;,<span class="actionscript">      <span class="hljs-comment">// fullName: function () &#123;</span></span><span class="actionscript">      <span class="hljs-comment">//   return this.firstName + ' ' + this.lastName</span></span><span class="actionscript">      <span class="hljs-comment">// &#125;</span></span>    &#125;  &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><blockquote><p>👩注意👩: 计算属性一般没有<code>set</code>方法，属于只读属性，只有<code>get</code>方法，但是上述中<code>newValue</code>就是新的值，也可以使用<code>set</code>方法设置值，但是一般不用。</p></blockquote><h2 id="🚩-计算属性的缓存"><a href="#🚩-计算属性的缓存" class="headerlink" title="🚩 计算属性的缓存"></a>🚩 <strong>计算属性的缓存</strong></h2><p>🔺  我们可能会考虑这样的一个问题：<code>methods</code>和<code>computed</code>看起来都可以实现我们的功能，那么为什么还要多一个计算属性这个东西呢？</p><p>🔺  原因：计算属性会进行缓存，如果多次使用时，计算属性只会调用一次。</p><p>🔺  我们来看下面的代码：</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span> 计算属性的缓存<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-comment">&lt;!--1.直接拼接: 语法过于繁琐--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-comment">&lt;!--2.通过定义methods,即使firstName和lastName没有改变，也需要再次执行--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-comment">&lt;!--3.通过computed, 计算属性有缓存，只有关联属性改变才会再次计算--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">  <span class="hljs-comment">// angular -&gt; google</span></span><span class="actionscript">  <span class="hljs-comment">// TypeScript(microsoft) -&gt; ts(类型检测)</span></span><span class="actionscript">  <span class="hljs-comment">// flow(facebook) -&gt;</span></span><span class="actionscript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">    el: <span class="hljs-string">'#app'</span>,</span>    data: &#123;<span class="actionscript">      firstName: <span class="hljs-string">'Kobe'</span>,</span><span class="actionscript">      lastName: <span class="hljs-string">'Bryant'</span></span>    &#125;,    methods: &#123;<span class="actionscript">      getFullName: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;</span><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'getFullName'</span>);</span><span class="actionscript">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.firstName + <span class="hljs-string">' '</span> + <span class="hljs-keyword">this</span>.lastName</span>      &#125;    &#125;,    computed: &#123;<span class="actionscript">      fullName: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;</span><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'fullName'</span>);</span><span class="actionscript">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.firstName + <span class="hljs-string">' '</span> + <span class="hljs-keyword">this</span>.lastName</span>      &#125;    &#125;  &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><blockquote><p>👩注意👩: 由此可见计算属性有缓存，在<code>this.firstName + &quot; &quot; + this.lastName</code>的属性不变的情况下，<code>methods</code>调用了四次，而计算属性才调用了一次，性能上计算属性明显比<code>methods</code>好。而且在改动<code>firstName</code>的情况下，计算属性只调用一次，<code>methods</code>依然要调用4次。</p></blockquote><p>以上笔记是根据王红元老师的课程整理的。</p><p>More info: <a href="https://www.bilibili.com/video/BV15741177Eh?p=12" target="_blank" rel="noopener">王红元 | Vue 课程</a></p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue 笔记整理03</title>
    <link href="/2020/04/26/vue3/"/>
    <url>/2020/04/26/vue3/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue-笔记整理03"><a href="#Vue-笔记整理03" class="headerlink" title="Vue 笔记整理03"></a>Vue 笔记整理03</h1><p>🔺 前面我们学习的指令主要作用是将值插入到我们模板的内容当中。</p><p>🔺 但是，除了内容需要动态来决定外，某些属性我们也希望动态来绑定。</p><p>🔺 比如动态绑定a元素的<code>href</code>属性</p><p>🔺 比如动态绑定<code>img</code>元素的<code>src</code>属性</p><p>🔺 这个时候，我们可以使用<code>v-bind指令</code>：</p><p>​    🔺  <strong>作用</strong>：动态绑定属性</p><p>​    🔺  <strong>缩写</strong>：<code>:</code></p><p>​    🔺  <strong>预期</strong>：<code>any (with argument) | Object (without argument)</code></p><p>​    🔺  <strong>参数</strong>：<code>attrOrProp (optional)</code></p><p>🔺 下面，我们就具体来学习v-bind的使用。</p><h2 id="三-v-bind"><a href="#三-v-bind" class="headerlink" title="三. v-bind"></a>三. v-bind</h2><h3 id="3-1-v-bind绑定基本属性"><a href="#3-1-v-bind绑定基本属性" class="headerlink" title="3.1. v-bind绑定基本属性"></a>3.1. v-bind绑定基本属性</h3><h4 id="🚩-v-bind的基本使用"><a href="#🚩-v-bind的基本使用" class="headerlink" title="🚩 v-bind的基本使用"></a>🚩 <code>v-bind</code>的基本使用</h4><ul><li><p>v-bind用于绑定一个或多个属性值，或者向另一个组件传递props值(这个学到组件时再介绍)</p></li><li><p>在开发中，有哪些属性需要动态进行绑定呢？</p></li><li><p>还是有很多的，比如图片的链接<code>src</code>、网站的链接<code>href</code>、动态绑定一些类、样式等</p><p>🔺 其实，在 某些时候我们并不想将变量放在标签内容中，像这样<code>&lt;h2&gt;&lt;/h2&gt;</code>是将变量<code>h2</code>标签括起来，类似<code>js</code>的<code>innerHTML</code>。但是我们期望将变量<code>imgURL</code>写在如下位置，想这样<code>&lt;img src=&quot;imgURL&quot; alt=&quot;&quot;&gt;</code>导入图片是希望动态获取图片的链接，此时的<code>imgURL</code>并非变量而是字符串<code>imgURL</code>，如果要将其生效为变量，需要使用到一个标签<code>v-bind:</code>，像这样<code>&lt;img v-bind:src=&quot;imgURL&quot; alt=&quot;&quot;&gt;</code>，而且这里也不能使用Mustache语法，类似<code>&lt;img v-bind:src=&quot;&quot; alt=&quot;&quot;&gt;</code>，这也是错误的。</p></li></ul><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 错误的做法: 这里不可以使用mustache语法--&gt;</span>  <span class="hljs-comment">&lt;!--&lt;img src="&#123;&#123;imgURL&#125;&#125;" alt=""&gt;--&gt;</span>  <span class="hljs-comment">&lt;!-- 正确的做法: 使用v-bind指令 --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">v-bind:src</span>=<span class="hljs-string">"imgURL"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:href</span>=<span class="hljs-string">"aHref"</span>&gt;</span>百度一下<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>  <span class="hljs-comment">&lt;!--&lt;h2&gt;&#123;&#123;&#125;&#125;&lt;/h2&gt;--&gt;</span>  <span class="hljs-comment">&lt;!--语法糖的写法--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">"imgURL"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">"aHref"</span>&gt;</span>百度一下<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">    el: <span class="hljs-string">'#app'</span>,</span>    data: &#123;<span class="actionscript">      message: <span class="hljs-string">'你好啊'</span>,</span><span class="actionscript">      imgURL: <span class="hljs-string">'https://img11.360buyimg.com/mobilecms/s350x250_jfs/t1/20559/1/1424/73138/5c125595E3cbaa3c8/74fc2f84e53a9c23.jpg!q90!cc_350x250.webp'</span>,</span><span class="actionscript">      aHref: <span class="hljs-string">'http://www.baidu.com'</span></span>    &#125;  &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>🔺 此时<code>vue</code>对象中定义的<code>imgURL</code>变量和<code>aHerf</code>变量可以动态的绑定到<code>img</code>标签的<code>src</code>属性和<code>a</code>标签的<code>href</code>属性。</p><p>🔺 第十五行的<code>:href</code>：<code>v-bind:</code>由于用的很多，<code>vue</code>对他有一个语法糖的优化写法也就是<code>:</code>，此时修改<code>imgURL</code>变量图片页重新加载。</p><h3 id="3-2-v-bind动态绑定class"><a href="#3-2-v-bind动态绑定class" class="headerlink" title="3.2. v-bind动态绑定class"></a>3.2. v-bind动态绑定class</h3><p>🔺  很多时候，我们希望动态的来切换class，比如：当数据为某个状态时，字体显示红色;当数据另一个状态时，字体显示黑色。</p><p>🔺  绑定class有两种方式：</p><ul><li><p>对象语法</p></li><li><p>数组语法</p></li></ul><h4 id="🚩-对象语法-作业-class-’-类名-boolean-’"><a href="#🚩-对象语法-作业-class-’-类名-boolean-’" class="headerlink" title="🚩 对象语法: 作业 :class=’{类名: boolean}’"></a>🚩 对象语法: 作业 :class=’{类名: boolean}’</h4><p>🔺 对象语法的含义是:class后面跟的是一个对象。</p><p>🔺 对象语法有下面这些用法：</p><ul><li>用法一：直接通过{}绑定一个类</li></ul><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"&#123;'active': isActive&#125;"</span>&gt;</span>Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></code></pre><ul><li>用法二：也可以通过判断，传入多个值</li></ul><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"&#123;'active': isActive, 'line': isLine&#125;"</span>&gt;</span>Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></code></pre><ul><li>用法三：和普通的类同时存在，并不冲突</li></ul><p>注：如果<code>isActive</code>和<code>isLine</code>都为<code>true</code>，那么会有<code>title/active/line</code>三个类</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"title"</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"&#123;'active': isActive, 'line': isLine&#125;"</span>&gt;</span>Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></code></pre><ul><li>用法四：如果过于复杂，可以放在一个<code>methods</code>或者<code>computed</code>中</li></ul><p>注：<code>classes</code>是一个计算属性</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"title"</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"classes"</span>&gt;</span>Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></code></pre><p> 🔺 有时候我们期望对Dom元素的节点的class进行动态绑定，选择此Dom是否有指定class属性。例如，给h2标签加上<code>class=&quot;active&quot;</code>，当Dom元素有次class时候，变红<code>&lt;style&gt;.active{color:red;}&lt;/style&gt;</code>，在写一个按钮绑定事件，点击变黑色，再次点击变红色。</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    <span class="hljs-selector-class">.active</span> &#123;</span>      color: red;    &#125;  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-comment">&lt;!--&lt;h2 class="active"&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;--&gt;</span>  <span class="hljs-comment">&lt;!--&lt;h2 :class="active"&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;--&gt;</span>  <span class="hljs-comment">&lt;!--&lt;h2 v-bind:class="&#123;key1: value1, key2: value2&#125;"&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;--&gt;</span>  <span class="hljs-comment">&lt;!--&lt;h2 v-bind:class="&#123;类名1: true, 类名2: boolean&#125;"&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"title"</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">"&#123;active: isActive, line: isLine&#125;"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"title"</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">"getClasses()"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">"change"</span>&gt;</span>点击变色<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">    el: <span class="hljs-string">'#app'</span>,</span>    data: &#123;<span class="actionscript">      message: <span class="hljs-string">'你好啊'</span>,</span><span class="actionscript">      active:<span class="hljs-string">"active"</span>，</span><span class="actionscript">      isActive: <span class="hljs-literal">true</span></span>    &#125;,    methods: &#123;      change () &#123;<span class="actionscript">        <span class="hljs-keyword">this</span>.isActive = !<span class="hljs-keyword">this</span>.isActive</span>      &#125;,      getClasses () &#123;<span class="actionscript">        <span class="hljs-keyword">return</span> &#123;active: <span class="hljs-keyword">this</span>.isActive&#125;</span>    &#125;  &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p> 🔺  定义两个变量<code>active</code>和<code>isActive</code>，在Dom元素中使用<code>:class={active:isActive}</code>，此时绑定的<code>class=&#39;active&#39;</code>，<code>isActive</code>为<code>true</code>，<code>active</code>显示，定义方法<code>change()</code>绑定在按钮上，点击按钮<code>this.isActive = !this.isActive</code>，控制Dom元素是否有<code>class=&#39;active&#39;</code>的属性。</p><h4 id="🚩-数组语法"><a href="#🚩-数组语法" class="headerlink" title="🚩 数组语法:"></a>🚩 数组语法:</h4><p>🔺 数组语法的含义是<code>:class</code>后面跟的是一个数组。</p><p>🔺 数组语法有下面这些用法：</p><ul><li>用法一：直接通过{}绑定一个类</li></ul><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"['active']"</span>&gt;</span>Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></code></pre><ul><li>用法二：也可以传入多个值</li></ul><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">“[‘active’,</span> '<span class="hljs-attr">line</span>']"&gt;</span>Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></code></pre><ul><li>用法三：和普通的类同时存在，并不冲突</li></ul><p>注：会有title/active/line三个类</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"title"</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">“[‘active’,</span> '<span class="hljs-attr">line</span>']"&gt;</span>Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></code></pre><p>用法四：如果过于复杂，可以放在一个<code>methods</code>或者<code>computed</code>中</p><p>注：classes是一个计算属性</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"title"</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"classes"</span>&gt;</span>Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></code></pre><p>  🔺 class属性中可以放数组，会依次解析成对应的class</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"title"</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"[active, line]"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"title"</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"getClasses()"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">    el: <span class="hljs-string">'#app'</span>,</span>    data: &#123;<span class="actionscript">      message: <span class="hljs-string">'你好啊'</span>,</span><span class="actionscript">      active: <span class="hljs-string">'aaaaaa'</span>,</span><span class="actionscript">      line: <span class="hljs-string">'bbbbbbb'</span></span>    &#125;,    methods: &#123;<span class="actionscript">      getClasses: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;</span><span class="actionscript">        <span class="hljs-keyword">return</span> [<span class="hljs-keyword">this</span>.active, <span class="hljs-keyword">this</span>.line]</span>      &#125;    &#125;  &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><h3 id="3-3-v-bind动态绑定style"><a href="#3-3-v-bind动态绑定style" class="headerlink" title="3.3. v-bind动态绑定style"></a>3.3. v-bind动态绑定style</h3><p>🔺 我们可以利用<code>v-bind:style</code>来绑定一些<code>CSS</code>内联样式。</p><p>🔺 在写<code>CSS</code>属性名的时候，比如<code>font-size</code></p><p>🔺 我们可以使用驼峰式<code>(camelCase) fontSize</code></p><p>🔺 或短横线分隔<code>(kebab-case，记得用单引号括起来)`` ‘font-size’</code></p><p>🔺 绑定class有两种方式：</p><ul><li><p>对象语法</p></li><li><p>数组语法</p></li></ul><h4 id="🚩-对象语法"><a href="#🚩-对象语法" class="headerlink" title="🚩 对象语法:"></a>🚩 对象语法:</h4><pre><code class="hljs html">:style="&#123;color: currentColor, fontSize: fontSize + 'px'&#125;"</code></pre><p>🔺 <code>style</code>后面跟的是一个对象类型</p><p>🔺 对象的<code>key</code>是<code>CSS</code>属性名称</p><p>🔺 对象的<code>value</code>是具体赋的值，值可以来自于<code>data</code>中的属性</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    <span class="hljs-selector-class">.title</span> &#123;</span>      font-size: 50px;      color: red;    &#125;  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-comment">&lt;!--&lt;h2 :style="&#123;key(属性名): value(属性值)&#125;"&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;--&gt;</span>  <span class="hljs-comment">&lt;!--'50px'必须加上单引号, 否则是当做一个变量去解析--&gt;</span>  <span class="hljs-comment">&lt;!--&lt;h2 :style="&#123;fontSize: '50px'&#125;"&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;--&gt;</span>  <span class="hljs-comment">&lt;!--finalSize当成一个变量使用--&gt;</span>  <span class="hljs-comment">&lt;!--&lt;h2 :style="&#123;fontSize: finalSize&#125;"&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">"&#123;fontSize: finalSize + 'px', backgroundColor: finalColor&#125;"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">"getStyles()"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">    el: <span class="hljs-string">'#app'</span>,</span>    data: &#123;<span class="actionscript">      message: <span class="hljs-string">'你好啊'</span>,</span>      finalSize: 100,<span class="actionscript">      finalColor: <span class="hljs-string">'red'</span>,</span>    &#125;,    methods: &#123;<span class="actionscript">      getStyles: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;</span><span class="actionscript">        <span class="hljs-keyword">return</span> &#123;fontSize: <span class="hljs-keyword">this</span>.finalSize + <span class="hljs-string">'px'</span>, backgroundColor: <span class="hljs-keyword">this</span>.finalColor&#125;</span>      &#125;    &#125;  &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><h4 id="🚩-数组语法-1"><a href="#🚩-数组语法-1" class="headerlink" title="🚩 数组语法:"></a>🚩 数组语法:</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:style</span>=<span class="hljs-string">"[baseStyles, overridingStyles]"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre><p>🔺 style后面跟的是一个数组类型</p><p>🔺 多个值时，分割即可</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">"[baseStyle, baseStyle1]"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">    el: <span class="hljs-string">'#app'</span>,</span>    data: &#123;<span class="actionscript">      message: <span class="hljs-string">'你好啊'</span>,</span><span class="actionscript">      baseStyle: &#123;backgroundColor: <span class="hljs-string">'red'</span>&#125;,</span><span class="actionscript">      baseStyle1: &#123;fontSize: <span class="hljs-string">'100px'</span>&#125;,</span>    &#125;  &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>以上笔记是根据王红元老师的课程整理的。</p><p>More info: <a href="https://www.bilibili.com/video/BV15741177Eh?p=12" target="_blank" rel="noopener">王红元 | Vue 课程</a></p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue 笔记整理02</title>
    <link href="/2020/04/25/vue2/"/>
    <url>/2020/04/25/vue2/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue-笔记整理02"><a href="#Vue-笔记整理02" class="headerlink" title="Vue 笔记整理02"></a>Vue 笔记整理02</h1><h3 id="二-插值语法"><a href="#二-插值语法" class="headerlink" title="二.插值语法"></a>二.插值语法</h3><h4 id="🚩mustache语法"><a href="#🚩mustache语法" class="headerlink" title="🚩mustache语法"></a>🚩mustache语法</h4><ul><li><p>如何将data中的文本数据，插入到HTML中呢？</p></li><li><p>我们已经学习过了，可以通过Mustache语法(也就是双大括号)。</p></li><li><p>mustach：胡子，胡须</p></li><li>我们可以像下面这样来使用，并且数据是响应式的</li></ul><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>mustache语法<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Hello &#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;, Oyeah!<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-comment">&lt;!--mustache语法中,不仅仅可以直接写变量,也可以写简单的表达式--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;firstName + lastName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;firstName + ' ' + lastName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;counter * 2&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">    el: <span class="hljs-string">'#app'</span>,</span>    data: &#123;<span class="actionscript">      message: <span class="hljs-string">'哈哈哈，oyeah'</span>,</span><span class="actionscript">      firstName: <span class="hljs-string">'o'</span>,</span><span class="actionscript">      lastName: <span class="hljs-string">'yeah'</span>,</span>      counter: 100    &#125;,  &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><ul><li><p>第10行：mustache 插入到标签中</p></li><li><p>第14行：mustache 可以为一个表达式</p></li><li><p>第16行： 使用了两个mustache </p><p>🔺但是，在某些情况下，我们可能不希望界面随意的跟随改变，这个时候，我们就可以使用一个Vue的指令</p></li></ul><h4 id="🚩v-once"><a href="#🚩v-once" class="headerlink" title="🚩v-once"></a>🚩v-once</h4><ul><li><p>该指令后面不需要跟任何表达式(比如之前的v-for后面是跟表达式的)</p></li><li><p>该指令表示元素和组件(组件后面才会学习)只渲染一次，不会随着数据的改变而改变。</p></li></ul><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-once使用<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-once</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">    el: <span class="hljs-string">'#app'</span>,</span>    data: &#123;<span class="actionscript">      message: <span class="hljs-string">'你好啊'</span></span>    &#125;  &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>若控制台中输入一下代码：</p><pre><code class="hljs html">vm.message='Hello World'</code></pre><p>🔺 此时，message改变，界面并没有重新渲染</p><p>🔺上述<code>{{message}}</code>的message修改后，第一个h2标签数据会自动改变，第二个h2不会。</p><h4 id="🚩v-html"><a href="#🚩v-html" class="headerlink" title="🚩v-html"></a>🚩v-html</h4><ul><li><p>某些情况下，我们从服务器请求到的数据本身就是一个HTML代码</p></li><li><p>如果我们直接通过<code>{{}}</code>来输出，会将HTML代码也一起输出。但是我们可能希望的是按照HTML格式进行解析，并且显示对应的内容。</p></li><li><p>如果我们希望解析出HTML展示，可以使用v-html指令</p></li><li><p>该指令后面往往会跟上一个string类型，会将string的html解析出来并且进行渲染</p></li></ul><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-html使用<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>不使用v-html<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;url&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>使用v-html，直接插入html<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">"url"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">    el: <span class="hljs-string">'#app'</span>,</span>    data: &#123;<span class="actionscript">      message: <span class="hljs-string">'你好啊'</span>,</span><span class="handlebars"><span class="xml">      url: '<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"http://www.baidu.com"</span>&gt;</span>百度一下<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>'</span></span>    &#125;  &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>输出结果如下：</p><p><img src="vue2-1.png" srcset="/img/loading.gif" alt=""></p><h4 id="🚩v-text"><a href="#🚩v-text" class="headerlink" title="🚩v-text"></a>🚩v-text</h4><ul><li><p>v-text作用和Mustache一致：</p></li><li><p>v-text通常情况下，接受一个string类型</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-test 使用<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;, 李银河!<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">"message"</span>&gt;</span>, 李银河!<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">    el: <span class="hljs-string">'#app'</span>,</span>    data: &#123;<span class="actionscript">      message: <span class="hljs-string">'你好啊'</span></span>    &#125;  &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>输出结果如下：</p><p><img src="vue2-2.png" srcset="/img/loading.gif" alt=""></p></li></ul><p>  🔺如图所示，使用<code></code>是拼接<code>变量和字符串</code>，而是用<code>v-text</code>是直接覆盖<code>字符串内容</code>。</p><h4 id="🚩v-pre"><a href="#🚩v-pre" class="headerlink" title="🚩v-pre"></a>🚩v-pre</h4><ul><li><p>v-pre用于跳过这个元素和它子元素的编译过程，用于显示原本的Mustache语法。</p></li><li><p>比如下面的代码：</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-pre</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">    el: <span class="hljs-string">'#app'</span>,</span>    data: &#123;<span class="actionscript">      message: <span class="hljs-string">'你好啊'</span></span>    &#125;  &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></li></ul><p>🔺第一个h2元素中的内容会被编译解析出来对应的内容-&gt;Hello World</p><p>🔺第二个h2元素中会直接显示<code></code>，直接显示出字符串</p><h4 id="🚩v-cloak-斗篷"><a href="#🚩v-cloak-斗篷" class="headerlink" title="🚩v-cloak: 斗篷"></a>🚩v-cloak: 斗篷</h4><ul><li><p>某些情况下，我们浏览器可能会直接显示出未编译的Mustache标签</p></li><li><p>有时候因为加载延时问题，比如卡掉了以及数据没有及时刷新，就造成了页面显示从<code></code>到message变量“你好啊”的变化，这样闪动的变化，会造成用户体验不好。此时需要使用到<code>v-cloak</code>的这个标签。在vue解析之前，div属性中有<code>v-cloak</code>这个标签，在vue解析完成之后，v-cloak标签被移除。简单，类似div开始有一个css属性<code>display:none;</code>，加载完成之后，css属性变成<code>display:block</code>，元素显示出来。</p></li></ul><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-cloak 斗篷使用<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    <span class="hljs-selector-attr">[v-cloak]</span> &#123;</span>      display: none;    &#125;  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span> <span class="hljs-attr">v-cloak</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">  <span class="hljs-comment">// 在vue解析之前, div中有一个属性v-cloak</span></span><span class="actionscript">  <span class="hljs-comment">// 在vue解析之后, div中没有一个属性v-cloak</span></span><span class="actionscript">  setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;</span><span class="actionscript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">      el: <span class="hljs-string">'#app'</span>,</span>      data: &#123;<span class="actionscript">        message: <span class="hljs-string">'你好啊'</span></span>      &#125;    &#125;)  &#125;, 1000)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>以上笔记是根据王红元老师的课程整理的。</p><p>More info: <a href="https://www.bilibili.com/video/BV15741177Eh?p=12" target="_blank" rel="noopener">王红元 | Vue 课程</a></p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue 笔记整理01</title>
    <link href="/2020/04/24/vue1/"/>
    <url>/2020/04/24/vue1/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue-笔记整理01"><a href="#Vue-笔记整理01" class="headerlink" title="Vue 笔记整理01"></a>Vue 笔记整理01</h1><h3 id="一-邂逅Vuejs"><a href="#一-邂逅Vuejs" class="headerlink" title="一. 邂逅Vuejs"></a>一. 邂逅Vuejs</h3><h4 id="1-1-认识Vuejs"><a href="#1-1-认识Vuejs" class="headerlink" title="1.1. 认识Vuejs"></a>1.1. 认识Vuejs</h4><p>🚩为什么学习Vuejs</p><p>   ✍我相信每个人学习Vue的目的是各部相同的。</p><ul><li>可能你的公司正要将原有的项目使用Vue进行重构。</li><li><p>可能是你的公司新项目决定使用Vue的技术栈。</p></li><li><p>当然，如果你现在正在换工作，你会发现招聘前端的需求中，10个有8个都对Vue有或多或少的要求。</p></li><li><p>当然，作为学习者我们知道Vuejs目前非常火，可以说是前端必备的一个技能。</p></li></ul><p>🚩Vue的读音</p><ul><li>Vue (读音 /vjuː/，类似于 <strong>view</strong>)，不要读错。</li></ul><p>🚩Vue的渐进式</p><ul><li><p>Vue是一个渐进式的框架，什么是渐进式的呢？</p><p> ◻ 渐进式意味着你可以将Vue作为你应用的一部分嵌入其中，带来更丰富的交互体验。</p></li></ul><p>​       ◻ 或者如果你希望将更多的业务逻辑使用Vue实现，那么Vue的核心库以及其生态系统。</p><p>​       ◻ 比如Core+Vue-router+Vuex，也可以满足你各种各样的需求。</p><p>🚩Vue的特点</p><ul><li><p>解耦视图和数据</p></li><li><p>可复用的组件</p></li><li><p>前端路由技术</p></li><li><p>状态管理</p></li></ul><h4 id="1-2-安装Vue"><a href="#1-2-安装Vue" class="headerlink" title="1.2. 安装Vue"></a>1.2. 安装Vue</h4><p>🚩CDN引入</p><pre><code class="hljs javascript">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt; &lt;script src=<span class="hljs-string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;&lt;<span class="hljs-regexp">/script&gt;</span><span class="hljs-regexp">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span><span class="hljs-regexp">&lt;script src="https:/</span><span class="hljs-regexp">/cdn.jsdelivr.net/</span>npm/vue<span class="hljs-string">"&gt;&lt;/script&gt;</span></code></pre><p>🚩下载引入</p><p> <strong>开发环境</strong> <a href="https://vuejs.org/js/vue.js" target="_blank" rel="noopener">https://vuejs.org/js/vue.js</a><br> <strong>生产环境</strong> <a href="https://vuejs.org/js/vue.min.js" target="_blank" rel="noopener">https://vuejs.org/js/vue.min.js</a></p><p>🚩npm安装</p><pre><code class="hljs bash"><span class="hljs-comment"># 查看版本</span><span class="hljs-comment">#npm 版本需要大于 3.0，如果低于此版本需要升级它</span>$ npm -v2.3.0<span class="hljs-comment">#升级 npm</span>cnpm install npm -g<span class="hljs-comment"># 升级或安装 cnpm(cnpm为淘宝镜像)</span>npm install cnpm -g<span class="hljs-comment"># 最新稳定版</span>$ cnpm install vue</code></pre><pre><code class="hljs bash"><span class="hljs-comment">#大家都知道国内直接使用 npm 的官方镜像是非常慢的，这里推荐使用淘宝 NPM 镜像。</span><span class="hljs-comment">#淘宝 NPM 镜像是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</span><span class="hljs-comment">#你可以使用淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm:</span>$ npm install -g cnpm --registry=https://registry.npm.taobao.org<span class="hljs-comment">#下载好了就可以使用cnpm来安装模块</span>$ cnpm install [模块名]</code></pre><h4 id="1-3-Vue的初体验"><a href="#1-3-Vue的初体验" class="headerlink" title="1.3. Vue的初体验"></a>1.3. Vue的初体验</h4><p>🚩Hello Vuejs</p><pre><code class="hljs vue">&lt;div id&#x3D;&#39;app&#39;&gt;    &lt;h2&gt;Hello &#123;&#123;name&#125;&#125;  &lt;&#x2F;h2&gt;&lt;div&gt;     &lt;!-- 引入Vue.js 创建Vue对象 --&gt;   &lt;script src&#x3D;&quot;...&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;    let app&#x3D;new Vue(&#123;        el:&#39;#app&#39;,        data:&#123;            name:&#39;VueJS&#39;        &#125;    &#125;)&lt;&#x2F;script&gt;</code></pre><p>🔺创建Vue对象的时候，传入了一些options：{}</p><ul><li><p>{}中包含了el属性：该属性决定了这个Vue对象挂载到哪一个元素上，很明显，我们这里是挂载到了id为app的元素上</p></li><li><p>{}中包含了data属性：该属性中通常会存储一些数据</p></li><li><p>这些数据可以是我们直接定义出来的，比如像上面这样。也可能是来自网络，从服务器加载的</p></li></ul><p>🔺浏览器执行代码的流程：</p><ul><li><p>执行到1~4行代码显然出对应的HTML</p></li><li><p>执行第8行代码创建Vue实例，并且对原HTML进行解析和修改。</p></li><li><p>并且，目前我们的代码是可以做到响应式的，在浏览器端我们能看到<code>Hello VueJS</code></p></li></ul><p>🚩mustache -&gt; 体验vue响应式</p><p>🚩Vue列表展示</p><ul><li>现在，我们来展示一个更加复杂的数据：数据列表。</li></ul><p>​        ◻  比如我们现在从服务器请求过来一个列表</p><p>​        ◻  希望展示到HTML中</p><pre><code class="hljs vue">&lt;!-- 引入Vue.js 创建Vue对象 --&gt;   &lt;script src&#x3D;&quot;...&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;    let app&#x3D;new Vue(&#123;        el:&#39;#app&#39;,        data:&#123;            movies:[&#39;星际穿越,&#39;盗梦空间&#39;,&#39;大话西游&#39;]        &#125;    &#125;)&lt;&#x2F;script&gt;&lt;div id&#x3D;&#39;app&#39;&gt;    &lt;ul&gt;      &lt;li v-for&#x3D;&quot;item in movies&quot;&gt;      &#123;&#123;item&#125;&#125;      &lt;&#x2F;li&gt;    &lt;&#x2F;ul&gt;  &lt;div&gt;</code></pre><p>​      浏览器将显示：</p><ul><li>星际穿越</li></ul><ul><li><p>盗梦空间</p></li><li><p>大话西游</p><p>🔺HTML代码中，使用v-for指令,该指令我们后面会详细讲解，这里先学会使用。</p><p>🔺是不是变得So Easy，我们再也不需要在JavaScript代码中完成DOM的拼接相关操作了</p><p>🔺而且，更重要的是，它还是响应式的。也就是说，当我们数组中的数据发生改变时，界面会自动改变。</p><p>我们依然打开开发者模式的console，来试一下</p><p>console里面输入下列代码：</p><pre><code class="hljs plain">app.movies.push(&#39;等风来&#39;)</code></pre><p>浏览器将显示：</p><ul><li>星际穿越<ul><li>盗梦空间</li><li>大话西游</li><li>等风来</li></ul></li></ul></li></ul><p>🚩v-for</p><ul><li><p>v-for指令是循环渲染一组data中的数组，v-for 指令需要以 item in items 形式的特殊语法，items 是源数据数组并且item是数组元素迭代的别名。</p></li><li><p>模块写法</p><pre><code class="hljs vue">&lt;li v-for&#x3D;&quot;item in items&quot;&gt;     &#123;&#123;item&#125;&#125;&lt;li&gt;</code></pre></li></ul><ul><li><p>JS写法</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> Vue(&#123;   el:<span class="hljs-string">'app'</span>,   data:&#123;   items:[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>]   &#125;&#125;)</code></pre></li></ul><p>🚩后面给数组追加元素的时候, 新的元素也可以在界面中渲染出来</p><p>🚩Vue计数器小案例</p><ul><li>现在，我们来实现一个小的计数器</li></ul><p>​    ◻ 点击 + 计数器+1</p><p>​    ◻ 点击 -  计数器 -1</p><pre><code class="hljs vue">&lt;div id&#x3D;&#39;app&#39;&gt;    &lt;h2&gt;当前计数:&#123;&#123;counter&#125;&#125;&lt;&#x2F;h2&gt;    &lt;button @click&#x3D;&quot;increment&quot;&gt;+&lt;&#x2F;button&gt;    &lt;button @click&#x3D;&quot;decrement&quot;&gt;-&lt;&#x2F;button&gt; &lt;&#x2F;div&gt;    &lt;script src&#x3D;&quot;...&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;    let app&#x3D;new Vue(&#123;        el:&#39;#app&#39;,        data:&#123;           counter:0        &#125;,        methods:&#123;        increment()&#123;        this.counter++        &#125;,        decrement()&#123;        this.counter--        &#125;        &#125;    &#125;)&lt;&#x2F;script&gt;</code></pre><ul><li>这里，我们又要使用新的指令和属性了</li></ul><p>​        ◻ 新的属性：methods，该属性用于在Vue对象中定义方法。</p><p>​        ◻ 新的指令：@click, 该指令用于监听某个元素的点击事件，并且需要指定当发生点击时，执行的方法(方法通常是methods中定义的方法)</p><ul><li><p>你可能会疑惑？</p></li><li><p>这些@click是什么东西？</p></li></ul><p>​       ◻ Vue对象中又是定义el/data/methods，到底都有哪些东西可以定义，以及它们的作用是什么？</p><p>​       ◻ 这些疑惑在后续学习中都会一一解开。</p><p>🚩事件监听: click -&gt; methods</p><h4 id="1-4-Vue中的MVVM"><a href="#1-4-Vue中的MVVM" class="headerlink" title="1.4. Vue中的MVVM"></a>1.4. Vue中的MVVM</h4><p><img src="C:\Users\xqh\myblog\themes\fluid\source\img\bg\mvm.png" srcset="/img/loading.gif" alt=""></p><p>🚩通常我们学习一个概念，最好的方式是去看维基百科(对，千万别看成了百度百科)</p><p><a href="https://zh.wikipedia.org/wiki/MVVM" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/MVVM</a></p><p>🚩View层：</p><ul><li>视图层</li></ul><p>​       ◻ 在我们前端开发中，通常就是DOM层。</p><p>​       ◻ 主要的作用是给用户展示各种信息。</p><ul><li>Model层：</li></ul><p>​       ◻ 数据层</p><p>​       ◻ 数据可能是我们固定的死数据，更多的是来自我们服务器，从网络上请求下来的数据。</p><p>​       ◻ 在我们计数器的案例中，就是后面抽取出来的obj，当然，里面的数据可能没有这么简单。</p><ul><li>VueModel层：</li></ul><p>​       ◻ 视图模型层</p><p>​       ◻ 视图模型层是View和Model沟通的桥梁。</p><p>​       ◻ 一方面它实现了Data Binding，也就是数据绑定，将Model的改变实时的反应到View中</p><p>​       ◻ 另一方面它实现了DOM Listener，也就是DOM监听，当DOM发生一些事件(点击、滚动、touch等)时，可以监听到，并在需要的情况下改变对应的Data。</p><p>🚩计数器的MVVM</p><ul><li>我们的计数器中就有严格的MVVM思想</li></ul><p>​      ◻ View依然是我们的DOM</p><p>​      ◻ Model就是我们我们抽离出来的obj</p><p>​      ◻ ViewModel就是我们创建的Vue对象实例</p><ul><li>它们之间如何工作呢？</li></ul><p>​      ◻ 首先ViewModel通过Data Binding让obj中的数据实时的在DOM中显示。</p><p>​      ◻ 其次ViewModel通过DOM Listener来监听DOM事件，并且通过methods中的操作，来改变obj中的数据。</p><ul><li>有了Vue帮助我们完成VueModel层的任务，在后续的开发，我们就可以专注于数据的处理，以及DOM的编写工作了。</li></ul><h4 id="1-5-创建Vue时-options可以放那些东西"><a href="#1-5-创建Vue时-options可以放那些东西" class="headerlink" title="1.5. 创建Vue时, options可以放那些东西"></a>1.5. 创建Vue时, options可以放那些东西</h4><p>🚩你会发现，我们在创建Vue实例的时候，传入了一个对象options。</p><p>🚩这个options中可以包含哪些选项呢？</p><p>详细解析： <a href="https://cn.vuejs.org/v2/api/" target="_blank" rel="noopener">https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E6%95%B0%E6%8D%AE</a></p><p>🚩el:</p><ul><li><p>类型：string | HTMLElement</p></li><li><p>作用：决定之后Vue实例会管理哪一个DOM。</p></li></ul><p>🚩data:</p><ul><li><p>类型：Object | Function （组件当中data必须是一个函数）</p></li><li><p>作用：Vue实例对应的数据对象。</p></li></ul><p>🚩methods:</p><ul><li><p>类型：{ [key: string]: Function }</p></li><li><p>作用：定义属于Vue的一些方法，可以在其他地方调用，也可以在指令中使用。</p></li></ul><p>🚩生命周期函数</p><ul><li><a href="https://cn.vuejs.org/v2/guide/instance.html#生命周期图示" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA</a></li></ul><p>以上笔记是根据王红元老师的课程整理的。</p><p>More info: <a href="https://www.bilibili.com/video/BV15741177Eh?p=12" target="_blank" rel="noopener">王红元 | Vue 课程</a></p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>读书分享 | 被讨厌的勇气</title>
    <link href="/2020/04/22/cour/"/>
    <url>/2020/04/22/cour/</url>
    
    <content type="html"><![CDATA[<h2 id="内容导读"><a href="#内容导读" class="headerlink" title="内容导读"></a>内容导读</h2><h3 id="作者：岸见一郎-amp-古贺史健"><a href="#作者：岸见一郎-amp-古贺史健" class="headerlink" title="作者：岸见一郎 &amp; 古贺史健"></a>作者：岸见一郎 &amp; 古贺史健</h3><p>​      </p><p>​      🔺 看到书名，你可能会有疑问。现在不仅仅是爱需要勇气，就连被讨厌也需要勇气。那么，究竟被讨厌  时需要什么样的勇气呢？</p><p>​      🔺 你是否因为生活被工作支配而感到力不从心？</p><p>​      🔺 你是否因为学习被他人打扰而感到烦躁不安？</p><p>​      🔺 你是否因为想发展其他事业却抱怨没有空闲时间？</p><p>​      🔺  你是否因为自己的能力配不上野心时感到迷茫和焦虑？</p><p>​      🔺  或许是因为，我们过分关注自己。</p><p>​      🔺   这本书，从头到尾都是以一位年轻人和哲人的对话辩论来进入阿德勒式的心灵成长世界的，并且使用阿德勒的思想来解决人生的几大课题，以此教会我们在繁杂的日常琐碎、复杂的人际关系中用自己的双去获得属于自己的快乐以及幸福，挣脱人生的三大加锁。</p><p>​            🔸 来自过去的束缚</p><p>​            🔸 来自人际关系的束缚</p><p>​            🔸 来自未来的束缚</p><p>​     🔺  如果你感到人生很迷茫，找不到生活的方向，或是失去了信心，或是不知道自己的人生有什么意义，那么请你静下心来读一读这本书。</p><h2 id="语录摘抄"><a href="#语录摘抄" class="headerlink" title="语录摘抄"></a>语录摘抄</h2><h3 id="Power"><a href="#Power" class="headerlink" title="Power"></a>Power</h3><p>​      🔺 人生三大课题：工作课题、交友课题、爱的课题。人生课题中最难的是爱的课题。阿德勒说：当人能够感觉到“与这个人在一起可以无拘无束”的时候，才能够体会到爱。既没有自卑感也不必炫耀优越性，能够保持一种平静而自然的状态。真正的爱是这样的。</p><p>​      🔺 你现在无法体会到幸福，因为你不会爱你自己。而且，为了能够爱自己，你希望“变成别人”。你之所以想要变成别人，就是因为你只一味关注着“被给予了什么”。其实，你应该把注意力放在“如何利用被给予的东西”上。</p><p>​      🔺 你为什么讨厌自己呢？为什么只盯着缺点就是不肯去喜欢自己呢？那是因为你太害怕被他人讨厌、害怕在人际关系中受伤。</p><p>​     🔺  人只有在能够感觉到“我对别人有用”的时候才能体会到自己的价值。但是，这种贡献也可以通过看不见的形式实现。只要有“对别人有用”的主观感觉，即“贡献感”就可以，幸福就是“贡献感”。</p><p>​    🔺  真诚地接受不能交换的“这个我”，这就是自我接纳。对他人寄予无条件的信赖即他者信赖。既能接纳自己又能信赖他人，对你来说他人就是伙伴的存在，那你也就能够在所属共同体中找到自己的位置，继而也就能够获得“可以在这里”的归属感。</p><p>​    🔺  当期待发生矛盾，我们注定满足不了所有人。</p><p>​    🔺  起点是“课题分离”，终点是“共同体感觉”，共同体感觉就是把他人看成朋友，并且在其中能够感受到有自己的位置。</p><p>​    🔺   对人而言，最大的不幸就是不喜欢自己。</p><h2 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h2><h3 id="Thought"><a href="#Thought" class="headerlink" title="Thought"></a>Thought</h3><p>​      🔺  把他人的期待换成对自己的接纳。</p><p>​      🔺  你要拥有甘于平凡的勇气。</p><p>​      🔺  你要放下“被认同”的需求。</p><p>​      🔺   活出自己的核心渴望。</p><p>​      🔺   早日拥有“被讨厌的勇气”。</p><p>​      🔺   少说“如果…就好了”，因为这就像是借口，你觉得它对于自己来说很困难，这就会变成自己不去行动的理由。</p><p>​      🔺   决定人生的是当下的自己。</p>]]></content>
    
    
    <categories>
      
      <category>Reading</category>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Reading</tag>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo + Github 博客搭建</title>
    <link href="/2020/04/21/hello-world/"/>
    <url>/2020/04/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>2020/4/21,我记录了博客搭建的全过程。就以今天开始，多尝试，找到自己擅长的领域，高效学习，发现自己身上隐藏的能量，有所爱，有所期待。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="为什么要搭建自己的博客"><a href="#为什么要搭建自己的博客" class="headerlink" title="为什么要搭建自己的博客"></a>为什么要搭建自己的博客</h3><p>​      🔺 自己的博客就是自己的标签</p><p>​      🔺 自己的博文就是自己的思想成果</p><p>​      🔺 利用自己的博客打造自己的网上名片</p><p>​      🔺  独立的博客网站是记录人生的工具</p><p>​      🔺  博客是专属于自己写作、记录、呈现的一片耕地</p><p>​      🔺  自行建站一切都可以自己定制</p><p>​      🔺   自行建站可以寻找志同道合的朋友做友链</p><p>More info: <a href="http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/" target="_blank" rel="noopener">刘未鹏 | Mind Hacks</a></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>​      🔺 安装 Node.js: <a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p><p>​      🔺 安装 Git: <a href="https://github.com/waylau/git-for-win" target="_blank" rel="noopener">https://github.com/waylau/git-for-win</a></p><p>​      🔺 注册 <code>Github</code>账号: <a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></p><h3 id="Github-配置"><a href="#Github-配置" class="headerlink" title="Github 配置"></a>Github 配置</h3><p>​     🔺 登录<code>Github</code> 账号: <a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></p><p>​        🔺 创建仓库，点击右上角的<code>Create a new repository</code>:<a href="https://github.com/new" target="_blank" rel="noopener">https://github.com/new</a></p><p>​            🔸 新建一个名为<code>你的用户名.github.io</code>的仓库，比如说，如果我的github用户名是oyeah-hua，那么你就新建oyeah-hua.github.io`的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 <a href="http://oyeah-hua.github.io了" target="_blank" rel="noopener">http://oyeah-hua.github.io了</a></p><p>​           🔸 仓库创建完成后，开始生成添加秘钥 SSH Key</p><p>​                在终端 (Windows:cmd) 下输入：</p><pre><code class="hljs bash">$ ssh-keygen -t rsa -C <span class="hljs-string">"Github的注册邮箱地址"</span></code></pre><p>​              一直Enter下来就可以，待秘钥生成完毕，会得到两   个文件<code>id_rsa</code>和<code>id_rsa.pub</code>，用文本编辑器打开<code>id_rsa.pub</code>，<code>Ctrl + A</code>复制里面的所有内容，然后进入<br><a href="https://github.com/settings/ssh" target="_blank" rel="noopener">https://github.com/settings/ssh</a> 把复制内容添加在这里</p><p>​        🔺 测试是否添加成功。在命令行（即Git Bash）依次输入以下命令</p><pre><code class="hljs bash">$ ssh -T git@github.com</code></pre><p>如果出现提示<code>Are you sure you want to continue connecting (yes/no)?</code>，输入yes，然后会看到返回<code>You&#39;ve successfully authenticated</code>即成功。</p><h2 id="hexo简介"><a href="#hexo简介" class="headerlink" title="hexo简介"></a>hexo简介</h2><h3 id="hexo是什么"><a href="#hexo是什么" class="headerlink" title="hexo是什么"></a>hexo是什么</h3><p>​      🔺 Hexo是一个简单、快速、强大的基于 Github Pages     的博客框架，支持Markdown格式，有众多优秀插件和主题。</p><p>​      🔺 github: <a href="https://link.jianshu.com/?t=https://github.com/hexojs/hexo" target="_blank" rel="noopener">https://github.com/hexojs/hexo</a></p><p>​      🔺  Hexo中文官网： <a href="https://link.jianshu.com/?t=https://hexo.io/zh-cn/" target="_blank" rel="noopener">https://hexo.io/zh-cn/</a></p><p>​      🔺 Hexo官方使用文档：<a href="https://link.jianshu.com/?t=https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a></p><h3 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo安装</h3><p>​     🔺 hexo 安装</p><p>​    在git bush输入以下命令：</p><pre><code class="hljs bash">$ npm install -g hexo</code></pre><p>​     🔺  hexo 初始化</p><p>​     在电脑的某个盘新建一个名为<code>hexo</code>的文件夹（名字可以随便取），比如我的是<code>D:\Workspaces\hexo</code>，由于这个文件夹将来就作为你存放代码的地方，请你最好不要随便放。</p><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> /d/Workspaces/hexo/$ hexo init</code></pre><p>   hexo会自动下载一些文件到这个目录，包括node_modules，目录结构如下图：</p><pre><code class="hljs plain">.├── _config.yml├── package.json├── scaffolds├── source|   ├── _drafts|   └── _posts└── themes·</code></pre><p>  🔺  hexo 命令</p><pre><code class="hljs bash">$ hexo generate<span class="hljs-comment"># 启动本地服务器</span>$ hexo server<span class="hljs-comment"># 在浏览器输入 http://localhost:4000/就可以看见网页和模板了</span>INFO  Start processingINFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</code></pre><p>🔺 直接使用<code>hexo deploy</code>部署到 Github，将出现如下错误：</p><pre><code class="hljs bash">ERROR Deployer not found:git</code></pre><p>​      🔔  这时候要使用下面的命令安装对应的插件</p><pre><code class="hljs bash">$ npm install hexo-deployer-git --save</code></pre><p>​      🔔   安装完成即可部署到Github</p><h2 id="配置博客"><a href="#配置博客" class="headerlink" title="配置博客"></a>配置博客</h2><h3 id="配置站点"><a href="#配置站点" class="headerlink" title="配置站点"></a>配置站点</h3><p>​         🔺 打开根目录下<strong>站点配置文件</strong><code>_config.yml</code>（比如我的是<code>D:\Workspaces\hexo\_config.yml</code>），配置有关deploy的部分：</p><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/oyeah/oyeah.github.io</span>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span></code></pre><p>​      🔔  修改的时候一定要注意<code>:</code>后面一定要有一个空格，否则会报错</p><p>​      🔔   <strong>repo</strong> 为<code>你的用户名.github.io</code>的仓库地址</p><h3 id="修改网站相关信息"><a href="#修改网站相关信息" class="headerlink" title="修改网站相关信息"></a>修改网站相关信息</h3><p>​    🔺 打开根目录下<strong>站点配置文件</strong><code>_config.yml</code>（比如我的是<code>D:\Workspaces\hexo\_config.yml</code>），修改网站信息</p><p>​      🔔  修改的时候一定要注意<code>:</code>后面一定要有一个空格，否则会报错</p><pre><code class="hljs yml"><span class="hljs-attr">title:</span> <span class="hljs-string">标题</span><span class="hljs-attr">subtitle:</span> <span class="hljs-string">副标题</span><span class="hljs-attr">description:</span> <span class="hljs-string">网页描述</span><span class="hljs-attr">author:</span> <span class="hljs-string">作者</span><span class="hljs-attr">language:</span> <span class="hljs-string">语言</span></code></pre><p>​    </p><h2 id="主题修改"><a href="#主题修改" class="headerlink" title="主题修改"></a>主题修改</h2><h3 id="选择合适的主题"><a href="#选择合适的主题" class="headerlink" title="选择合适的主题"></a>选择合适的主题</h3><p>​         🔺 官方主题：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a></p><h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><p>​         🔺  点击合适的主题，将Github clone 地址复制</p><p>​         🔺   在终端输入</p><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> `对应主题的Github地址`</code></pre><h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>​         🔺 打开根目录下<strong>站点配置文件</strong><code>_config.yml</code>， 找到 theme 字段，并将其值更改为 next</p><pre><code class="hljs yml"><span class="hljs-comment"># Schemes</span><span class="hljs-attr">scheme:</span> <span class="hljs-string">`你要修改的主题名称`</span></code></pre><h3 id="验证主题"><a href="#验证主题" class="headerlink" title="验证主题"></a>验证主题</h3><p>​         🔺 在终端清除缓存</p><pre><code class="hljs bash">$ hexo clean</code></pre><p>​        🔺  在终端重新生成</p><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html" target="_blank" rel="noopener">小茗同学 | 网站建设 </a></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
      <category>Github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
