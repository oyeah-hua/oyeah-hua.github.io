<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vue 笔记整理17</title>
    <link href="/2020/05/16/vue17/"/>
    <url>/2020/05/16/vue17/</url>
    
    <content type="html"><![CDATA[<h1 id="（十七）模块化开发"><a href="#（十七）模块化开发" class="headerlink" title="（十七）模块化开发"></a>（十七）模块化开发</h1><h2 id="为什么需要模块化"><a href="#为什么需要模块化" class="headerlink" title="为什么需要模块化"></a>为什么需要模块化</h2><p>在网页开发的早期，js制作作为一种脚本语言，做一些简单的表单验证或动画实现等，那个时候代码还是很少的。那个时候的代码是怎么写的呢？直接将代码写在``标签中即可。 随着ajax异步请求的出现，慢慢形成了前后端的分离。</p><ul><li>客户端需要完成的事情越来越多，代码量也是与日俱增。</li><li>为了应对代码量的剧增，我们通常会将代码组织在多个js文件中，进行维护。</li></ul><p>但是这种维护方式，依然不能避免一些灾难性的问题。比如全局变量同名问题：看下边的例子。例如现在小明和小张共同开发一个项目，小明定义一个<code>aaa.js</code>，小张定义了一个<code>bbb.js</code>。</p><h3 id="aaa-js"><a href="#aaa-js" class="headerlink" title="aaa.js"></a>aaa.js</h3><pre><code class="hljs javascript"><span class="hljs-comment">//小明开发</span><span class="hljs-keyword">var</span> name = <span class="hljs-string">'小明'</span><span class="hljs-keyword">var</span> age = <span class="hljs-number">22</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">num1, num2</span>) </span>&#123;  <span class="hljs-keyword">return</span> num1 + num2&#125;<span class="hljs-keyword">var</span> flag = <span class="hljs-literal">true</span><span class="hljs-keyword">if</span> (flag) &#123;  <span class="hljs-built_in">console</span>.log(sum(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>));&#125;</code></pre><p>此时小明的<code>sum</code>是没有问题的。</p><h3 id="bbb-js"><a href="#bbb-js" class="headerlink" title="bbb.js"></a>bbb.js</h3><pre><code class="hljs javascript"><span class="hljs-comment">//小红</span><span class="hljs-keyword">var</span> name = <span class="hljs-string">"小红"</span><span class="hljs-keyword">var</span> flag = <span class="hljs-literal">false</span></code></pre><p>此时小明和小红各自用各自的<code>flag</code>,变量没问题。</p><h3 id="但是此时小明又创建了一个mmm-js"><a href="#但是此时小明又创建了一个mmm-js" class="headerlink" title="但是此时小明又创建了一个mmm.js"></a>但是此时小明又创建了一个<code>mmm.js</code></h3><pre><code class="hljs javascript"><span class="hljs-comment">//小明</span><span class="hljs-keyword">if</span>(flag)&#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"flag是true"</span>)&#125;</code></pre><h3 id="在index-html页面导入这些js文件"><a href="#在index-html页面导入这些js文件" class="headerlink" title="在index.html页面导入这些js文件"></a>在<code>index.html</code>页面导入这些js文件</h3><pre><code class="hljs javascript">&lt;script src=<span class="hljs-string">"aaa.js"</span> &gt;&lt;<span class="hljs-regexp">/script&gt;</span><span class="hljs-regexp">&lt;script src="bbb.js" &gt;&lt;/</span>script&gt;&lt;script src=<span class="hljs-string">"ccc.js"</span> &gt;&lt;<span class="hljs-regexp">/script&gt;</span></code></pre><p>此时小明知道自己在<code>aaa.js</code>中定义的<code>flag</code>是<code>true</code>，认为打印没有问题，但是不知道小红的<code>bbb.js</code>中也定义了<code>flag</code>为<code>true</code>，所以<code>mmm.js</code>文件并没有打印出“flag是true”。这就是全局变量同名问题。</p><p>另外，这种代码的编写方式对js文件的依赖顺序几乎是强制性的。但是当js文件过多，比如有几十个的时候，弄清楚它们的顺序是一件比较同时的事情。而且即使你弄清楚顺序了，也不能避免上面出现的这种尴尬问题的发生。</p><h2 id="使用导出全局变量模块解决全局变量同名问题"><a href="#使用导出全局变量模块解决全局变量同名问题" class="headerlink" title="使用导出全局变量模块解决全局变量同名问题"></a>使用导出全局变量模块解决全局变量同名问题</h2><h3 id="aaa-js-1"><a href="#aaa-js-1" class="headerlink" title="aaa.js"></a>aaa.js</h3><pre><code class="hljs javascript"><span class="hljs-comment">//模块对象</span><span class="hljs-keyword">var</span> moduleA = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">param</span>) </span>&#123; <span class="hljs-comment">//导出对象</span> <span class="hljs-keyword">var</span> obj = &#123;&#125; <span class="hljs-keyword">var</span> name = <span class="hljs-string">'小明'</span> <span class="hljs-keyword">var</span> age = <span class="hljs-number">22</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">num1, num2</span>) </span>&#123;  <span class="hljs-keyword">return</span> num1 + num2 &#125; <span class="hljs-keyword">var</span> flag = <span class="hljs-literal">true</span> <span class="hljs-keyword">if</span> (flag) &#123;  <span class="hljs-built_in">console</span>.log(sum(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>)) &#125; obj.flag=<span class="hljs-literal">false</span> <span class="hljs-keyword">return</span> obj&#125;)()</code></pre><h3 id="mmm-js"><a href="#mmm-js" class="headerlink" title="mmm.js"></a>mmm.js</h3><pre><code class="hljs javascript"><span class="hljs-comment">//小明</span><span class="hljs-comment">//使用全局变量moduleA</span><span class="hljs-keyword">if</span>(moduleA.flag)&#123; <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"flag是true"</span>)&#125;</code></pre><p>这样直接使用<code>aaa.js</code>导出的<code>moduleA</code>变量获取小明自己定义的<code>flag</code>。</p><h2 id="CommonJS的模块化实现"><a href="#CommonJS的模块化实现" class="headerlink" title="CommonJS的模块化实现"></a>CommonJS的模块化实现</h2><p>CommonJS需要nodeJS的依支持。</p><h3 id="aaa-js-2"><a href="#aaa-js-2" class="headerlink" title="aaa.js"></a>aaa.js</h3><pre><code class="hljs javascript"><span class="hljs-comment">//CommonJS需要nodeJS支持</span><span class="hljs-keyword">var</span> name = <span class="hljs-string">'小明'</span><span class="hljs-keyword">var</span> age = <span class="hljs-number">22</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">num1, num2</span>) </span>&#123; <span class="hljs-keyword">return</span> num1 + num2&#125;<span class="hljs-keyword">var</span> flag = <span class="hljs-literal">true</span><span class="hljs-keyword">if</span> (flag) &#123; <span class="hljs-built_in">console</span>.log(sum(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>))&#125;<span class="hljs-comment">// module.exports = &#123;</span><span class="hljs-comment">//  flag : flag,</span><span class="hljs-comment">//  sum : sum</span><span class="hljs-comment">// &#125;</span><span class="hljs-comment">//导出对象</span><span class="hljs-built_in">module</span>.exports = &#123; flag, sum&#125;</code></pre><p>使用<code>module.exports = {}</code>导出需要的对象。</p><h3 id="mmm-js-1"><a href="#mmm-js-1" class="headerlink" title="mmm.js"></a>mmm.js</h3><pre><code class="hljs javascript"><span class="hljs-comment">//导入对象,nodejs语法,需要node支持,从aaa.js取出对象</span><span class="hljs-keyword">var</span> &#123;flag,sum&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">"./aaa"</span>)<span class="hljs-built_in">console</span>.log(sum(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>));<span class="hljs-keyword">if</span>(flag)&#123; <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"flag is true"</span>);&#125;</code></pre><p>使用 <code>var {flag,sum} = require(&quot;./aaa&quot;)</code>获取已经导出的对象中自己所需要的对象。</p><h2 id="ES6的模块化实现"><a href="#ES6的模块化实现" class="headerlink" title="ES6的模块化实现"></a>ES6的模块化实现</h2><h3 id="如何实现模块化"><a href="#如何实现模块化" class="headerlink" title="如何实现模块化?"></a>如何实现模块化?</h3><p>在html中需要使用<code>type=&#39;module&#39;</code>属性。</p><pre><code class="hljs php+HTML">&lt;script src&#x3D;&quot;aaa.js&quot; type&#x3D;&quot;module&quot;&gt;&lt;&#x2F;script&gt;&lt;script src&#x3D;&quot;bbb.js&quot; type&#x3D;&quot;module&quot;&gt;&lt;&#x2F;script&gt;&lt;script src&#x3D;&quot;mmm.js&quot; type&#x3D;&quot;module&quot;&gt;&lt;&#x2F;script&gt;</code></pre><p>此时表示<code>aaa.js</code>是一个单独的模块，此模块是有作用域的。如果要使用<code>aaa.js</code>内的变量，需要在<code>aaa.js</code>中先导出变量，再在需要使用的地方导出变量。</p><h3 id="直接导出"><a href="#直接导出" class="headerlink" title="直接导出"></a>直接导出</h3><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> name = <span class="hljs-string">'小明'</span></code></pre><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><pre><code class="hljs plain">import &#123;name&#125; from &#39;.&#x2F;aaa.js&#39;console.log(name)</code></pre><p><code>./aaa.js</code>表示aaa.js和mmm.js在同级目录。</p><p><img src="https://imgkr.cn-bj.ufileos.com/0fb2d34c-9081-4f6d-8aad-21267844259b.png" srcset="/img/loading.gif" alt="img"></p><h3 id="统一导出"><a href="#统一导出" class="headerlink" title="统一导出"></a>统一导出</h3><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> age = <span class="hljs-number">22</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">num1, num2</span>) </span>&#123; <span class="hljs-keyword">return</span> num1 + num2&#125;<span class="hljs-keyword">var</span> flag = <span class="hljs-literal">true</span><span class="hljs-keyword">if</span> (flag) &#123; <span class="hljs-built_in">console</span>.log(sum(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>))&#125;<span class="hljs-comment">//2.最后统一导出</span><span class="hljs-keyword">export</span> &#123; flag,sum,age&#125;</code></pre><h4 id="使用import-name-flag-sum-from-39-aaa-js-39-导入多个变量"><a href="#使用import-name-flag-sum-from-39-aaa-js-39-导入多个变量" class="headerlink" title="使用import {name,flag,sum} from &#39;./aaa.js&#39;导入多个变量"></a>使用<code>import {name,flag,sum} from &#39;./aaa.js&#39;</code>导入多个变量</h4><pre><code class="hljs plain">import &#123;name,flag,sum&#125; from &#39;.&#x2F;aaa.js&#39;console.log(name)if(flag)&#123; console.log(&quot;小明是天才&quot;);&#125;console.log(sum(20,30));</code></pre><h4 id="使用-将需要的变量放置进去"><a href="#使用-将需要的变量放置进去" class="headerlink" title="使用{}将需要的变量放置进去"></a>使用<code>{}</code>将需要的变量放置进去</h4><p><img src="https://imgkr.cn-bj.ufileos.com/79548df7-d06b-41cd-84a3-cd34e3ab94f4.png" srcset="/img/loading.gif" alt="img"></p><h3 id="导出函数-类"><a href="#导出函数-类" class="headerlink" title="导出函数/类"></a>导出函数/类</h3><h4 id="在aaa-js中添加"><a href="#在aaa-js中添加" class="headerlink" title="在aaa.js中添加"></a>在aaa.js中添加</h4><pre><code class="hljs javascript">/<span class="hljs-number">3.</span>导出函数/类<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">say</span>(<span class="hljs-params">value</span>) </span>&#123; <span class="hljs-built_in">console</span>.log(value);&#125;<span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123; run()&#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"奔跑"</span>); &#125;&#125;</code></pre><h4 id="在mmm-js中添加"><a href="#在mmm-js中添加" class="headerlink" title="在mmm.js中添加"></a>在mmm.js中添加</h4><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;name,flag,sum,say,Person&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'./aaa.js'</span><span class="hljs-built_in">console</span>.log(name)<span class="hljs-keyword">if</span>(flag)&#123; <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"小明是天才"</span>);&#125;<span class="hljs-built_in">console</span>.log(sum(<span class="hljs-number">20</span>,<span class="hljs-number">30</span>));say(<span class="hljs-string">'hello'</span>)<span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> Person();p.run();</code></pre><h4 id="如图"><a href="#如图" class="headerlink" title="如图"></a>如图</h4><p><img src="https://imgkr.cn-bj.ufileos.com/4743ab18-d2b1-47d3-ad92-cb1d3dd0af61.png" srcset="/img/loading.gif" alt="img"></p><h3 id="默认导入-export-default"><a href="#默认导入-export-default" class="headerlink" title="默认导入 export default"></a>默认导入 export default</h3><h4 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h4><pre><code class="hljs plain">export default &#123; flag,sum,age&#125;</code></pre><h4 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h4><pre><code class="hljs javascript"><span class="hljs-comment">//4.默认导入 export default</span><span class="hljs-keyword">import</span> aaa <span class="hljs-keyword">from</span> <span class="hljs-string">'./aaa.js'</span><span class="hljs-built_in">console</span>.log(aaa.sum(<span class="hljs-number">10</span>,<span class="hljs-number">110</span>));</code></pre><p>注意：使用默认导出会将所有需要导出的变量打包成一个对象，此时导出一个对象，此时我在<code>mmm.js</code>中导入变量时候命名为<code>aaa</code>，如果要调用变量需要使用<code>aaa.变量</code>。</p><h3 id="统一全部导入"><a href="#统一全部导入" class="headerlink" title="统一全部导入"></a>统一全部导入</h3><h4 id="使用import-as-aaa-from-39-aaa-js-39-统一全部导入"><a href="#使用import-as-aaa-from-39-aaa-js-39-统一全部导入" class="headerlink" title="使用import * as aaa from &#39;./aaa.js&#39;统一全部导入"></a>使用<code>import * as aaa from &#39;./aaa.js&#39;</code>统一全部导入</h4><pre><code class="hljs javascript"><span class="hljs-comment">// 5.统一全部导入</span><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> aaa <span class="hljs-keyword">from</span> <span class="hljs-string">'./aaa.js'</span><span class="hljs-built_in">console</span>.log(aaa.flag);<span class="hljs-built_in">console</span>.log(aaa.name);</code></pre>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue 笔记整理16</title>
    <link href="/2020/05/15/vue16/"/>
    <url>/2020/05/15/vue16/</url>
    
    <content type="html"><![CDATA[<h1 id="（十六）Vue实例的生命周期"><a href="#（十六）Vue实例的生命周期" class="headerlink" title="（十六）Vue实例的生命周期"></a>（十六）Vue实例的生命周期</h1><p>🔺 <code>Vue</code>实例的生命周期中有多个状态。</p><p>如图为生命周期示意图：</p><p><img style="width: 1000px;border-radius:5px;box-shadow:0px 0px 10px  #58585d" src="https://imgkr.cn-bj.ufileos.com/9b87ce46-ebc8-4c64-86bb-8ff1c87ffd12.png" srcset="/img/loading.gif"></p><p>下面为使用案例：</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue实例的生命周期<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 引入vue.js --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>  <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>测试生命周期<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>测试beforeUpdate和update两个钩子函数<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"handlerUpdate"</span>&gt;</span>更新数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">            el:<span class="hljs-string">"#app"</span>,</span>            data:&#123;<span class="actionscript">                msg:<span class="hljs-string">"12345"</span></span>            &#125;,            methods: &#123;<span class="actionscript">                handlerUpdate:<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;</span><span class="actionscript">                    <span class="hljs-keyword">this</span>.msg=<span class="hljs-keyword">this</span>.msg.split(<span class="hljs-string">""</span>).reverse().join(<span class="hljs-string">""</span>);</span>                &#125;,<span class="actionscript">            &#125;,<span class="hljs-comment">//按照示意图依次调用</span></span><span class="actionscript">            beforeCreate:<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;</span><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"调用了beforeCreate钩子函数"</span>);</span>            &#125;,<span class="actionscript">            created:<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;</span><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"调用了created钩子函数"</span>);</span>            &#125;,<span class="actionscript">            beforeMount: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;</span><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'调用了beforeMount钩子函数'</span>)</span>            &#125;,<span class="actionscript">            mounted: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;</span><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'调用了mounted钩子函数'</span>)</span>            &#125;,<span class="actionscript">            beforeUpdate: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;</span><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"调用了beforeUpdate钩子函数"</span>)</span>            &#125;,<span class="actionscript">            updated: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;</span><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"调用了updated钩子函数"</span>);</span>            &#125;,<span class="actionscript">            beforeDestroy: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;</span><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"调用了beforeDestroy钩子函数"</span>)</span>            &#125;,<span class="actionscript">            destroyed: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;</span><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"调用了destroyed钩子函数"</span>);</span>            &#125;,        &#125;);    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>如图所示：</p><p><img style="width: 1000px;border-radius:5px;box-shadow:0px 0px 10px  #58585d" src="https://imgkr.cn-bj.ufileos.com/afbbcb97-e9e5-496d-a5b5-38aa278e9365.png" srcset="/img/loading.gif"></p><p>初始化页面依次调用了：</p><ol><li><p>调用了<code>beforeCreate</code>钩子函数</p></li><li><p>调用了<code>created</code>钩子函数</p></li><li><p>调用了<code>beforeMount</code>钩子函数</p></li><li><p>调用了<code>mounted</code>钩子函数</p></li></ol><p>点击更新数据后：<code>12345</code>变成了<code>54321</code>，此时调用了：</p><ol><li><p>调用了<code>beforeUpdate</code>钩子函数</p></li><li><p>调用了<code>updated</code>钩子函数</p></li></ol><p>打开<code>F12</code>控制台</p><p>直接输入<code>app.$destroy()</code>主动销毁<code>Vue</code>实例调用：</p><ol><li><p>调用了<code>beforeDestroy</code>钩子函数</p></li><li><p>调用了<code>destroyed</code>钩子函数</p></li></ol><p>🔺 <code>beforeCreate</code>之前</p><p>初始化钩子函数和生命周期</p><p> 🔺 <code>beforeCreate</code>和<code>created</code>钩子函数间的生命周期</p><p>在<code>beforeCreate</code>和<code>created</code>之间，进行数据观测<code>(data observer)</code>，也就是在这个时候开始监控<code>data</code>中的数据变化了，同时初始化事件。</p><p>  🔺 <code>created</code>钩子函数和<code>beforeMount</code>间的生命周期</p><p>对于<code>created</code>钩子函数和<code>beforeMount</code>有判断：</p><p><img style="width: 1000px;border-radius:5px;box-shadow:0px 0px 10px  #58585d" src="https://imgkr.cn-bj.ufileos.com/2ced2b8f-fda0-4023-bbe1-5d0cc24991d6.png" srcset="/img/loading.gif"></p><p> 🔺 <code>el</code>选项对生命周期影响</p><ol><li>有<code>el</code>选项</li></ol><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> Vue(&#123;        el: <span class="hljs-string">'#app'</span>,        beforeCreate: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'调用了beforeCreat钩子函数'</span>)        &#125;,        created: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'调用了created钩子函数'</span>)        &#125;,        beforeMount: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'调用了beforeMount钩子函数'</span>)        &#125;,        mounted: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'调用了mounted钩子函数'</span>)        &#125;    &#125;)</code></pre><p>结果如图所示：</p><p><img style="width: 1000px;border-radius:5px;box-shadow:0px 0px 10px  #58585d" src="https://imgkr.cn-bj.ufileos.com/4092c8b8-c2aa-4650-ad48-86232dc9320a.png" srcset="/img/loading.gif"></p><ol><li>无<code>el</code>选项</li></ol><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> Vue(&#123;        beforeCreate: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'调用了beforeCreat钩子函数'</span>)        &#125;,        created: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'调用了created钩子函数'</span>)        &#125;,        beforeMount: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'调用了beforeMount钩子函数'</span>)        &#125;,        mounted: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'调用了mounted钩子函数'</span>)        &#125;    &#125;)</code></pre><p>结果如图所示：</p><p><img style="width: 1000px;border-radius:5px;box-shadow:0px 0px 10px  #58585d" src="https://imgkr.cn-bj.ufileos.com/b86b1ea1-8cc8-4043-871e-8759904abd1f.png" srcset="/img/loading.gif"></p><p>证明没有<code>el</code>选项，则停止编译，也意味着暂时停止了生命周期。生命周期到<code>created</code>钩子函数就结束了。而当我们不加<code>el</code>选项，但是手动执行<code>vm.$mount(el)</code>方法的话，也能够使暂停的生命周期进行下去，例如：</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;        beforeCreate: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'调用了beforeCreat钩子函数'</span>)        &#125;,        created: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'调用了created钩子函数'</span>)        &#125;,        beforeMount: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'调用了beforeMount钩子函数'</span>)        &#125;,        mounted: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'调用了mounted钩子函数'</span>)        &#125;    &#125;)    app.$mount(<span class="hljs-string">'#app'</span>)</code></pre><p>🔺 <code>template</code></p><p>同时使用<code>template</code>和<code>HTML</code>，查看优先级：</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>测试template和HTML的优先级<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>HTML优先<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">            <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">                el:<span class="hljs-string">"#app"</span>,</span>                data:&#123;<span class="actionscript">                    msg:<span class="hljs-string">"template优先"</span></span>                &#125;,<span class="handlebars"><span class="xml">                template:"<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;msg&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>",</span></span>            &#125;);        <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>结果如图所示：</p><p><img style="width: 1000px;border-radius:5px;box-shadow:0px 0px 10px  #58585d" src="https://imgkr.cn-bj.ufileos.com/e365b880-b276-43a1-ae7f-85db0f140d74.png" srcset="/img/loading.gif"></p><p>👩结论👩: </p><ol><li><p>如果<code>Vue</code>实例对象中有<code>template</code>参数选项，则将其作为模板编译成<code>render</code>函数</p></li><li><p>如果没有<code>template</code>参数选项，则将外部的<code>HTML</code>作为模板编译<code>（template）</code>，也就是说，<code>template</code>参数选项的优先级要比外部的<code>HTML</code>高</p></li><li><p>如果1,2条件都不具备，则报错</p></li></ol><p>👩注意👩: </p><ol><li><p><code>Vue</code>需要通过<code>el</code>去找对应的<code>template</code>，<code>Vue</code>实例通过<code>el</code>的参数，首先找自己有没有<code>template</code>，如果没有再去找外部的<code>html</code>，找到后将其编译成render函数。</p></li><li><p>也可以直接调用<a href="https://cn.vuejs.org/v2/api/#render" target="_blank" rel="noopener">render</a>选项，优先级：<code>render函数选项 &gt; template参数 &gt; 外部HTML</code>。</p></li></ol><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> Vue(&#123;    el: <span class="hljs-string">'#app'</span>,    render (createElement) &#123;        <span class="hljs-keyword">return</span> (....)    &#125;&#125;)</code></pre><p>🔺  <code>beforeMount</code>和<code>mounted</code>钩子函数间的生命周期</p><p><code>beforeMount</code></p><p>载入前（完成了<code>data</code>和<code>el</code>数据初始化），但是页面中的内容还是<code>Vue</code>中的占位符，<code>data</code>中的<code>message</code>信息没有被挂在到Dom节点中，在这里可以在渲染前最后一次更改数据的机会，不会触发其他的钩子函数，一般可以在这里做初始数据的获取。</p><p><code>Mount</code></p><p>载入后<code>html</code>已经渲染(<code>ajax</code>请求可以放在这个函数中)，把<code>vue</code>实例中的<code>data</code>里的<code>message</code>挂载到DOM节点中去</p><p>这里两个钩子函数间是载入数据。</p><p>🔺<code>beforeUpdate</code>钩子函数和<code>updated</code>钩子函数间的生命周期</p><p><img style="width: 1000px;border-radius:5px;box-shadow:0px 0px 10px  #58585d" src="https://imgkr.cn-bj.ufileos.com/b2c19916-8922-45c0-8164-900914506fcf.png" srcset="/img/loading.gif"></p><p>在<code>Vue</code>中，修改数据会导致重新渲染，依次调用<code>beforeUpdate</code>钩子函数和<code>updated</code>钩子函数.</p><p>如果待修改的数据没有载入模板中，不会调用这里两个钩子函数：</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;        el: <span class="hljs-string">'#app'</span>,        data: &#123;            msg: <span class="hljs-number">1</span>        &#125;,        template: <span class="hljs-string">'&lt;div id="app"&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;'</span>,        beforeUpdate: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'调用了beforeUpdate钩子函数'</span>)        &#125;,        updated: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'调用了updated钩子函数'</span>)        &#125;    &#125;)    app.msg = <span class="hljs-number">2</span></code></pre><p>结果如图所示：</p><p><img style="width: 1000px;border-radius:5px;box-shadow:0px 0px 10px  #58585d" src="https://imgkr.cn-bj.ufileos.com/b2a7bc6e-10cf-4a34-8487-9a071325c2f8.png" srcset="/img/loading.gif"></p><p>如果绑定了数据，会调用两个钩子函数：</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>测试有数据绑定修改数据，钩子函数调用情况<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">        el:<span class="hljs-string">"#app"</span>,</span><span class="handlebars"><span class="xml">        template:"<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;msg&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>",</span></span>        data:&#123;<span class="actionscript">            msg:<span class="hljs-string">"原数据"</span></span>        &#125;,<span class="actionscript">        beforeUpdate: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;</span><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"调用了beforeUpdate钩子函数"</span>)</span>        &#125;,<span class="actionscript">        updated: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;</span><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"调用了updated钩子函数"</span>);</span>        &#125;,    &#125;);<span class="actionscript">    app.msg = <span class="hljs-string">"数据被修改了"</span>;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>结果如图所示：</p><p><img style="width: 1000px;border-radius:5px;box-shadow:0px 0px 10px  #58585d" src="https://imgkr.cn-bj.ufileos.com/512570da-c0c9-45dd-bc12-5c33078e2107.png" srcset="/img/loading.gif"></p><p>👩注意👩:  只有写入模板的数据才会被追踪</p><p>🔺 <code>beforeDestroy</code>和<code>destroyed</code>钩子函数间的生命周期</p><p><img style="width: 1000px;border-radius:5px;box-shadow:0px 0px 10px  #58585d" src="https://imgkr.cn-bj.ufileos.com/5a1572c3-1c09-4f20-8878-3f4a8fa5ee78.png" srcset="/img/loading.gif"></p><p>🔺  <code>beforeDestroy</code></p><p>销毁前执行（<code>$destroy</code>方法被调用的时候就会执行）,一般在这里善后:清除计时器、清除非指令绑定的事件等等…’)</p><p>🔺  <code>destroyed</code></p><p>销毁后 （Dom元素存在，只是不再受<code>Vue</code>控制）,卸载<code>watcher</code>，事件监听，子组件</p><p>👩总结👩: </p><ul><li><p><code>beforecreate</code> : 可以在这加个<code>loading</code>事件</p></li><li><p><code>created</code>：在这结束<code>loading</code>，还做一些初始数据的获取，实现函数自-执行</p></li><li><p><code>mounted</code>： 在这发起后端请求，拿回数据，配合路由钩子做一些事情</p></li><li><p><code>beforeDestroy</code>： 你确认删除XX吗？</p></li><li><p><code>destroyed</code>：当前组件已被删除，清空相关内容</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue15</title>
    <link href="/2020/05/10/vue15/"/>
    <url>/2020/05/10/vue15/</url>
    
    <content type="html"><![CDATA[<h1 id="（十五）插槽使用"><a href="#（十五）插槽使用" class="headerlink" title="（十五）插槽使用"></a>（十五）插槽使用</h1><p>🔺 <code>slot</code>翻译为插槽</p><p> 在生活中很多地方都有插槽，电脑的<code>USB</code>插槽，插板当中的电源插槽。插槽的目的是让我们原来的设备具备更多的扩展性。比如电脑的<code>USB</code>我们可以插入U盘、硬盘、手机、音响、键盘、鼠标等等。</p><p>🔺 组件的插槽</p><p> 组件的插槽也是为了让我们封装的组件更加具有扩展性。让使用者可以决定组件内部的一些内容到底展示什么。例子：移动网站中的导航栏。移动开发中，几乎每个页面都有导航栏。导航栏我们必然会封装成一个插件，比如<code>nav-bar</code>组件。一旦有了这个组件，我们就可以在多个页面中复用了。但是，每个页面的导航是一样的吗？No.</p><p>🔺 如何去封装这类的组件呢？</p><p>它们也很多区别，但是也有很多共性。如果，我们每一个单独去封装一个组件，显然不合适：比如每个页面都返回，这部分内容我们就要重复去封装。但是，如果我们封装成一个，好像也不合理：有些左侧是菜单，有些是返回，有些中间是搜索，有些是文字，等等。</p><p>🔺 如何封装合适呢？</p><p>抽取共性，保留不同。最好的封装方式就是将共性抽取到组件中，将不同暴露为插槽。一旦我们预留了插槽，就可以让使用者根据自己的需求，决定插槽中插入什么内容。是搜索框，还是文字，还是菜单。由调用者自己来决定。这就是为什么我们要学习组件中的插槽slot的原因。</p><h2 id="🚩-slot-插槽的基本使用"><a href="#🚩-slot-插槽的基本使用" class="headerlink" title="🚩  slot-插槽的基本使用"></a>🚩  slot-插槽的基本使用</h2><p>🔺 我们在使用组件的时候有时候希望，在组件内部定制化内容，例如京东的导航。组件的思想是可以复用的，把这个导航栏看做一个组件。这个组件都可以分成三个部分，左边中间右边，如果可以分割组件，就可以定制化组件内容了。</p><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 父组件 --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color:red;"</span>&gt;</span>这是插槽内容222<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color:red;"</span>&gt;</span>这是插槽内容333<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 插槽的基本使用使用&lt;slot&gt;&lt;/slot&gt; --&gt;</span>  <span class="hljs-comment">&lt;!-- 子组件 --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cpn"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>        &#123;&#123;message&#125;&#125;      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>      <span class="hljs-comment">&lt;!-- 插槽默认值 --&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>  <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">const</span> cpn = &#123;</span><span class="actionscript">      template: <span class="hljs-string">"#cpn"</span>,</span>      data() &#123;<span class="actionscript">        <span class="hljs-keyword">return</span> &#123;</span><span class="actionscript">          message: <span class="hljs-string">"我是子组件"</span></span>        &#125;      &#125;,    &#125;<span class="actionscript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">      el: <span class="hljs-string">"#app"</span>,</span>      data() &#123;<span class="actionscript">        <span class="hljs-keyword">return</span> &#123;</span><span class="actionscript">          message: <span class="hljs-string">"我是父组件消息"</span></span>        &#125;      &#125;,      components: &#123;        cpn      &#125;,    &#125;)  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>🔺  简单使用插槽，定义<code>template</code>时候使用<code>slot</code></p><pre><code class="hljs javascript">&lt;!-- 子组件 --&gt;  &lt;template id=<span class="hljs-string">"cpn"</span>&gt;    &lt;div&gt;      &lt;div&gt;        &#123;&#123;message&#125;&#125;      &lt;<span class="hljs-regexp">/div&gt;</span><span class="hljs-regexp">      &lt;!-- 插槽默认值 --&gt;</span><span class="hljs-regexp">      &lt;slot&gt;&lt;button&gt;button&lt;/</span>button&gt;&lt;<span class="hljs-regexp">/slot&gt;</span><span class="hljs-regexp">    &lt;/</span>div&gt;  &lt;<span class="hljs-regexp">/template&gt;</span></code></pre><p>🔺 插槽可以使用默认值，<code>&lt;button&gt;button&lt;/button&gt;</code>就是插槽的默认值。</p><pre><code class="hljs javascript">&lt;cpn&gt;&lt;<span class="hljs-regexp">/cpn&gt;</span><span class="hljs-regexp">&lt;cpn&gt;&lt;span style="color:red;"&gt;这是插槽内容222&lt;/</span>span&gt;&lt;<span class="hljs-regexp">/cpn&gt;</span></code></pre><p>👩注意👩:  使用插槽，<code>&lt;span style=&quot;color:red;&quot;&gt;这是插槽内容222&lt;/span&gt;</code>将替换插槽的默认值。替换了两次插槽，两次未替换显示默认的<code>button</code>。如果想实现组件分成三部分就可以使用三个<code>&lt;slot&gt;&lt;/slot&gt;</code>来填充插槽了。</p><h2 id="🚩-slot-具名插槽的使用"><a href="#🚩-slot-具名插槽的使用" class="headerlink" title="🚩  slot-具名插槽的使用"></a>🚩  slot-具名插槽的使用</h2><p>🔺 具名插槽，就是可以让插槽按指定的顺序填充，而没有具名的插槽是按照你填充的顺序排列的，而具名插槽可以自定义排列。</p><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 父组件 --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>没具名<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"left"</span>&gt;</span>这是左边具名插槽<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>      <span class="hljs-comment">&lt;!-- 新语法 --&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:center</span>&gt;</span>这是中间具名插槽<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>      <span class="hljs-comment">&lt;!-- 新语法缩写 --&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">right</span>&gt;</span>这是右边具名插槽<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 插槽的基本使用使用&lt;slot&gt;&lt;/slot&gt; --&gt;</span>  <span class="hljs-comment">&lt;!-- 子组件 --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cpn"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"left"</span>&gt;</span>左边<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"center"</span>&gt;</span>中间<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"right"</span>&gt;</span>右边<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span>没有具名的插槽<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>  <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">const</span> cpn = &#123;</span><span class="actionscript">      template: <span class="hljs-string">"#cpn"</span>,</span>      data() &#123;<span class="actionscript">        <span class="hljs-keyword">return</span> &#123;</span><span class="actionscript">          message: <span class="hljs-string">"我是子组件"</span></span>        &#125;      &#125;,    &#125;<span class="actionscript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">      el: <span class="hljs-string">"#app"</span>,</span>      data() &#123;<span class="actionscript">        <span class="hljs-keyword">return</span> &#123;</span><span class="actionscript">          message: <span class="hljs-string">"我是父组件消息"</span></span>        &#125;      &#125;,      components: &#123;        cpn      &#125;,    &#125;)  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>👩注意👩:  没有具名的插槽排在最后，因为在定义组件的时候，排在了最后，如果有多个按顺序排列。具名插槽按照自定义的顺序排列。</p><p>🔺 定义具名插槽，使用<code>name</code>属性，给插槽定义一个名字。</p><pre><code class="hljs javascript">&lt;!-- 插槽的基本使用使用&lt;slot&gt;&lt;<span class="hljs-regexp">/slot&gt; --&gt;</span><span class="hljs-regexp"> &lt;!-- 子组件模板 --&gt;</span><span class="hljs-regexp"> &lt;template id="cpn"&gt;</span><span class="hljs-regexp">   &lt;div&gt;</span><span class="hljs-regexp">     &lt;slot name="left"&gt;左边&lt;/</span>slot&gt;     &lt;slot name=<span class="hljs-string">"center"</span>&gt;中间&lt;<span class="hljs-regexp">/slot&gt;</span><span class="hljs-regexp">     &lt;slot name="right"&gt;右边&lt;/</span>slot&gt;     &lt;slot&gt;没有具名的插槽&lt;<span class="hljs-regexp">/slot&gt;</span><span class="hljs-regexp">   &lt;/</span>div&gt; &lt;<span class="hljs-regexp">/template&gt;</span></code></pre><p>🔺 使用具名插槽，在自定义组件标签内使用<code>slot=&quot;left&quot;</code>，插入指定插槽。</p><pre><code class="hljs javascript">&lt;!-- 父组件 --&gt; &lt;div id=<span class="hljs-string">"app"</span>&gt;   &lt;cpn&gt;     &lt;span&gt;没具名&lt;<span class="hljs-regexp">/span&gt;</span><span class="hljs-regexp">     &lt;span slot="left"&gt;这是左边具名插槽&lt;/</span>span&gt;     &lt;!-- 新语法 --&gt;     &lt;template v-slot:center&gt;这是中间具名插槽&lt;<span class="hljs-regexp">/template&gt;</span><span class="hljs-regexp">     &lt;!-- 新语法缩写 --&gt;</span><span class="hljs-regexp">     &lt;template #right&gt;这是右边具名插槽&lt;/</span>template&gt;   &lt;<span class="hljs-regexp">/cpn&gt;</span><span class="hljs-regexp"> &lt;/</span>div&gt;</code></pre><p>👩注意👩:  此处有是三种写法，获取指定插槽。</p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue14</title>
    <link href="/2020/05/08/vue14/"/>
    <url>/2020/05/08/vue14/</url>
    
    <content type="html"><![CDATA[<h1 id="（十四）父子组件通信"><a href="#（十四）父子组件通信" class="headerlink" title="（十四）父子组件通信"></a>（十四）父子组件通信</h1><h2 id="🚩-父子组件通信案例"><a href="#🚩-父子组件通信案例" class="headerlink" title="🚩 父子组件通信案例"></a>🚩 父子组件通信案例</h2><p>🔺 实现父子组件的值双向绑定。</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>组件通信-父子通信案例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 父组件 --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span> <span class="hljs-attr">:number1</span>=<span class="hljs-string">'num1'</span> <span class="hljs-attr">:number2</span>=<span class="hljs-string">'num2'</span> @<span class="hljs-attr">num1change</span>=<span class="hljs-string">"num1Change"</span> @<span class="hljs-attr">num2change</span>=<span class="hljs-string">"num2Change"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>父组件&#123;&#123;num1&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"num1"</span> &gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>父组件&#123;&#123;num2&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"num2"</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 子组件 --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cpn"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;number1&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;dnumber1&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">"dnumber1"</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">"num1input"</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;number2&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">"dnumber2"</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">"num2input"</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-comment">// 父传子：props</span></span><span class="actionscript">    <span class="hljs-keyword">const</span> cpn = &#123;</span><span class="actionscript">      template: <span class="hljs-string">"#cpn"</span>,</span>      data() &#123;<span class="actionscript">        <span class="hljs-keyword">return</span> &#123;</span><span class="actionscript">          dnumber1:<span class="hljs-keyword">this</span>.number1,</span><span class="actionscript">          dnumber2:<span class="hljs-keyword">this</span>.number2</span>        &#125;      &#125;,      props:&#123;<span class="javascript">        number1:[<span class="hljs-built_in">Number</span>,<span class="hljs-built_in">String</span>],</span><span class="javascript">        number2:[<span class="hljs-built_in">Number</span>,<span class="hljs-built_in">String</span>],</span>      &#125;,      methods: &#123;        num1input(event)&#123;<span class="actionscript">          <span class="hljs-keyword">this</span>.dnumber1 = event.target.value</span><span class="actionscript">          <span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">'num1change'</span>,<span class="hljs-keyword">this</span>.dnumber1)</span>        &#125;,        num2input(event)&#123;<span class="actionscript">          <span class="hljs-keyword">this</span>.dnumber2 = event.target.value</span><span class="actionscript">          <span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">'num2change'</span>,<span class="hljs-keyword">this</span>.dnumber2)</span>        &#125;      &#125;,    &#125;;<span class="actionscript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">      el: <span class="hljs-string">"#app"</span>,</span>      data() &#123;<span class="actionscript">        <span class="hljs-keyword">return</span> &#123;</span>          num1:1,          num2:2,        &#125;      &#125;,      methods: &#123;        num1Change(value)&#123;<span class="actionscript">          <span class="hljs-keyword">this</span>.num1=value</span>        &#125;,        num2Change(value)&#123;<span class="actionscript">          <span class="hljs-keyword">this</span>.num1=value</span>        &#125;      &#125;,      components: &#123;        cpn      &#125;,    &#125;)  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>🔺 使用watch实现</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>组件通信-父子通信案例(watch实现)<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 父组件 --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span> <span class="hljs-attr">:number1</span>=<span class="hljs-string">'num1'</span> <span class="hljs-attr">:number2</span>=<span class="hljs-string">'num2'</span> @<span class="hljs-attr">num1change</span>=<span class="hljs-string">"num1Change"</span> @<span class="hljs-attr">num2change</span>=<span class="hljs-string">"num2Change"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>父组件&#123;&#123;num1&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"num1"</span> &gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>父组件&#123;&#123;num2&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"num2"</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 子组件 --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cpn"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;number1&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"dnumber1"</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;number2&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"dnumber2"</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-comment">// 父传子：props</span></span><span class="actionscript">    <span class="hljs-keyword">const</span> cpn = &#123;</span><span class="actionscript">      template: <span class="hljs-string">"#cpn"</span>,</span>      data() &#123;<span class="actionscript">        <span class="hljs-keyword">return</span> &#123;</span><span class="actionscript">          dnumber1:<span class="hljs-keyword">this</span>.number1,</span><span class="actionscript">          dnumber2:<span class="hljs-keyword">this</span>.number2</span>        &#125;      &#125;,      props:&#123;<span class="javascript">        number1:[<span class="hljs-built_in">Number</span>,<span class="hljs-built_in">String</span>],</span><span class="javascript">        number2:[<span class="hljs-built_in">Number</span>,<span class="hljs-built_in">String</span>],</span>      &#125;,      watch: &#123;        dnumber1(newValue)&#123;<span class="actionscript">          <span class="hljs-keyword">this</span>.dnumber1 = newValue * <span class="hljs-number">100</span></span><span class="actionscript">          <span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">'num1change'</span>,newValue)</span>        &#125;,        dnumber2(newValue)&#123;<span class="actionscript">          <span class="hljs-keyword">this</span>.dnumber1 = newValue * <span class="hljs-number">100</span></span><span class="actionscript">          <span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">'num2change'</span>,newValue)</span>        &#125;      &#125;,    &#125;;<span class="actionscript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">      el: <span class="hljs-string">"#app"</span>,</span>      data() &#123;<span class="actionscript">        <span class="hljs-keyword">return</span> &#123;</span>          num1:1,          num2:2,        &#125;      &#125;,      methods: &#123;        num1Change(value)&#123;<span class="actionscript">          <span class="hljs-keyword">this</span>.num1=value</span>        &#125;,        num2Change(value)&#123;<span class="actionscript">          <span class="hljs-keyword">this</span>.num1=value</span>        &#125;      &#125;,      components: &#123;        cpn      &#125;,    &#125;)  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><h2 id="🚩-父访问子（children-ref）"><a href="#🚩-父访问子（children-ref）" class="headerlink" title="🚩 父访问子（children-ref）"></a>🚩 父访问子（children-ref）</h2><p>🔺  父组件访问子组件，有时候我么你需要直接操作子组件的方法，或是属性，此时需要用到<code>$children</code>和<code>$ref</code>。</p><p><code>$children</code>的缺陷：</p><p>通过<code>$children</code>访问子组件时，是一个数组类型，访问其中的子组件必须通过索引值。但是当子组件过多，我们需要拿到其中一个时，往往不能确定它的索引值，甚至还可能会发生变化。有时候，我们想明确获取其中一个特定的组件，这个时候就可以使用<code>$refs</code>.</p><p><code>$refs</code>的使用：</p><p><code>$refs</code>和<code>ref</code>指令通常是一起使用的。首先，我们通过<code>ref</code>给某一个子组件绑定一个特定的<code>ID</code>。其次，通过<code>this.$refs.ID</code>就可以访问到该组件了。</p><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 父组件 --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"aaa"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"btnClick"</span> &gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 子组件 --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cpn"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>      我是子组件    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-comment">// 父传子：props</span></span><span class="actionscript">    <span class="hljs-keyword">const</span> cpn = &#123;</span><span class="actionscript">      template: <span class="hljs-string">"#cpn"</span>,</span>      data() &#123;<span class="actionscript">        <span class="hljs-keyword">return</span> &#123;</span><span class="actionscript">          name:<span class="hljs-string">"我是子组件的name"</span></span>        &#125;      &#125;,      methods: &#123;        showMessage()&#123;<span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"showMessage"</span>);</span>        &#125;      &#125;,    &#125;;<span class="actionscript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">      el: <span class="hljs-string">"#app"</span>,</span>      data() &#123;<span class="actionscript">        <span class="hljs-keyword">return</span> &#123;</span><span class="actionscript">          message:<span class="hljs-string">"hello"</span></span>        &#125;      &#125;,      methods: &#123;        btnClick()&#123;<span class="actionscript">          <span class="hljs-comment">// 1.children</span></span><span class="actionscript">          <span class="hljs-comment">// console.log(this.$children[0].showMessage)</span></span><span class="actionscript">          <span class="hljs-comment">// for (let cpn of this.$children) &#123;</span></span><span class="actionscript">          <span class="hljs-comment">//   console.log(cpn.showMessage)</span></span><span class="actionscript">          <span class="hljs-comment">// &#125;</span></span><span class="actionscript">          <span class="hljs-comment">// 2.$ref</span></span><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.$refs.aaa.name)</span>        &#125;      &#125;,      components: &#123;        cpn      &#125;,    &#125;)  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p> 🔺 <code>$children</code>方式</p><pre><code class="hljs javascript"><span class="hljs-comment">// 1.children</span><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.$children[<span class="hljs-number">0</span>].showMessage)<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> cpn <span class="hljs-keyword">of</span> <span class="hljs-keyword">this</span>.$children) &#123;  <span class="hljs-built_in">console</span>.log(cpn.showMessage)&#125;</code></pre><p> 👩注意👩:   使用<code>this.$children</code>直接获取当前实例的直接子组件，需要注意<code>$children</code>并不保证顺序，也不是响应式的。如果你发现自己正在尝试使用 <code>$children</code> 来进行数据绑定，考虑使用一个数组配合 <code>v-for</code> 来生成子组件，并且使用<code>Array</code>作为真正的来源。 </p><p>🔺 <code>$refs</code>方式</p><ul><li>先定义子组件</li></ul><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">cpn</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"aaa"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span></code></pre><ul><li>直接调用</li></ul>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue13</title>
    <link href="/2020/05/08/vue13/"/>
    <url>/2020/05/08/vue13/</url>
    
    <content type="html"><![CDATA[<h1 id="（十三）-组件通信"><a href="#（十三）-组件通信" class="headerlink" title="（十三） 组件通信"></a>（十三） 组件通信</h1><p>🔺 在上一个小节中，我们提到了子组件是不能引用父组件或者Vue实例的数据的。但是，在开发中，往往一些数据确实需要从上层传递到下层:比如在一个页面中，我们从服务器请求到了很多的数据。其中一部分数据，并非是我们整个页面的大组件来展示的，而是需要下面的子组件进行展示。这个时候，并不会让子组件再次发送一个网络请求，而是直接让大组件(父组件)将数据传递给小组件(子组件)。</p><p>🔺 如何进行父子组件间的通信呢？<code>Vue</code>官方提到:</p><ul><li>通过<code>props</code>向子组件传递数据</li><li>通过事件向父组件发送消息</li></ul><p>🔺 在下面的代码中，我直接将<code>Vue</code>实例当做父组件，并且其中包含子组件来简化代码。真实的开发中，<code>Vue</code>实例和子组件的通信<strong>和</strong>父组件和子组件的通信过程是一样的。</p><h2 id="🚩-父传子（props的驼峰标识）"><a href="#🚩-父传子（props的驼峰标识）" class="headerlink" title="🚩 父传子（props的驼峰标识）"></a>🚩 父传子（props的驼峰标识）</h2><p>🔺 <code>v-bind</code>是 不支持使用驼峰标识的，例如<code>cUser</code>要改成<code>c-User</code>。</p><p>🔺 在组件中，使用选项<code>props</code>来声明需要从父级接收到的数据。</p><p>🔺 <code>props</code>的值有两种方式：</p><ul><li><p>方式一：字符串数组，数组中的字符串就是传递时的名称。</p></li><li><p>方式二：对象，对象可以设置传递时的类型，也可以设置默认值等。</p></li></ul><p>🔺 我们先来看一个最简单的<code>props</code>传递：</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    <span class="hljs-comment">&lt;!-- v-bind不支持驼峰 :cUser改成 :c-User--&gt;</span>    <span class="hljs-comment">&lt;!-- &lt;cpn :cUser="user"&gt;&lt;/cpn&gt; --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span> <span class="hljs-attr">:c-User</span>=<span class="hljs-string">"user"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span> <span class="hljs-attr">:cuser</span>=<span class="hljs-string">"user"</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cpn"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>      <span class="hljs-comment">&lt;!-- 使用驼峰 --&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;cUser&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>      <span class="hljs-comment">&lt;!-- 不使用 --&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;cuser&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-comment">// 父传子：props</span></span><span class="actionscript">    <span class="hljs-keyword">const</span> cpn = &#123;</span><span class="actionscript">      template: <span class="hljs-string">"#cpn"</span>,</span><span class="actionscript">      props: &#123; <span class="hljs-comment">//对象写法</span></span><span class="actionscript">        <span class="hljs-comment">//驼峰</span></span><span class="javascript">        cUser:<span class="hljs-built_in">Object</span>,</span><span class="actionscript">        <span class="hljs-comment">//未使用驼峰</span></span><span class="javascript">        cuser:<span class="hljs-built_in">Object</span></span>      &#125;,<span class="actionscript">      data() &#123;<span class="hljs-keyword">return</span> &#123;&#125;&#125;,</span>      methods: &#123;&#125;,    &#125;;<span class="actionscript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">      el: <span class="hljs-string">"#app"</span>,</span>      data: &#123;        user:&#123;<span class="actionscript">          name:<span class="hljs-string">'zzz'</span>,</span>          age:18,          height:175        &#125;      &#125;,      components: &#123;        cpn      &#125;    &#125;)  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p> 👩注意👩:   </p><p> 🔺 在前面，我们的props选项是使用一个数组。我们说过，除了数组之外，我们也可以使用对象，当需要对props进行类型等验证时，就需要对象写法了。</p><p>🔺 验证都支持哪些数据类型呢？</p><ul><li><p>String</p></li><li><p>Number</p></li><li><p>Boolean</p></li><li><p>Array</p></li><li><p>Object</p></li><li><p>Date</p></li><li><p>Function</p></li><li><p>Symbol</p></li></ul><p>🔺 当我们有自定义构造函数时，验证也支持自定义的类型。</p><h2 id="🚩-子传父-emit"><a href="#🚩-子传父-emit" class="headerlink" title="🚩 子传父$emit"></a>🚩 子传父<code>$emit</code></h2><p>🔺 <code>props</code>用于父组件向子组件传递数据，还有一种比较常见的是子组件传递数据或事件到父组件中。我们应该如何处理呢？这个时候，我们需要使用<strong>自定义事件</strong>来完成。什么时候需要自定义事件呢？</p><p>🔺 当子组件需要向父组件传递数据时，就要用到自定义事件了。我们之前学习的<code>v-on</code>不仅仅可以用于监听DOM事件，也可以用于组件间的自定义事件。</p><p>🔺 自定义事件的流程：</p><ul><li><p>在子组件中，通过<code>$emit()</code>来触发事件。</p></li><li><p>在父组件中，通过<code>v-on</code>来监听子组件事件。</p></li></ul><p>🔺 子组件向父组件传值，使用自定义事件<code>$emit</code>。</p><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 父组件 --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 不写参数默认传递btnClick的item --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span> @<span class="hljs-attr">itemclick</span>=<span class="hljs-string">"cpnClcik"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 子组件 --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cpn"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(item, index) in categoties"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"index"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"btnClick(item)"</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-comment">// 父传子：props</span></span><span class="actionscript">    <span class="hljs-keyword">const</span> cpn = &#123;</span><span class="actionscript">      template: <span class="hljs-string">"#cpn"</span>,</span>      data() &#123;<span class="actionscript">        <span class="hljs-keyword">return</span> &#123;</span>          categoties: [&#123;<span class="actionscript">              id: <span class="hljs-string">'aaa'</span>,</span><span class="actionscript">              name: <span class="hljs-string">'热门推荐'</span></span>            &#125;,            &#123;<span class="actionscript">              id: <span class="hljs-string">'bbb'</span>,</span><span class="actionscript">              name: <span class="hljs-string">'手机数码'</span></span>            &#125;,            &#123;<span class="actionscript">              id: <span class="hljs-string">'ccc'</span>,</span><span class="actionscript">              name: <span class="hljs-string">'家用家电'</span></span>            &#125;,            &#123;<span class="actionscript">              id: <span class="hljs-string">'ddd'</span>,</span><span class="actionscript">              name: <span class="hljs-string">'电脑办公'</span></span>            &#125;,          ]        &#125;      &#125;,      methods: &#123;        btnClick(item) &#123;<span class="actionscript">          <span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">'itemclick'</span>, item)</span>        &#125;      &#125;,    &#125;;<span class="actionscript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">      el: <span class="hljs-string">"#app"</span>,</span>      data() &#123;<span class="actionscript">        <span class="hljs-keyword">return</span> &#123;</span>        &#125;      &#125;,      methods: &#123;        cpnClcik(item) &#123;<span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'cpnClick'</span>+item.name);</span>        &#125;      &#125;,      components: &#123;        cpn      &#125;,    &#125;)  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>1.在子组件中定义一个方法<code>btnClick(item)</code>，使用<code>$emit</code>，<code>&#39;itemclick&#39;</code>是事件名，<code>item</code>是传过去的值。</p><pre><code class="hljs javascript">methods: &#123;       btnClick(item) &#123;         <span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">'itemclick'</span>, item)       &#125;     &#125;,</code></pre><p>2.在子组件中监听点击事件并回调此方法</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(item, index) in categoties"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"index"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"btnClick(item)"</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre><p>3.在父组件中定义一个方法<code>cpnClcik(item)</code></p><pre><code class="hljs javascript">methods: &#123; cpnClcik(item) &#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'cpnClick'</span>+item.name); &#125;&#125;,</code></pre><p>4.并在父组件（<code>vue</code>实例）中调用<code>&lt;cpn @itemclick=&quot;cpnClcik&quot;&gt;&lt;/cpn&gt;</code>（不写参数默认传递<code>btnClick</code>的<code>item</code> ），父组件监听事件名为<code>itemclick</code>的子组件传过来的事件。</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">cpn</span> @<span class="hljs-attr">itemclick</span>=<span class="hljs-string">"cpnClcik"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue 笔记整理12</title>
    <link href="/2020/05/07/vue12/"/>
    <url>/2020/05/07/vue12/</url>
    
    <content type="html"><![CDATA[<h1 id="（十二）父组件向子组件传递数据"><a href="#（十二）父组件向子组件传递数据" class="headerlink" title="（十二）父组件向子组件传递数据"></a>（十二）父组件向子组件传递数据</h1><h2 id="🚩-父组件如何向子组件传递数据？"><a href="#🚩-父组件如何向子组件传递数据？" class="headerlink" title="🚩 父组件如何向子组件传递数据？"></a>🚩 父组件如何向子组件传递数据？</h2><p>🔺 使用<code>props</code>属性</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> cpn = &#123;  template: <span class="hljs-string">"#cpn"</span>,  props: &#123;           cmessage: &#123;          type: <span class="hljs-built_in">String</span>,          <span class="hljs-keyword">default</span>: <span class="hljs-string">'zzzzz'</span>,          required: <span class="hljs-literal">true</span> <span class="hljs-comment">//在使用组件必传值</span>          &#125;  &#125;&#125;</code></pre><p>🔺  向<code>cmessage</code>对象传值</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span> <span class="hljs-attr">:cMessage</span>=<span class="hljs-string">"message"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>    <span class="actionscript"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">      el: <span class="hljs-string">"#app"</span>,</span>      data: &#123;<span class="actionscript">        message: <span class="hljs-string">"你好"</span>,</span><span class="actionscript">        movies: [<span class="hljs-string">"复仇者联盟"</span>, <span class="hljs-string">"钢铁侠"</span>, <span class="hljs-string">"星际穿越"</span>, <span class="hljs-string">"哪吒传奇"</span>]</span>      &#125;,      components: &#123;        cpn      &#125;    &#125;)  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h2 id="🚩-props属性使用"><a href="#🚩-props属性使用" class="headerlink" title="🚩  props属性使用"></a>🚩  props属性使用</h2><p>🔺 数组写法</p><pre><code class="hljs javascript">props: [<span class="hljs-string">'cmovies'</span>, <span class="hljs-string">'cmessage'</span>]</code></pre><p>🔺 对象写法</p><pre><code class="hljs javascript">props: &#123;          cmessage: &#123;         type: <span class="hljs-built_in">String</span>,         <span class="hljs-keyword">default</span>: <span class="hljs-string">'zzzzz'</span>,         required: <span class="hljs-literal">true</span> <span class="hljs-comment">//在使用组件必传值</span>         &#125; &#125;</code></pre><p>🔺 <code>props</code>属性的类型限制</p><pre><code class="hljs javascript"><span class="hljs-comment">//1.类型限制(多个类使用数组)</span>cmovies:<span class="hljs-built_in">Array</span>,<span class="hljs-comment">//限制为数组类型</span>cmessage:<span class="hljs-built_in">String</span>,<span class="hljs-comment">//限制为Strin类型</span>cmessage:[<span class="hljs-string">'String'</span>,<span class="hljs-string">'Number'</span>]<span class="hljs-comment">//限制为String或Number类型</span></code></pre><p>🔺  <code>props</code>属性的默认值</p><pre><code class="hljs javascript"><span class="hljs-comment">//2.提供一些默认值，以及必传值</span>        cmessage: &#123;          type: <span class="hljs-built_in">String</span>,          <span class="hljs-keyword">default</span>: <span class="hljs-string">'zzzzz'</span>,<span class="hljs-comment">//默认值</span>        &#125;</code></pre><p>🔺  <code>props</code>属性的必传值</p><pre><code class="hljs javascript">cmessage: &#123;          type: <span class="hljs-built_in">String</span>,          <span class="hljs-keyword">default</span>: <span class="hljs-string">'zzzzz'</span>,          required: <span class="hljs-literal">true</span> <span class="hljs-comment">//在使用组件必传值</span>        &#125;</code></pre><p>🔺 类型是<code>Object/Array</code>，默认值必须是一个函数</p><pre><code class="hljs javascript"><span class="hljs-comment">//类型是Object/Array，默认值必须是一个函数</span>cmovies: &#123;type: <span class="hljs-built_in">Array</span>,<span class="hljs-keyword">default</span> () &#123;<span class="hljs-keyword">return</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]&#125;&#125;,</code></pre><p>🔺  自定义验证函数</p><pre><code class="hljs javascript">vaildator: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;<span class="hljs-comment">//这个传递的值必须匹配下列字符串中的一个</span><span class="hljs-keyword">return</span> [<span class="hljs-string">'zzzzz'</span>, <span class="hljs-string">'ttttt'</span>, <span class="hljs-string">'yyy'</span>].indexOf(value) !== <span class="hljs-number">-1</span>&#125;</code></pre><p>🔺 自定义类型</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">firstName,lastName</span>) </span>&#123;     <span class="hljs-keyword">this</span>.firstName = firstName     <span class="hljs-keyword">this</span>.lastName = lastName   &#125;cmessage:Person<span class="hljs-comment">//限定了cmeessage必须是Person类型</span></code></pre><p> 🔺  综合使用</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span> <span class="hljs-attr">:cMovies</span>=<span class="hljs-string">"movies"</span> <span class="hljs-attr">:cMessage</span>=<span class="hljs-string">"message"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cpn"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(item, index) in cmovies"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"index"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;cmessage&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span><span class="hljs-params">(firstName,lastName)</span> </span>&#123;</span><span class="actionscript">      <span class="hljs-keyword">this</span>.firstName = firstName</span><span class="actionscript">      <span class="hljs-keyword">this</span>.lastName = lastName</span>    &#125;<span class="actionscript">    <span class="hljs-comment">// 父传子：props</span></span><span class="actionscript">    <span class="hljs-keyword">const</span> cpn = &#123;</span><span class="actionscript">      template: <span class="hljs-string">"#cpn"</span>,</span><span class="actionscript">      <span class="hljs-comment">// props: ['cmovies', 'cmessage'],//数组写法</span></span><span class="actionscript">      props: &#123; <span class="hljs-comment">//对象写法</span></span><span class="actionscript">        <span class="hljs-comment">// 1.类型限制(多个类使用数组)</span></span><span class="actionscript">        <span class="hljs-comment">// cmovies:Array,</span></span><span class="actionscript">        <span class="hljs-comment">// cmessage:String,</span></span><span class="actionscript">        <span class="hljs-comment">// cmessage:['String','Number'],</span></span><span class="actionscript">        <span class="hljs-comment">// 2.提供一些默认值，以及必传值</span></span>        cmessage: &#123;<span class="javascript">          type: <span class="hljs-built_in">String</span>,</span><span class="actionscript">          <span class="hljs-keyword">default</span>: <span class="hljs-string">'zzzzz'</span>,</span><span class="actionscript">          required: <span class="hljs-literal">true</span> <span class="hljs-comment">//在使用组件必传值</span></span>        &#125;,<span class="actionscript">        <span class="hljs-comment">//类型是Object/Array，默认值必须是一个函数</span></span>        cmovies: &#123;<span class="javascript">          type: <span class="hljs-built_in">Array</span>,</span><span class="actionscript">          <span class="hljs-keyword">default</span> () &#123;</span><span class="actionscript">            <span class="hljs-keyword">return</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]</span>          &#125;        &#125;,<span class="actionscript">        <span class="hljs-comment">// 3.自定义验证函数</span></span><span class="actionscript">        <span class="hljs-comment">// vaildator: function (value) &#123;</span></span><span class="actionscript">        <span class="hljs-comment">//   //这个传递的值必须匹配下列字符串中的一个</span></span><span class="actionscript">        <span class="hljs-comment">//   return ['zzzzz', 'ttttt', 'yyy'].indexOf(value) !== -1</span></span><span class="actionscript">        <span class="hljs-comment">// &#125;</span></span><span class="actionscript">        <span class="hljs-comment">// 4.自定义类型</span></span><span class="actionscript">        <span class="hljs-comment">// cmessage:Person,</span></span>      &#125;,      data() &#123;<span class="actionscript">        <span class="hljs-keyword">return</span> &#123;</span>        &#125;      &#125;,      methods: &#123;      &#125;,    &#125;;<span class="actionscript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">      el: <span class="hljs-string">"#app"</span>,</span>      data: &#123;<span class="actionscript">        message: <span class="hljs-string">"你好"</span>,</span><span class="actionscript">        movies: [<span class="hljs-string">"复仇者联盟"</span>, <span class="hljs-string">"钢铁侠"</span>, <span class="hljs-string">"星际穿越"</span>, <span class="hljs-string">"哪吒传奇"</span>]</span>      &#125;,      components: &#123;        cpn      &#125;    &#125;)  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue 笔记整理11</title>
    <link href="/2020/05/06/vue11/"/>
    <url>/2020/05/06/vue11/</url>
    
    <content type="html"><![CDATA[<h1 id="（十一）组件模板"><a href="#（十一）组件模板" class="headerlink" title="（十一）组件模板"></a>（十一）组件模板</h1><h2 id="🚩-组件模板的分离写法"><a href="#🚩-组件模板的分离写法" class="headerlink" title="🚩  组件模板的分离写法"></a>🚩  组件模板的分离写法</h2><p>🔺 使用<code>script</code>标签定义组件的模板，<code>script</code>标签注意类型是<code>text/x-template</code>。</p><pre><code class="hljs javascript">&lt;!-- <span class="hljs-number">1.</span>script标签注意类型是text/x-template --&gt; &lt;script type=<span class="hljs-string">"text/x-template"</span> id=<span class="hljs-string">"cpn1"</span>&gt;   &lt;div&gt;       &lt;h2&gt;组件模板的分离写法&lt;<span class="hljs-regexp">/h2&gt;</span><span class="hljs-regexp">       &lt;p&gt;script标签注意类型是text/</span>x-template&lt;<span class="hljs-regexp">/p&gt;</span><span class="hljs-regexp">     &lt;/</span>div&gt; &lt;<span class="hljs-regexp">/script&gt;</span></code></pre><h2 id="🚩-template标签"><a href="#🚩-template标签" class="headerlink" title="🚩  template标签"></a>🚩  template标签</h2><p>🔺  使用<code>template</code>标签，将内容写在标签内。</p><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 2.template标签 --&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cpn2"</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>组件模板的分离写法<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>template标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></code></pre><p>🔺  调用分离的模板，使用<code>template:&#39;#cpn1&#39;</code></p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>  <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">   <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">     el: <span class="hljs-string">"#app"</span>,</span><span class="actionscript">     components: &#123; <span class="hljs-comment">//局部组件创建</span></span>       cpn1:&#123;<span class="actionscript">         template:<span class="hljs-string">'#cpn1'</span></span>       &#125;,       cpn2: &#123;<span class="actionscript">         template: <span class="hljs-string">'#cpn2'</span></span>       &#125;     &#125;   &#125;) <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h2 id="🚩-组件的数据"><a href="#🚩-组件的数据" class="headerlink" title="🚩  组件的数据"></a>🚩  组件的数据</h2><p>🔺  前面说过<code>vue</code>组件就是一个<code>vue</code>实例，相应的<code>vue</code>组件也有<code>data</code>属性来存放数据。</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">cpn1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn1</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">script</span>  <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">   <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">     el: <span class="hljs-string">"#app"</span>,</span><span class="actionscript">     components: &#123; <span class="hljs-comment">//局部组件创建</span></span>       cpn1:&#123;<span class="handlebars"><span class="xml">         template:'<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;msg&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>',</span></span>         data()&#123;<span class="actionscript">           <span class="hljs-keyword">return</span> &#123;</span><span class="actionscript">             msg:<span class="hljs-string">"组件的数据存放必须要是一个函数"</span></span>           &#125;         &#125;       &#125;     &#125;   &#125;) <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>👩注意👩: 在<code>template</code>中使用组件内部的数据<code>msg</code>。</p><h2 id="🚩-组件的data为什么必须要是函数"><a href="#🚩-组件的data为什么必须要是函数" class="headerlink" title="🚩  组件的data为什么必须要是函数"></a>🚩  组件的data为什么必须要是函数</h2><p>🔺  组件的思想是复用，定义组件当然是把通用的公共的东西抽出来复用。</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>data不使用函数<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn1</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn1</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>data使用函数<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>  <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cpn1"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"count--"</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>      当前计数：&#123;&#123;count&#125;&#125;      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"count++"</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cpn2"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"count--"</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>      当前计数：&#123;&#123;count&#125;&#125;      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"count++"</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">const</span> obj = &#123;</span>      count:0    &#125;;<span class="actionscript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">      el: <span class="hljs-string">"#app"</span>,</span><span class="actionscript">      components: &#123; <span class="hljs-comment">//局部组件创建</span></span>        cpn1: &#123;<span class="actionscript">          template: <span class="hljs-string">'#cpn1'</span>,</span>          data() &#123;<span class="actionscript">            <span class="hljs-keyword">return</span> obj;</span>          &#125;        &#125;,        cpn2: &#123;<span class="actionscript">          template: <span class="hljs-string">'#cpn2'</span>,</span>          data() &#123;<span class="actionscript">            <span class="hljs-keyword">return</span> &#123;</span>              count: 0            &#125;          &#125;        &#125;      &#125;    &#125;)  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>👩注意👩: 上述代码中定义了两个组件<code>cpn1</code>和<code>cpn2</code>，都是定义了两个计数器，<code>con1</code>的data虽然使用了函数，但是为了模拟<code>data:{count:0}</code>，使用了常量<code>obj</code>来返回<code>count</code>。不使用<code>data</code>的好像共用一个<code>count</code>属性，而使用函数的<code>data</code>的<code>count</code>是各自用各自的，像局部变量一样有块级作用域，这个块级就是<code>vue</code>组件的作用域。我们在复用组件的时候肯定希望，各自组件用各自的变量，如果确实需要都用一样的，可以全局组件注册，也可以是用<code>vuex</code>来进行状态管理。</p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue 笔记整理10</title>
    <link href="/2020/05/05/vue10/"/>
    <url>/2020/05/05/vue10/</url>
    
    <content type="html"><![CDATA[<h1 id="（十）组件化"><a href="#（十）组件化" class="headerlink" title="（十）组件化"></a>（十）组件化</h1><h2 id="🚩-什么是组件化"><a href="#🚩-什么是组件化" class="headerlink" title="🚩  什么是组件化"></a>🚩  什么是组件化</h2><p> 🔺 人面对复杂问题的处理方式：任何一个人处理信息的逻辑能力都是有限的。所以，当面对一个非常复杂的问题时，我们不太可能一次性搞定一大堆的内容。但是，我们人有一种天生的能力，就是将问题进行拆解。如果将一个复杂的问题，拆分成很多个可以处理的小问题，再将其放在整体当中，你会发现大的问题也会迎刃而解。</p><p>🔺 组件化也是类似的思想：如果我们将一个页面中所有的处理逻辑全部放在一起，处理起来就会变得非常复杂，而且不利于后续的管理以及扩展。但如果，我们讲一个页面拆分成一个个小的功能块，每个功能块完成属于自己这部分独立的功能，那么之后整个页面的管理和维护就变得非常容易了。</p><h2 id="🚩-Vue-组件化思想"><a href="#🚩-Vue-组件化思想" class="headerlink" title="🚩  Vue 组件化思想"></a>🚩  Vue 组件化思想</h2><p> 🔺 组件化是<code>Vue.js</code>中的重要思想。它提供了一种抽象，让我们可以开发出一个个独立可复用的小组件来构造我们的应用。任何的应用都会被抽象成一颗组件树。</p><p> 🔺组件化思想的应用：有了组件化的思想，我们在之后的开发中就要充分的利用它。尽可能的将页面拆分成一个个小的、可复用的组件。这样让我们的代码更加方便组织和管理，并且扩展性也更强。所以，组件是<code>Vue</code>开发中，非常重要的一个篇章，要认真学习。</p><h2 id="🚩-组件的基本使用"><a href="#🚩-组件的基本使用" class="headerlink" title="🚩  组件的基本使用"></a>🚩  组件的基本使用</h2><p> 🔺 组件的使用分成三个步骤：</p><ul><li><p>创建组件构造器</p></li><li><p>注册组件</p></li><li><p>使用组件</p></li></ul><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>   <span class="hljs-comment">&lt;!-- 3.使用组件 --&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">cpnc</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpnc</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">   <span class="hljs-comment">// 1.创建组件构造器对象</span></span><span class="actionscript">   <span class="hljs-keyword">const</span> cpnc = Vue.extend(&#123;</span>     template:`<span class="handlebars"><span class="xml">       <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><span class="handlebars"><span class="xml">         <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><span class="handlebars"><span class="xml">         <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>内容1...<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span></span><span class="handlebars"><span class="xml">         <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>内容2...<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span></span><span class="handlebars"><span class="xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`</span></span>   &#125;)<span class="actionscript">   <span class="hljs-comment">// 2.注册组件</span></span><span class="actionscript">   Vue.component(<span class="hljs-string">'my-cpn'</span>, cpnc)</span><span class="actionscript">   <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">     el:<span class="hljs-string">"#app"</span>,</span>     data:&#123;     &#125;,<span class="actionscript">     components:&#123;<span class="hljs-comment">//局部组件创建</span></span>       cpnc:cpnc     &#125;   &#125;) <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p> 👩注意👩:  组件是可复用的 <code>Vue</code>实例，且带有一个名字.在这个例子中是 <code>my-cpn</code>。我们可以在一个通过 <code>new Vue</code> 创建的 <code>Vue</code>根实例中，把这个组件作为自定义元素来使用： <code>&lt;my-cpn&gt;&lt;/my-cpn&gt;</code>。</p><h2 id="🚩-创造组件构造器对象"><a href="#🚩-创造组件构造器对象" class="headerlink" title="🚩  创造组件构造器对象"></a>🚩  创造组件构造器对象</h2><p> 🔺 注册组件</p><ol><li><p>全局注册，通过 <code>Vue.component</code>。</p></li><li><p>局部注册，通过 <code>components:{cpnc:cpnc}</code>。</p><p>🔺 使用组件</p><p>像使用html标签一样使用。</p></li></ol><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 3.使用组件 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">cpnc</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpnc</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre><h2 id="🚩-全局组件和局部组件"><a href="#🚩-全局组件和局部组件" class="headerlink" title="🚩 全局组件和局部组件"></a>🚩 全局组件和局部组件</h2><p>🔺  组件的注册方式有两种，一种是全局组件，一种是局部组件。</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>全局组件<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>局部组件<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">cpnc</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpnc</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">   <span class="hljs-comment">// 1.创建组件构造器对象</span></span><span class="actionscript">   <span class="hljs-keyword">const</span> cpnc = Vue.extend(&#123;</span>     template:`<span class="handlebars"><span class="xml">       <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><span class="handlebars"><span class="xml">         <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><span class="handlebars"><span class="xml">         <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>内容1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><span class="handlebars"><span class="xml">         <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>内容2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><span class="handlebars"><span class="xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`</span></span>   &#125;)<span class="actionscript">   <span class="hljs-comment">// 2.注册组件（全局组件，可以在多个vue实例中使用）</span></span><span class="actionscript">   Vue.component(<span class="hljs-string">'my-cpn'</span>, cpnc)</span><span class="actionscript">   <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">     el:<span class="hljs-string">"#app"</span>,</span><span class="actionscript">     components:&#123;<span class="hljs-comment">//局部组件创建</span></span>       cpnc:cpnc     &#125;   &#125;) <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>🔺  全局组件</p><p> 全局组件，可以在多个<code>vue</code>实例中使用，类似于全局变量。</p><p>👩注意👩: 使用<code>Vue.component(&#39;my-cpn&#39;, cpnc)</code>方式注册，直接使用<code>&lt;my-cpn&gt;&lt;/my-cpn&gt;</code>调用。<code>my-cpn</code>是全局组件的名字，<code>cpnc</code>是定义的组件对象。</p><p>🔺  局部组件</p><p>局部组件，只能在当前<code>vue</code>实例挂载的对象中使用，类似于局部变量，有块级作用域。</p><p>注册方式：</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;      el:<span class="hljs-string">"#app"</span>,      components:&#123;<span class="hljs-comment">//局部组件创建</span>        cpnc:cpnc      &#125;    &#125;)</code></pre><p>👩注意👩: 使用方式与全局变量一样，直接使用<code>&lt;cpnc&gt;&lt;/cpnc&gt;</code>调用。<code>cpnc:cpnc</code>，第一个<code>cpnc</code>是给组件命名的名字，第二个是定义的组件对象。如果俩个同名也可以直接使用<code>es6</code>语法：</p><pre><code class="hljs javascript">components:&#123;<span class="hljs-comment">//局部组件创建</span>        cpnc&#125;</code></pre><h2 id="🚩-父组件与子组件的区别"><a href="#🚩-父组件与子组件的区别" class="headerlink" title="🚩 父组件与子组件的区别"></a>🚩 父组件与子组件的区别</h2><p>🔺  组件的注册方式有两种，一种是全局组件，一种是局部组件。</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn2</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-comment">// 1.创建组件构造器对象</span></span><span class="actionscript">    <span class="hljs-keyword">const</span> cpn1 = Vue.extend(&#123;</span>      template:`<span class="handlebars"><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><span class="handlebars"><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>标题1<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><span class="handlebars"><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>组件1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><span class="handlebars"><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`</span></span>    &#125;)<span class="actionscript">    <span class="hljs-comment">// 组件2中使用组件1</span></span><span class="actionscript">    <span class="hljs-keyword">const</span> cpn2 = Vue.extend(&#123;</span>      template:`<span class="handlebars"><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><span class="handlebars"><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>标题2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><span class="handlebars"><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>组件2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><span class="handlebars"><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">cpn1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn1</span>&gt;</span></span></span><span class="handlebars"><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`,</span></span>      components:&#123;        cpn1:cpn1      &#125;    &#125;)<span class="actionscript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">      el:<span class="hljs-string">"#app"</span>,</span><span class="actionscript">      components:&#123;<span class="hljs-comment">//局部组件创建</span></span>        cpn2:cpn2      &#125;    &#125;)  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>上述代码中定义了两个组件对象<code>cpn1</code>和<code>cpn2</code>，在组件<code>cpn2</code>中使用局部组件注册了<code>cpn1</code>，并在<code>template</code>中使用了注册的<code>cpn1</code>，然后在<code>vue</code>实例中使用注册了局部组件<code>cpn2</code>，在<code>vue</code>实例挂载的<code>div</code>中调用了<code>cpn2</code>，<code>cpn2</code>与<code>cpn1</code>形成父子组件关系。</p><p>👩注意👩: 组件就是一个<code>vue</code>实例，<code>vue</code>实例的属性，组件也可以有，例如<code>data</code>、<code>methods</code>、<code>computed</code>等。</p><h2 id="🚩-注册组件的语法糖"><a href="#🚩-注册组件的语法糖" class="headerlink" title="🚩 注册组件的语法糖"></a>🚩 注册组件的语法糖</h2><p>🔺  组件的注册方式有两种，一种是全局组件，一种是局部组件。</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn1</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn2</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-comment">// 1.注册全局组件语法糖</span></span><span class="actionscript">    Vue.component(<span class="hljs-string">'cpn1'</span>, &#123;</span>      template:`<span class="handlebars"><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><span class="handlebars"><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>全局组件语法糖<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><span class="handlebars"><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>全局组件语法糖<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><span class="handlebars"><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`</span></span>    &#125;)<span class="actionscript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">      el:<span class="hljs-string">"#app"</span>,</span><span class="actionscript">      components:&#123;<span class="hljs-comment">//局部组件创建</span></span>        cpn2:&#123;          template:`<span class="handlebars"><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><span class="handlebars"><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>局部组件语法糖<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><span class="handlebars"><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>局部组件语法糖<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><span class="handlebars"><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`</span></span>        &#125;      &#125;    &#125;)  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>👩注意👩: 注册组件时候可以不实例化组件对象，直接在注册的时候实例化。<code>{}</code>就是一个组件对象。</p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue 笔记整理09</title>
    <link href="/2020/05/04/vue9/"/>
    <url>/2020/05/04/vue9/</url>
    
    <content type="html"><![CDATA[<h1 id="（九）综合练习"><a href="#（九）综合练习" class="headerlink" title="（九）综合练习"></a>（九）综合练习</h1><h2 id="🚩-图书馆购物车案例"><a href="#🚩-图书馆购物车案例" class="headerlink" title="🚩  图书馆购物车案例"></a>🚩  图书馆购物车案例</h2><p> 🔺 综合前面的知识，需要通过一个小demo来串联起知识。</p><p> 🔺 点击“+”按钮，总价增加，点击“-”按钮总价减少，点击移除，移除当列。</p><p>🔺   HTML代码：</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>图书购物车小案例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"style.css"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>书籍名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>出版日期<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>价格<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>购买数量<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(book, index) in books"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"index"</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;index&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;book.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;book.beginDate&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;book.price | showPrice&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"decrement(index)"</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">"book.count&lt;=1"</span> &gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>            &#123;&#123;book.count&#125;&#125;            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"increment(index)"</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>          <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"remove"</span>&gt;</span>移除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>总价：&#123;&#123;totalPrice | showPrice&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>  <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"main.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>👩注意👩: 使用计算属性记录总价，使用<code>v-for</code>循环遍历数组变量，使用<code>table</code>输出到<code>html</code>页面上。</p><p>🔺  JavaScript代码</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;  el: <span class="hljs-string">"#app"</span>,  data: &#123;    books: [&#123;        name: <span class="hljs-string">"《算法导论》"</span>,        beginDate: <span class="hljs-string">"2006-9"</span>,        price: <span class="hljs-number">85.00</span>,        count: <span class="hljs-number">1</span>      &#125;,      &#123;        name: <span class="hljs-string">"《UNIX编程艺术》"</span>,        beginDate: <span class="hljs-string">"2006-2"</span>,        price: <span class="hljs-number">59.00</span>,        count: <span class="hljs-number">1</span>      &#125;,      &#123;        name: <span class="hljs-string">"《编程大全》"</span>,        beginDate: <span class="hljs-string">"2008-10"</span>,        price: <span class="hljs-number">39.00</span>,        count: <span class="hljs-number">1</span>      &#125;,      &#123;        name: <span class="hljs-string">"《代码大全》"</span>,        beginDate: <span class="hljs-string">"2006-3"</span>,        price: <span class="hljs-number">128.00</span>,        count: <span class="hljs-number">1</span>      &#125;,    ]  &#125;,  computed: &#123;    totalPrice () &#123;        <span class="hljs-keyword">let</span> total = <span class="hljs-number">0</span>;        <span class="hljs-comment">//1.普通for循环</span>        <span class="hljs-comment">// for (let i = 0; i &lt; this.books.length; i++) &#123;</span>        <span class="hljs-comment">//   total = total + this.books[i].price * this.books[i].count</span>        <span class="hljs-comment">// &#125;</span>        <span class="hljs-comment">// 2.增强for循环</span>        <span class="hljs-comment">// for (let i in this.books) &#123;</span>        <span class="hljs-comment">//   total = total + this.books[i].price * this.books[i].count</span>        <span class="hljs-comment">// &#125;</span>        <span class="hljs-comment">// 3.for of</span>        <span class="hljs-comment">// for (const book of this.books) &#123;</span>        <span class="hljs-comment">//   total = total + book.price * book.count</span>        <span class="hljs-comment">// &#125;</span>        <span class="hljs-comment">// return total</span>        <span class="hljs-comment">// 2.使用高阶函数</span>        <span class="hljs-comment">// return this.books.map(function (book) &#123;</span>        <span class="hljs-comment">//   return book.price * book.count</span>        <span class="hljs-comment">//  &#125;).reduce(function (preValue,currentValue) &#123;</span>        <span class="hljs-comment">//     return preValue + currentValue</span>        <span class="hljs-comment">//   &#125;)</span>        <span class="hljs-comment">// 3.高阶函数简写（箭头函数）</span>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.books.map(<span class="hljs-function"><span class="hljs-params">book</span> =&gt;</span> book.price * book.count).reduce(<span class="hljs-function">(<span class="hljs-params">preValue,currentVlue</span>) =&gt;</span> preValue + currentVlue)      &#125;  &#125;,  methods: &#123;    increment(index)&#123;      <span class="hljs-keyword">this</span>.books[index].count++    &#125;,    decrement(index)&#123;      <span class="hljs-keyword">this</span>.books[index].count--    &#125;,    remove(index)&#123;      <span class="hljs-keyword">this</span>.books.splice(index,<span class="hljs-number">1</span>)    &#125;  &#125;,  filters:&#123;<span class="hljs-comment">//过滤器</span>    showPrice(price)&#123;      <span class="hljs-keyword">return</span> <span class="hljs-string">"￥"</span> + price.toFixed(<span class="hljs-number">2</span>)    &#125;  &#125;&#125;)<span class="hljs-comment">// 1.filter过滤函数</span><span class="hljs-keyword">const</span> nums = [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">77</span>,<span class="hljs-number">55</span>,<span class="hljs-number">100</span>,<span class="hljs-number">200</span>]<span class="hljs-comment">//要求获取nums中大于50的数</span><span class="hljs-comment">//回调函数会遍历nums中每一个数，传入回调函数，在回调函数中写判断逻辑，返回true则会被数组接收，false会被拒绝</span><span class="hljs-keyword">let</span> newNums = nums.filter(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">num</span>) </span>&#123;  <span class="hljs-keyword">if</span>(num &gt; <span class="hljs-number">50</span>)&#123;    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  &#125;  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; &#125;) <span class="hljs-comment">//可以使用箭头函数简写</span><span class="hljs-comment">//  let newNums = nums.filter(num =&gt; num &gt;50)</span> <span class="hljs-built_in">console</span>.log(newNums);<span class="hljs-comment">// 2.map高阶函数</span><span class="hljs-comment">// 要求将已经过滤的新数组每项乘以2</span><span class="hljs-comment">//map函数同样会遍历数组每一项，传入回调函数为参数，num是map遍历的每一项，回调函数function返回值会被添加到新数组中</span><span class="hljs-keyword">let</span> newNums2 = newNums.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">num</span>) </span>&#123;  <span class="hljs-keyword">return</span> num * <span class="hljs-number">2</span> &#125;) <span class="hljs-comment">//简写</span><span class="hljs-comment">//  let newNums2 = newNums.map(num =&gt; num * 2)</span><span class="hljs-built_in">console</span>.log(newNums2);<span class="hljs-comment">// 3.reduce高阶函数</span><span class="hljs-comment">//要求将newNums2的数组所有数累加</span><span class="hljs-comment">//reduce函数同样会遍历数组每一项，传入回调函数和‘0’为参数，0表示回调函数中preValue初始值为0，回调函数中参数preValue是每一次回调函数function返回的值，currentValue是当前值</span><span class="hljs-comment">//例如数组为[154, 110, 200, 400],则回调函数第一次返回值为0+154=154，第二次preValue为154，返回值为154+110=264，以此类推直到遍历完成</span><span class="hljs-keyword">let</span> newNum = newNums2.reduce(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">preValue,currentValue</span>) </span>&#123;  <span class="hljs-keyword">return</span> preValue + currentValue &#125;,<span class="hljs-number">0</span>)<span class="hljs-comment">//简写</span><span class="hljs-comment">// let newNum = newNums2.reduce((preValue,currentValue) =&gt; preValue + currentValue)</span><span class="hljs-built_in">console</span>.log(newNum);<span class="hljs-comment">//三个需求综合</span><span class="hljs-keyword">let</span> n = nums.filter(<span class="hljs-function"><span class="hljs-params">num</span> =&gt;</span> num &gt; <span class="hljs-number">50</span>).map(<span class="hljs-function"><span class="hljs-params">num</span> =&gt;</span> num * <span class="hljs-number">2</span>).reduce(<span class="hljs-function">(<span class="hljs-params">preValue,currentValue</span>) =&gt;</span> preValue + currentValue)<span class="hljs-built_in">console</span>.log(n);</code></pre><p>👩注意👩: 使用<code>books</code>数组对象记录<code>book</code>数据，使用<code>totalPrice</code>计算属性计算总价。</p><ol><li><p>使用普通<code>for</code>循环</p></li><li><p>使用增强<code>for</code>循环数组索引</p></li><li><p>使用<code>for of</code>，直接循环数组内的对象</p></li><li><p>使用高阶函数<code>map</code>对象计算每个<code>book</code>对象的总价，在使用<code>reduce</code>累加总价。</p></li></ol><p>🔺  CSS代码如下：</p><pre><code class="hljs css"><span class="hljs-selector-tag">table</span>&#123;  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span>;  <span class="hljs-attribute">border-collapse</span>: collapse;  <span class="hljs-attribute">border-spacing</span>: <span class="hljs-number">0</span>;&#125;<span class="hljs-selector-tag">th</span>,<span class="hljs-selector-tag">td</span>&#123;  <span class="hljs-attribute">padding</span>: <span class="hljs-number">8px</span> <span class="hljs-number">16px</span>;  <span class="hljs-attribute">border</span>: ipx solid <span class="hljs-number">#e9e9e9</span>;  <span class="hljs-attribute">text-align</span>: left;&#125;<span class="hljs-selector-tag">th</span>&#123;  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f7f7f7</span>;  <span class="hljs-attribute">color</span>: <span class="hljs-number">#5c6b77</span>;  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">600</span>;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue 笔记整理08</title>
    <link href="/2020/05/03/vue8/"/>
    <url>/2020/05/03/vue8/</url>
    
    <content type="html"><![CDATA[<h1 id="八、表单绑定v-model"><a href="#八、表单绑定v-model" class="headerlink" title="八、表单绑定v-model"></a>八、表单绑定v-model</h1><h2 id="🚩-v-model的基本使用"><a href="#🚩-v-model的基本使用" class="headerlink" title="🚩  v-model的基本使用"></a>🚩  v-model的基本使用</h2><p>🔺  表单控件在实际开发中是非常常见的。特别是对于用户信息的提交，需要大量的表单。</p><p>🔺  <code>Vue</code>中使用<code>v-model</code>指令来实现表单元素和数据的双向绑定。</p><p>🔺  案例的解析：</p><p>当我们在输入框输入内容时,因为<code>input</code>中的<code>v-model</code>绑定了<code>message</code>，所以会实时将输入的内容传递给<code>message</code>，<code>message</code>发生改变。当<code>message</code>发生改变时，因为上面我们使用<code>Mustache</code>语法，将<code>message</code>的值插入到DOM中，所以DOM会发生响应的改变。所以，通过<code>v-model</code>实现了双向的绑定。当然，我们也可以将<code>v-model</code>用于<code>textarea</code>元素。</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>   <span class="hljs-comment">&lt;!-- 输入框内容修改，message也修改，修改message，input内容也修改，双向绑定 --&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"message"</span>&gt;</span>&#123;&#123;message&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">   <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">     el:<span class="hljs-string">"#app"</span>,</span>     data:&#123;<span class="actionscript">       message:<span class="hljs-string">"zzz"</span></span>     &#125;   &#125;) <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>👩注意👩:<code>v-model</code>双向绑定，既输入框的<code>value</code>改变，对应的<code>message</code>对象值也会改变，修改<code>message</code>的值，<code>input</code>的<code>value</code>也会随之改变。无论改变那个值，另外一个值都会变化。</p><h2 id="🚩-v-model原理"><a href="#🚩-v-model原理" class="headerlink" title="🚩  v-model原理"></a>🚩  v-model原理</h2><p>🔺 <code>v-model</code>其实是一个语法糖，它的背后本质上是包含两个操作：</p><p>1.<code>v-bind</code>绑定一个<code>value</code>属性</p><p>2.<code>v-on</code>指令给当前元素绑定<code>input</code>事件</p><p>也就是说下面的代码：等同于下面的代码：</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"message"</span>&gt;</span></code></pre><p>等同于</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-bind:value</span>=<span class="hljs-string">"message"</span> <span class="hljs-attr">v-on:input</span>=<span class="hljs-string">"message = $event.target.value"</span>&gt;</span></code></pre><p>🔺 先来一个demo实现不使用v-model实现双向绑定。</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>   <span class="hljs-comment">&lt;!-- v-model = v-bind + v-on --&gt;</span>   <span class="hljs-comment">&lt;!-- 输入框内容修改，message也修改，修改message，input内容也修改，双向绑定 --&gt;</span>   <span class="hljs-comment">&lt;!-- &lt;input type="text" v-model="message"&gt; --&gt;</span>   <span class="hljs-comment">&lt;!-- 实现双向绑定 @input监听输入框事件  --&gt;</span>   <span class="hljs-comment">&lt;!-- &lt;input type="text" :value="message" @input="valueChange" &gt; --&gt;</span>   <span class="hljs-comment">&lt;!-- $event获取事件对象，$event.target.value获取input值 --&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">"message"</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">"valueChange($event.target.value)"</span>&gt;</span>   &#123;&#123;message&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">script</span>  <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">   <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">     el:<span class="hljs-string">"#app"</span>,</span>     data:&#123;<span class="actionscript">       message:<span class="hljs-string">"zzz"</span></span>     &#125;,     methods:&#123;<span class="actionscript">       <span class="hljs-comment">// valueChange(event)&#123;</span></span><span class="actionscript">       <span class="hljs-comment">//   console.log("input值改变了");</span></span><span class="actionscript">       <span class="hljs-comment">//   this.message = event.target.value</span></span><span class="actionscript">       <span class="hljs-comment">// &#125;,</span></span>       valueChange(value)&#123;<span class="javascript">         <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"input值改变了"</span>);</span><span class="actionscript">         <span class="hljs-keyword">this</span>.message = value</span>       &#125;     &#125;   &#125;) <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>👩注意👩:</p><pre><code class="hljs html">v-model = v-bind + v-on</code></pre><p>实现双向绑定需要是用<code>v-bind</code>和<code>v-on</code>，使用<code>v-bind</code>给<code>input</code>的<code>value</code>绑定<code>message</code>对象，此时<code>message</code>对象改变，<code>input</code>的值也会改变。但是改变<code>input</code>的<code>value</code>并不会改变<code>message</code>的值，此时需要一个<code>v-on</code>绑定一个方法，监听事件，当<code>input</code>的值改变的时候，将最新的值赋值给<code>message</code>对象。<code>$event</code>获取事件对象，<code>target</code>获取监听的对象Dom，<code>value</code>获取最新的值。</p><h2 id="🚩-v-model结合radio类型使用"><a href="#🚩-v-model结合radio类型使用" class="headerlink" title="🚩  v-model结合radio类型使用"></a>🚩  v-model结合radio类型使用</h2><p>🔺  <code>radio</code>单选框的<code>name</code>属性是互斥的，如果使用<code>v-model</code>，可以不使用<code>name</code>就可以互斥。</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    <span class="hljs-comment">&lt;!-- name属性radio互斥 使用v-model可以不用name就可以互斥 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"male"</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"male"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sex"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"男"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"sex"</span>&gt;</span>男    <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"female"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"female"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sex"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"女"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"sex"</span>&gt;</span>女    <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>你选择的性别是：&#123;&#123;sex&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">      el:<span class="hljs-string">"#app"</span>,</span>      data:&#123;<span class="actionscript">        message:<span class="hljs-string">"zzz"</span>,</span><span class="actionscript">        sex:<span class="hljs-string">"男"</span></span>      &#125;,    &#125;)  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>👩注意👩: <code>v-model</code>绑定<code>sex</code>属性，初始值为“男”，选择女后<code>sex</code>属性变成“女”，因为此时是双向绑定。</p><h2 id="🚩-v-model结合checkbox类型"><a href="#🚩-v-model结合checkbox类型" class="headerlink" title="🚩 v-model结合checkbox类型"></a>🚩 v-model结合checkbox类型</h2><p>🔺 <code>checkbox</code>可以结合<code>v-model</code>做单选框，也可以多选框。</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-model结合checkbox类型<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    <span class="hljs-comment">&lt;!-- checkbox单选框 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>单选框<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"agree"</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"agree"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"isAgree"</span>&gt;</span>同意协议    <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>你选择的结果是：&#123;&#123;isAgree&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">"!isAgree"</span>&gt;</span>下一步<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>    <span class="hljs-comment">&lt;!-- checkbox多选框 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>多选框<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">:for</span>=<span class="hljs-string">"item"</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(item, index) in oriHobbies"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"index"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"hobby"</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">"item"</span> <span class="hljs-attr">:id</span>=<span class="hljs-string">"item"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"hobbies"</span>&gt;</span>&#123;&#123;item&#125;&#125;      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>      <span class="hljs-comment">&lt;!-- &lt;input type="checkbox" name="hobby" value="篮球" v-model="hobbies"&gt;篮球</span><span class="hljs-comment">      &lt;input type="checkbox" name="hobby" value="足球" v-model="hobbies"&gt;足球</span><span class="hljs-comment">      &lt;input type="checkbox" name="hobby" value="羽毛球"  v-model="hobbies"&gt;羽毛球</span><span class="hljs-comment">      &lt;input type="checkbox" name="hobby" value="乒乓球"  v-model="hobbies"&gt;乒乓球 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>你的爱好是：&#123;&#123;hobbies&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">      el:<span class="hljs-string">"#app"</span>,</span>      data:&#123;<span class="actionscript">        message:<span class="hljs-string">"zzz"</span>,</span><span class="actionscript">        isAgree:<span class="hljs-literal">false</span>,</span>        hobbies:[],<span class="actionscript">        oriHobbies:[<span class="hljs-string">"篮球"</span>,<span class="hljs-string">"足球"</span>,<span class="hljs-string">"羽毛球"</span>,<span class="hljs-string">"乒乓球"</span>]</span>      &#125;,    &#125;)  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>👩注意👩:</p><ol><li><p><code>checkbox</code>结合<code>v-model</code>实现单选框，定义变量<code>isAgree</code>初始化为<code>false</code>，点击<code>checkbox</code>的值为<code>true</code>，<code>isAgree</code>也是<code>true</code>。</p></li><li><p><code>checkbox</code>结合<code>v-model</code>实现多选框，定义数组对象<code>hobbies</code>，用于存放爱好，将<code>hobbies</code>与<code>checkbox</code>对象双向绑定，此时选中，一个多选框，就多一个<code>true</code>，<code>hobbies</code>就添加一个对象。</p></li></ol><h2 id="🚩-v-model结合select类型"><a href="#🚩-v-model结合select类型" class="headerlink" title="🚩   v-model结合select类型"></a>🚩   v-model结合select类型</h2><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-model结合select类型<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    <span class="hljs-comment">&lt;!-- select单选 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"fruit"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"fruit"</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"苹果"</span>&gt;</span>苹果<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"香蕉"</span>&gt;</span>香蕉<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"西瓜"</span>&gt;</span>西瓜<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>你选择的水果是：&#123;&#123;fruit&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-comment">&lt;!-- select多选 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"fruits"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"fruits"</span> <span class="hljs-attr">multiple</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"苹果"</span>&gt;</span>苹果<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"香蕉"</span>&gt;</span>香蕉<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"西瓜"</span>&gt;</span>西瓜<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>你选择的水果是：&#123;&#123;fruits&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">      el:<span class="hljs-string">"#app"</span>,</span>      data:&#123;<span class="actionscript">        fruit:<span class="hljs-string">"苹果"</span>,</span>        fruits:[]      &#125;,    &#125;)  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></code></pre><p>👩注意👩: <code>v-model</code>结合<code>select</code>可以单选也可以多选。</p><h2 id="🚩-v-model的修饰符的使用"><a href="#🚩-v-model的修饰符的使用" class="headerlink" title="🚩   v-model的修饰符的使用"></a>🚩   v-model的修饰符的使用</h2><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-model修饰符<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>v-model修饰符<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>lazy,默认情况是实时更新数据，加上lazy，从输入框失去焦点，按下enter都会更新数据<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model.lazy</span>=<span class="hljs-string">"message"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>修饰符number,默认是string类型，使用number赋值为number类型<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"number"</span> <span class="hljs-attr">v-model.number</span>=<span class="hljs-string">"age"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;age&#125;&#125;--&#123;&#123;typeof age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>修饰符trim:去空格<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model.trim</span>=<span class="hljs-string">"name"</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">      el:<span class="hljs-string">"#app"</span>,</span>      data:&#123;<span class="actionscript">        message:<span class="hljs-string">"zzz"</span>,</span>        age:18,<span class="actionscript">        name:<span class="hljs-string">"ttt"</span></span>      &#125;,    &#125;)  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>👩注意👩:</p><ol><li><p><code>lazy</code>默认情况下是实时更新数据，加上<code>lazy</code>，从输入框失去焦点，按下<code>enter</code>都会更新数据。</p></li><li><p><code>number</code>,默认是string类型，使用<code>number</code>复制为<code>number</code>类型。</p></li><li><p><code>trim</code>用于 自动过滤用户输入的首尾空白字符 。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue 笔记整理07</title>
    <link href="/2020/05/02/vue7/"/>
    <url>/2020/05/02/vue7/</url>
    
    <content type="html"><![CDATA[<h1 id="七、循环遍历"><a href="#七、循环遍历" class="headerlink" title="七、循环遍历"></a>七、循环遍历</h1><h2 id="🚩-v-for遍历数组"><a href="#🚩-v-for遍历数组" class="headerlink" title="🚩  v-for遍历数组"></a>🚩  v-for遍历数组</h2><p>🔺 当我们有一组数据需要进行渲染时，我们就可以使用<code>v-for</code>来完成。<code>v-for</code>的语法类似于<code>JavaScript</code>中的<code>for</code>循环。格式如下：<code>item in items</code>的形式。</p><p>🔺 我们来看一个简单的案例：</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-for遍历数组<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 1.遍历过程没有使用索引（下标值） --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"item in names"</span> &gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 2.遍历过程有使用索引（下标值） --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(item,index) in names"</span>  &gt;</span>&#123;&#123;index+":"+item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">      el:<span class="hljs-string">"#app"</span>,</span>      data:&#123;<span class="actionscript">        names:[<span class="hljs-string">"zzz"</span>,<span class="hljs-string">"ttt"</span>,<span class="hljs-string">"yyy"</span>]</span>      &#125;    &#125;)  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>🔺 如果在遍历的过程中不需要使用索引值,则</p><pre><code class="hljs html">v-for="movie in movies"</code></pre><p>依次从<code>movies</code>中取出<code>movie</code>，并且在元素的内容中，我们可以使用<code>Mustache</code>语法，来使用<code>movie</code></p><p>如果在遍历的过程中，我们需要拿到元素在数组中的索引值呢？</p><p>语法格式：</p><pre><code class="hljs html">v-for=(item, index) in items</code></pre><p>其中的<code>index</code>就代表了取出的<code>item</code>在原数组的索引值。</p><p> 一般需要使用索引值。<code>&lt;li v-for=&quot;(item,index) in names&quot; &gt;undefined:undefined&lt;/li&gt;</code>index表示索引，item表示当前遍历的元素。</p><h2 id="🚩-v-for遍历对象"><a href="#🚩-v-for遍历对象" class="headerlink" title="🚩  v-for遍历对象"></a>🚩  v-for遍历对象</h2><p>🔺 <code>v-for</code>可以用于遍历对象：比如某个对象中存储着你的个人信息，我们希望以列表的形式显示出来。</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-for遍历对象<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 1.遍历过程没有使用index索引--&gt;</span>    <span class="hljs-comment">&lt;!-- 格式为：key-value --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(item,key) in user"</span> &gt;</span>&#123;&#123;key+"-"+item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 格式为：key-value-index --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(item,key,index) in user"</span> &gt;</span>&#123;&#123;key+"-"+item+"-"+index&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">      el:<span class="hljs-string">"#app"</span>,</span>      data:&#123;        user:&#123;<span class="actionscript">          name:<span class="hljs-string">"zzz"</span>,</span>          height:188,          age:24        &#125;      &#125;    &#125;)  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><blockquote><p>👩注意👩: 遍历过程没有使用index索引，<code>&lt;li v-for=&quot;(item,key) in user&quot; &gt;undefined-undefined&lt;/li&gt;</code>，item表示当前元素是属性值，<code>key</code>表示<code>user</code>对象属性名。 遍历过程使用<code>index</code>索引，<code>index</code>表示索引从0开始。</p></blockquote><h2 id="🚩-组件的key属性"><a href="#🚩-组件的key属性" class="headerlink" title="🚩 组件的key属性"></a>🚩 组件的key属性</h2><p>🔺 官方推荐我们在使用<code>v-for</code>时，给对应的元素或组件添加上一个<code>:key</code>属性。</p><p>🔺 为什么需要这个key属性呢（了解）？</p><p>这个其实和<code>Vue</code>的虚拟DOM的<code>Diff</code>算法有关系。这里我们借用<a href="https://link.zhihu.com/?target=https://calendar.perfplanet.com/2013/diff/">React’s</a><a href="https://link.zhihu.com/?target=https://calendar.perfplanet.com/2013/diff/"> diff algorithm</a>中的一张图来简单说明一下：当某一层有很多相同的节点时，也就是列表节点时，我们希望插入一个新的节点</p><p>我们希望可以在<code>B</code>和<code>C</code>之间加一个<code>F</code>，<code>Diff</code>算法默认执行起来是这样的。即把<code>C</code>更新成<code>F</code>，<code>D</code>更新成<code>C</code>，<code>E</code>更新成<code>D</code>，最后再插入<code>E</code>。</p><p>🔺 是不是很没有效率？</p><p>所以我们需要使用<code>key</code>来给每个节点做一个唯一标识.<code>Diff</code>算法就可以正确的识别此节点，找到正确的位置区插入新的节点。所以一句话，<code>key</code>的作用主要是为了高效的更新虚拟DOM。</p><p>🔺  <code>v-for</code>使用<code>key</code></p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-for使用key<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 不加key如果要插入f依次改变 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"item in letters"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"add1"</span>&gt;</span>没有key<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 加key如果要插入f使用diff算法高效,如果使用index做key一直变，所以item如果唯一可以使用item--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"item in letters"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"item"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"add2"</span>&gt;</span>有key<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">      el:<span class="hljs-string">"#app"</span>,</span>      data:&#123;<span class="actionscript">        letters:[<span class="hljs-string">'a'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'c'</span>,<span class="hljs-string">'d'</span>,<span class="hljs-string">'e'</span>]</span>      &#125;,      methods: &#123;        add1()&#123;<span class="actionscript">          <span class="hljs-keyword">this</span>.letters.splice(<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-string">'f'</span>)</span>        &#125;,        add2()&#123;<span class="actionscript">          <span class="hljs-keyword">this</span>.letters.splice(<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-string">'f'</span>)</span>        &#125;      &#125;    &#125;)  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><blockquote><p>👩注意👩: 不加key渲染时候会依次替换渲染，加了key会直接将其放在指定位置，加key提升效率。</p></blockquote><h2 id="🚩-检测数组更新"><a href="#🚩-检测数组更新" class="headerlink" title="🚩  检测数组更新"></a>🚩  检测数组更新</h2><p>🔺 因为<code>Vue</code>是响应式的，所以当数据发生变化时，<code>Vue</code>会自动检测数据变化，视图会发生对应的更新。<code>Vue</code>中包含了一组观察数组编译的方法，使用它们改变数组也会触发视图的更新。</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>数组的响应式方法 <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 数组的响应式方法 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"item in letters"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"btn1"</span>&gt;</span>push<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"btn2"</span>&gt;</span>通过索引值修改数组<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">      el:<span class="hljs-string">"#app"</span>,</span>      data:&#123;<span class="actionscript">        letters:[<span class="hljs-string">'a'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'c'</span>,<span class="hljs-string">'d'</span>,<span class="hljs-string">'e'</span>]</span>      &#125;,      methods: &#123;        btn1()&#123;<span class="actionscript">          <span class="hljs-comment">//1.push</span></span><span class="actionscript">          <span class="hljs-keyword">this</span>.letters.push(<span class="hljs-string">'f'</span>)</span><span class="actionscript">          <span class="hljs-comment">//2.pop()删除最后一个元素</span></span><span class="actionscript">          <span class="hljs-comment">//this.letters.pop()</span></span><span class="actionscript">          <span class="hljs-comment">//3.shift()删除第一个</span></span><span class="actionscript">          <span class="hljs-comment">//this.letters.shift()</span></span><span class="actionscript">          <span class="hljs-comment">//4.unshift()添加在最前面,可以添加多个</span></span><span class="actionscript">          <span class="hljs-comment">//this.letters.unshift('aaa','bbb','ccc')</span></span><span class="actionscript">          <span class="hljs-comment">//5.splice():删除元素/插入元素/替换元素</span></span><span class="actionscript">          <span class="hljs-comment">//splice(1,1)再索引为1的地方删除一个元素,第二个元素不传，直接删除后面所有元素</span></span><span class="actionscript">          <span class="hljs-comment">//splice(index,0,'aaa')再索引index后面删除0个元素，加上'aaa',</span></span><span class="actionscript">          <span class="hljs-comment">//splice(1,1,'aaa')替换索引为1的后一个元素为'aaa'</span></span><span class="actionscript">          <span class="hljs-comment">// this.letters.splice(2,0,'aaa')</span></span><span class="actionscript">          <span class="hljs-comment">//6.sort()排序可以传入一个函数</span></span><span class="actionscript">          <span class="hljs-comment">//this.letters.sort()</span></span><span class="actionscript">          <span class="hljs-comment">//7.reverse()反转</span></span><span class="actionscript">          <span class="hljs-comment">// this.letters.reverse()</span></span>        &#125;,        btn2()&#123;<span class="actionscript">          <span class="hljs-keyword">this</span>.letters[<span class="hljs-number">0</span>]=<span class="hljs-string">'f'</span></span>        &#125;      &#125;    &#125;)  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><blockquote><p>👩注意👩: <code>btn2</code>按钮是通过索引值修改数组的值，这种情况，数组<code>letters</code>变化，DOM不会变化。而数组的方法，例如<code>push()</code>、<code>pop()</code>、<code>shift()</code>、<code>unshift()</code>、<code>splice()</code>、<code>sort()</code>、<code>reverse()</code>等方法修改数组的数据，DOM元素会随之修改。</p><p><code>splic()</code>：删除元素、插入元素、替换元素</p><p><code>splice(1,1)</code>:再索引为1的地方删除一个元素,第二个元素不传，直接删除后面所有元素</p><p><code>splice(index,0,&#39;aaa&#39;)</code>再索引index后面删除0个元素，加上<code>&#39;aaa&#39;</code></p><p><code>`splice(1,1,&#39;aaa&#39;)</code>替换索引为1的后一个元素为<code>&#39;aaa&#39;</code></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue 笔记整理06</title>
    <link href="/2020/05/01/vue6/"/>
    <url>/2020/05/01/vue6/</url>
    
    <content type="html"><![CDATA[<h1 id="六、条件判断"><a href="#六、条件判断" class="headerlink" title="六、条件判断"></a>六、条件判断</h1><h2 id="🚩-v-if、v-else-if、v-else"><a href="#🚩-v-if、v-else-if、v-else" class="headerlink" title="🚩  v-if、v-else-if、v-else"></a>🚩  v-if、v-else-if、v-else</h2><p>🔺 这三个指令与<code>JavaScript</code>的条件语句<code>if</code>、<code>else</code>、<code>else if</code>类似。<code>Vue</code>的条件指令可以根据表达式的值在DOM中渲染或销毁元素或组件。</p><p>🔺<code>v-if</code>的原理：<code>v-if</code>后面的条件为<code>false</code>时，对应的元素以及其子元素不会渲染，也就是根本没有不会有对应的标签出现在DOM中。</p><p>🔺<code>v-show</code>的用法和<code>v-if</code>非常相似，也用于决定一个元素是否渲染。<code>v-if</code>和<code>v-show</code>对比：</p><p>🔺<code>v-if</code>和<code>v-show</code>都可以决定一个元素是否渲染，那么开发中我们如何选择呢？</p><ul><li><p><code>v-if</code>当条件为<code>false</code>时，压根不会有对应的元素在DOM中。</p></li><li><p><code>v-show</code>当条件为<code>false</code>时，仅仅是将元素的<code>display</code>属性设置为<code>none</code>而已。</p></li></ul><p>🔺 开发中如何选择呢？</p><ul><li><p>当需要在显示与隐藏之间切片很频繁时，使用<code>v-show</code>。</p></li><li><p>当只有一次切换时，通过使用<code>v-if</code>。</p></li></ul><h2 id="🚩-v-if"><a href="#🚩-v-if" class="headerlink" title="🚩  v-if"></a>🚩  v-if</h2><p>🔺<code>v-if</code>用于条件判断，判断DOM元素是否显示。</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-if使用<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"isFlag"</span>&gt;</span>isFlag为true显示这个<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">"isShow"</span>&gt;</span>isShow为true是显示这个<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"age&lt;18"</span>&gt;</span>小于18岁未成年<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">"age&lt;60"</span>&gt;</span>大于18岁小于60岁正值壮年<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else</span>=<span class="hljs-string">""</span>&gt;</span>大于60岁,暮年<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">      el:<span class="hljs-string">"#app"</span>,</span>      data:&#123;<span class="actionscript">        isFlag:<span class="hljs-literal">true</span>,</span><span class="actionscript">        isShow:<span class="hljs-literal">false</span>,</span>        age:66      &#125;    &#125;)  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><blockquote><p>👩注意👩:</p><ul><li><p>单独使用<code>v-if</code>，变量为布尔值，为<code>true</code>才渲染Dom</p></li><li><p><code>v-show</code>的变量也是布尔值，为<code>true</code>才显示内容，类似<code>css</code>的<code>display</code></p></li><li><code>v-if</code>、<code>v-else</code>、<code>v-else-if</code>联合使用相当于<code>if</code>、<code>else if</code>、<code>else</code>，但是在条件比较多的时候建议使用计算属性。</li></ul></blockquote><h2 id="🚩-v-if-的Demo"><a href="#🚩-v-if-的Demo" class="headerlink" title="🚩  v-if 的Demo"></a>🚩  v-if 的Demo</h2><p>🔺 在登录网站是经常可以选择使用账户名或者邮箱登录的切换按钮，要求点击按钮切换登录方式。</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-if的Demo<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"isUser"</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"username"</span>&gt;</span>用户账号<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"请输入用户名"</span> &gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-else</span>=<span class="hljs-string">"isUser"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"email"</span>&gt;</span>用户邮箱<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"email"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"请输入用户邮箱"</span> &gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"isUser=!isUser"</span>&gt;</span>切换类型<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">      el:<span class="hljs-string">"#app"</span>,</span>      data:&#123;<span class="actionscript">        isUser:<span class="hljs-literal">true</span></span>      &#125;    &#125;)  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><blockquote><p>👩注意👩:使用<code>v-if</code>和<code>v-else</code>选择渲染指定的Dom，点击按钮对<code>isUser</code>变量取反。</p><p>>但是 这里有个小问题，如果已经输入了账号了，此时想切换到邮箱输入，输入框未自己清空。</p><p>这里需要了解一下<code>Vue</code>底层操作，此时<code>input</code>输入框值被复用了。</p><ul><li><p><code>Vue</code>在进行DOM渲染时，处于性能考虑，会复用已经存在的元素，而不是每次都创建新的DOM元素。</p></li><li><p>在上面demo中，<code>Vue</code>内部发现原来的<code>input</code>元素不再使用，所以直接将其映射对应虚拟DOM，用来复用。</p></li><li><p>如果不希望出现类似复用问题，可以给对应的DOM元素加上<code>key</code>值，并保证<code>key</code>不同。</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"请输入用户名"</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"username"</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"email"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"请输入用户邮箱"</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"email"</span>&gt;</span></code></pre></li></ul></blockquote><h2 id="🚩-v-show"><a href="#🚩-v-show" class="headerlink" title="🚩  v-show"></a>🚩  v-show</h2><p>🔺 <code>v-if</code>看似和<code>v-show</code>实现一样的效果，但是内部<code>v-show</code>只是用<code>css</code>将操作的元素隐藏显示，而<code>v-if</code>是新增和删除元素。<code>v-show</code>只是操作元素的<code>style</code>属性<code>display</code>，都没会被创建。</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>V-show<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">"isFlag"</span>&gt;</span>v-show只是操作元素的style属性display，都没会被创建<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"isFlag"</span>&gt;</span>v-if是新增和删除dom元素<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">      el:<span class="hljs-string">"#app"</span>,</span>      data:&#123;<span class="actionscript">        isFlag:<span class="hljs-literal">true</span></span>      &#125;    &#125;)  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue 整理笔记05</title>
    <link href="/2020/04/30/vue5/"/>
    <url>/2020/04/30/vue5/</url>
    
    <content type="html"><![CDATA[<h1 id="五、事件监听"><a href="#五、事件监听" class="headerlink" title="五、事件监听"></a>五、事件监听</h1><h2 id="🚩-如何监听事件？"><a href="#🚩-如何监听事件？" class="headerlink" title="🚩 如何监听事件？"></a>🚩 如何监听事件？</h2><p>🔺  在前端开发中，我们需要经常和用于交互。这个时候，我们就必须监听用户发生的时间，比如点击、拖拽、键盘事件等等。在<code>Vue</code>中如何监听事件呢？使用<code>v-on</code>指令。</p><h2 id="🚩-v-on-介绍"><a href="#🚩-v-on-介绍" class="headerlink" title="🚩 v-on 介绍"></a>🚩 v-on 介绍</h2><p>🔺 <code>v-on</code>介绍</p><ul><li><p><strong>作用</strong>：绑定事件监听器</p></li><li><p><strong>缩写</strong>：<code>@</code></p></li><li><p><strong>预期</strong>：<code>Function | Inline Statement | Object</code></p></li><li><p><strong>参数</strong>：<code>event</code></p></li></ul><p>🔺 下面，我们就具体来学习<code>v-on</code>的使用。</p><h2 id="🚩-v-on-基础"><a href="#🚩-v-on-基础" class="headerlink" title="🚩 v-on 基础"></a>🚩 v-on 基础</h2><p>🔺 这里，我们用一个监听按钮的点击事件，来简单看看<code>v-on</code>的使用。</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-on基本使用<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;counter&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-bind:title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">:title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">"counter++"</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">"counter<span class="hljs-symbol">&amp;#45;</span><span class="hljs-symbol">&amp;#45;</span>"</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">"increment"</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">"decrement"</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"increment"</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"decrement"</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">    el: <span class="hljs-string">'#app'</span>,</span>    data: &#123;      counter: 0    &#125;,    methods: &#123;      increment() &#123;<span class="actionscript">        <span class="hljs-keyword">this</span>.counter++</span>      &#125;,      decrement() &#123;<span class="actionscript">        <span class="hljs-keyword">this</span>.counter--</span>      &#125;    &#125;  &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>🔺 上面面的代码中，第十三行我们使用了v-on。</p><pre><code class="hljs html">v-on:click="counter++</code></pre><p>🔺 另外，我们可以像28-33行那样将事件指向一个在<code>methods</code>中定义的函数。</p><blockquote><p>👩注意👩:v-on也有对应的语法糖：<code>v-on:click</code>可以写成@click，如17/18行这样写。</p></blockquote><h2 id="🚩-v-on-参数"><a href="#🚩-v-on-参数" class="headerlink" title="🚩 v-on 参数"></a>🚩 v-on 参数</h2><p>🔺 当通过<code>methods</code>中定义方法，以供<code>@click</code>调用时，需要<strong>注意参数问题</strong>：</p><ul><li>情况一：如果该方法不需要额外参数，那么方法后的<code>()</code>可以不添加。</li></ul><blockquote><p>👩注意👩：如果方法本身中有一个参数，那么会默认将原生事件<code>event</code>参数传递进去.</p></blockquote><ul><li>情况二：如果需要同时传入某个参数，同时需要<code>event</code>时，可以通过<code>$event</code>传入事件</li></ul><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-on参数<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-comment">&lt;!--1.事件调用的方法没有参数--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"btn1Click()"</span>&gt;</span>按钮1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"btn1Click"</span>&gt;</span>按钮1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <span class="hljs-comment">&lt;!--2.在事件定义时, 写方法时省略了小括号, 但是方法本身是需要一个参数的, 这个时候, Vue会默认将浏览器生产的event事件对象作为参数传入到方法--&gt;</span>  <span class="hljs-comment">&lt;!--&lt;button @click="btn2Click(123)"&gt;按钮2&lt;/button&gt;--&gt;</span>  <span class="hljs-comment">&lt;!--&lt;button @click="btn2Click()"&gt;按钮2&lt;/button&gt;--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"btn2Click"</span>&gt;</span>按钮2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <span class="hljs-comment">&lt;!--3.方法定义时, 我们需要event对象, 同时又需要其他参数--&gt;</span>  <span class="hljs-comment">&lt;!-- 在调用方式, 如何手动的获取到浏览器参数的event对象: $event--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"btn3Click(abc, $event)"</span>&gt;</span>按钮3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">    el: <span class="hljs-string">'#app'</span>,</span>    data: &#123;<span class="actionscript">      message: <span class="hljs-string">'你好啊'</span>,</span>      abc: 123    &#125;,    methods: &#123;      btn1Click() &#123;<span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"btn1Click"</span>);</span>      &#125;,      btn2Click(event) &#123;<span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'--------'</span>, event);</span>      &#125;,      btn3Click(abc, event) &#123;<span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'++++++++'</span>, abc, event);</span>      &#125;    &#125;  &#125;)<span class="actionscript">  <span class="hljs-comment">// 如果函数需要参数,但是没有传入, 那么函数的形参为undefined</span></span><span class="actionscript">  <span class="hljs-comment">// function abc(name) &#123;</span></span><span class="actionscript">  <span class="hljs-comment">//   console.log(name);</span></span><span class="actionscript">  <span class="hljs-comment">// &#125;</span></span><span class="actionscript">  <span class="hljs-comment">//</span></span><span class="actionscript">  <span class="hljs-comment">// abc()</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><h2 id="🚩-v-on-修饰符"><a href="#🚩-v-on-修饰符" class="headerlink" title="🚩 v-on 修饰符"></a>🚩 v-on 修饰符</h2><p>🔺 在某些情况下，我们拿到event的目的可能是进行一些事件处理。<code>Vue</code>提供了修饰符来帮助我们方便的处理一些事件：</p><pre><code class="hljs html"><span class="hljs-comment">&lt;!--.stop - 调用 event.stopPropagation()--&gt;</span><span class="hljs-comment">&lt;!--.prevent - 调用 event.preventDefault()--&gt;</span><span class="hljs-comment">&lt;!--.&#123;keyCode | keyAlias&#125; - 只当事件是从特定键触发时才触发回调--&gt;</span><span class="hljs-comment">&lt;!--.native - 监听组件根元素的原生事件--&gt;</span><span class="hljs-comment">&lt;!--.once - 只触发一次回调--&gt;</span></code></pre><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-on修饰符<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-comment">&lt;!--1. .stop修饰符的使用--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"divClick"</span>&gt;</span>    aaaaaaa    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">"btnClick"</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-comment">&lt;!--2. .prevent修饰符的使用--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"baidu"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"提交"</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">"submitClick"</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>  <span class="hljs-comment">&lt;!--3. .监听某个键盘的键帽--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">"keyUp"</span>&gt;</span>  <span class="hljs-comment">&lt;!--4. .once修饰符的使用--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.once</span>=<span class="hljs-string">"btn2Click"</span>&gt;</span>按钮2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">    el: <span class="hljs-string">'#app'</span>,</span>    data: &#123;<span class="actionscript">      message: <span class="hljs-string">'你好啊'</span></span>    &#125;,    methods: &#123;      btnClick() &#123;<span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"btnClick"</span>);</span>      &#125;,      divClick() &#123;<span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"divClick"</span>);</span>      &#125;,      submitClick() &#123;<span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'submitClick'</span>);</span>      &#125;,      keyUp() &#123;<span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'keyUp'</span>);</span>      &#125;,      btn2Click() &#123;<span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'btn2Click'</span>);</span>      &#125;    &#125;  &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue 笔记整理04</title>
    <link href="/2020/04/27/vue4/"/>
    <url>/2020/04/27/vue4/</url>
    
    <content type="html"><![CDATA[<h1 id="四-计算属性"><a href="#四-计算属性" class="headerlink" title="四. 计算属性"></a>四. 计算属性</h1><h2 id="🚩-什么是计算属性？"><a href="#🚩-什么是计算属性？" class="headerlink" title="🚩 什么是计算属性？"></a>🚩 什么是计算属性？</h2><p>🔺  我们知道，在模板中可以直接通过插值语法显示一些<code>data</code>中的数据。但是在某些情况，我们可能需要对数据进行一些转化后再显示，或者需要将多个数据结合起来进行显示。比如我们有<code>firstName</code>和<code>lastName</code>两个变量，我们需要显示完整的名称。但是如果多个地方都需要显示完整的名称，我们就需要写多个<code></code>，<code></code>.我们可以将上面的代码换成计算属性,并且我们发现计算属性是写在实例的<code>computed</code>选项中的。</p><h2 id="🚩-计算属性的基本使用"><a href="#🚩-计算属性的基本使用" class="headerlink" title="🚩 计算属性的基本使用"></a>🚩 计算属性的基本使用</h2><p>🔺  假如现在有变量姓氏和名字，要得到完整的名字，应该怎么用计算属性实现呢？</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>计算属性的基本使用<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;firstName + ' ' + lastName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">    el: <span class="hljs-string">'#app'</span>,</span>    data: &#123;<span class="actionscript">      firstName: <span class="hljs-string">'Lebron'</span>,</span><span class="actionscript">      lastName: <span class="hljs-string">'James'</span></span>    &#125;,<span class="actionscript">    <span class="hljs-comment">// computed: 计算属性()</span></span>    computed: &#123;<span class="actionscript">      fullName: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;</span><span class="actionscript">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.firstName + <span class="hljs-string">' '</span> + <span class="hljs-keyword">this</span>.lastName</span>      &#125;    &#125;,    methods: &#123;      getFullName() &#123;<span class="actionscript">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.firstName + <span class="hljs-string">' '</span> + <span class="hljs-keyword">this</span>.lastName</span>      &#125;    &#125;  &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>🔺  第十行：使用<code>Mastache</code>语法拼接</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span> &#123;&#123;firstName+ " " + lastName&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></code></pre><p>🔺  第三十二行：使用方法methods</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span> &#123;&#123;getFullName()&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></code></pre><p>🔺  第二十七行：使用计算属性computed</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span> &#123;&#123;fullName&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></code></pre><blockquote><p>👩注意👩: 例子中计算属性<code>computed</code>的使用看起来和方法<code>methods</code>似乎一样，只是方法<code>methods</code>在调用时需要使用<code>()</code>，而计算属性不用，方法取名字一般是动词见名知义，而计算属性是属性是名词，但这只是基本使用。</p></blockquote><h2 id="🚩-计算属性的复杂操作"><a href="#🚩-计算属性的复杂操作" class="headerlink" title="🚩 计算属性的复杂操作"></a>🚩 <strong>计算属性的复杂操作</strong></h2><p>🔺  计算属性中也可以进行一些更加复杂的操作，比如下面的例子：</p><p>如果现在有一个数组数据<code>books</code>，里面包含许多<code>book</code>对象，数据结构如下：</p><pre><code class="hljs javascript">books:[     &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">110</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">"Unix编程艺术"</span>,<span class="hljs-attr">price</span>:<span class="hljs-number">119</span>&#125;,      &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">111</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">"代码大全"</span>,<span class="hljs-attr">price</span>:<span class="hljs-number">105</span>&#125;,     &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">112</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">"精通JavaScript"</span>,<span class="hljs-attr">price</span>:<span class="hljs-number">80</span>&#125;,     &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">113</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">"现代操作系统"</span>,<span class="hljs-attr">price</span>:<span class="hljs-number">87</span>&#125;,    ]</code></pre><p>要求你计算出所有<code>book</code>的总价格<code>totalPrice</code>,你该怎么做呢？</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>计算属性的复杂操作<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>总价格: &#123;&#123;totalPrice&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>总价格: &#123;&#123;totalPrice&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>总价格: &#123;&#123;totalPrice&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>总价格: &#123;&#123;totalPrice&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>总价格: &#123;&#123;getTotalPrice()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>总价格: &#123;&#123;getTotalPrice()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>总价格: &#123;&#123;getTotalPrice()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>总价格: &#123;&#123;getTotalPrice()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">    el: <span class="hljs-string">'#app'</span>,</span>    data: &#123;      books: [<span class="actionscript">        &#123;id: <span class="hljs-number">110</span>, name: <span class="hljs-string">'Unix编程艺术'</span>, price: <span class="hljs-number">119</span>&#125;,</span><span class="actionscript">        &#123;id: <span class="hljs-number">111</span>, name: <span class="hljs-string">'代码大全'</span>, price: <span class="hljs-number">105</span>&#125;,</span><span class="actionscript">        &#123;id: <span class="hljs-number">112</span>, name: <span class="hljs-string">'精通JavaScript'</span>, price: <span class="hljs-number">80</span>&#125;,</span><span class="actionscript">        &#123;id: <span class="hljs-number">113</span>, name: <span class="hljs-string">'现代操作系统'</span>, price: <span class="hljs-number">87</span>&#125;,</span>      ]    &#125;,    methods: &#123;<span class="actionscript">      getTotalPrice: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;</span><span class="javascript">        <span class="hljs-keyword">let</span> result = <span class="hljs-number">0</span></span><span class="javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>.books.length; i++) &#123;</span><span class="actionscript">          result += <span class="hljs-keyword">this</span>.books[i].price</span>        &#125;<span class="actionscript">        <span class="hljs-keyword">return</span> result</span>      &#125;    &#125;,    computed: &#123;<span class="actionscript">      totalPrice: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;</span><span class="javascript">        <span class="hljs-keyword">let</span> result = <span class="hljs-number">0</span></span><span class="javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>.books.length; i++) &#123;</span><span class="actionscript">          result += <span class="hljs-keyword">this</span>.books[i].price</span>        &#125;<span class="actionscript">        <span class="hljs-keyword">return</span> result</span><span class="actionscript">        <span class="hljs-comment">// for (let i in this.books) &#123;</span></span><span class="actionscript">        <span class="hljs-comment">//   this.books[i]</span></span><span class="actionscript">        <span class="hljs-comment">// &#125;</span></span><span class="actionscript">        <span class="hljs-comment">//</span></span><span class="actionscript">        <span class="hljs-comment">// for (let book of this.books) &#123;</span></span><span class="actionscript">        <span class="hljs-comment">//</span></span><span class="actionscript">        <span class="hljs-comment">// &#125;</span></span>      &#125;    &#125;  &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><blockquote><p>方法👩: 通过获取每一个<code>book</code>对象的<code>price</code>属性，将他们累加起来，当其中一个<code>book</code>的价格发生改变时候，总价会随之变化。</p></blockquote><h2 id="🚩-计算属性的setter和getter"><a href="#🚩-计算属性的setter和getter" class="headerlink" title="🚩 计算属性的setter和getter"></a>🚩 <strong>计算属性的</strong>setter<strong>和</strong>getter</h2><p>🔺  每个计算属性都包含一个<code>getter</code>和一个<code>setter</code>。在上面的例子中，我们只是使用<code>getter</code>来读取。在某些情况下，你也可以提供一个<code>setter</code>方法（不常用）。在需要写<code>setter</code>的时候，代码如下：</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>计算属性的setter和getter<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">    el: <span class="hljs-string">'#app'</span>,</span>    data: &#123;<span class="actionscript">      firstName: <span class="hljs-string">'Kobe'</span>,</span><span class="actionscript">      lastName: <span class="hljs-string">'Bryant'</span></span>    &#125;,    computed: &#123;<span class="actionscript">      <span class="hljs-comment">// fullName: function () &#123;</span></span><span class="actionscript">      <span class="hljs-comment">//   return this.firstName + ' ' + this.lastName</span></span><span class="actionscript">      <span class="hljs-comment">// &#125;</span></span><span class="actionscript">      <span class="hljs-comment">// name: 'coderwhy'</span></span><span class="actionscript">      <span class="hljs-comment">// 计算属性一般是没有set方法, 只读属性.</span></span>      fullName: &#123;<span class="actionscript">        <span class="hljs-keyword">set</span>: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(newValue)</span> </span>&#123;</span><span class="actionscript">          <span class="hljs-comment">// console.log('-----', newValue);</span></span><span class="actionscript">          <span class="hljs-keyword">const</span> names = newValue.split(<span class="hljs-string">' '</span>);</span><span class="actionscript">          <span class="hljs-keyword">this</span>.firstName = names[<span class="hljs-number">0</span>];</span><span class="actionscript">          <span class="hljs-keyword">this</span>.lastName = names[<span class="hljs-number">1</span>];</span>        &#125;,<span class="actionscript">        <span class="hljs-keyword">get</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;</span><span class="actionscript">          <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.firstName + <span class="hljs-string">' '</span> + <span class="hljs-keyword">this</span>.lastName</span>        &#125;      &#125;,<span class="actionscript">      <span class="hljs-comment">// fullName: function () &#123;</span></span><span class="actionscript">      <span class="hljs-comment">//   return this.firstName + ' ' + this.lastName</span></span><span class="actionscript">      <span class="hljs-comment">// &#125;</span></span>    &#125;  &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><blockquote><p>👩注意👩: 计算属性一般没有<code>set</code>方法，属于只读属性，只有<code>get</code>方法，但是上述中<code>newValue</code>就是新的值，也可以使用<code>set</code>方法设置值，但是一般不用。</p></blockquote><h2 id="🚩-计算属性的缓存"><a href="#🚩-计算属性的缓存" class="headerlink" title="🚩 计算属性的缓存"></a>🚩 <strong>计算属性的缓存</strong></h2><p>🔺  我们可能会考虑这样的一个问题：<code>methods</code>和<code>computed</code>看起来都可以实现我们的功能，那么为什么还要多一个计算属性这个东西呢？</p><p>🔺  原因：计算属性会进行缓存，如果多次使用时，计算属性只会调用一次。</p><p>🔺  我们来看下面的代码：</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span> 计算属性的缓存<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-comment">&lt;!--1.直接拼接: 语法过于繁琐--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-comment">&lt;!--2.通过定义methods,即使firstName和lastName没有改变，也需要再次执行--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-comment">&lt;!--3.通过computed, 计算属性有缓存，只有关联属性改变才会再次计算--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">  <span class="hljs-comment">// angular -&gt; google</span></span><span class="actionscript">  <span class="hljs-comment">// TypeScript(microsoft) -&gt; ts(类型检测)</span></span><span class="actionscript">  <span class="hljs-comment">// flow(facebook) -&gt;</span></span><span class="actionscript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">    el: <span class="hljs-string">'#app'</span>,</span>    data: &#123;<span class="actionscript">      firstName: <span class="hljs-string">'Kobe'</span>,</span><span class="actionscript">      lastName: <span class="hljs-string">'Bryant'</span></span>    &#125;,    methods: &#123;<span class="actionscript">      getFullName: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;</span><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'getFullName'</span>);</span><span class="actionscript">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.firstName + <span class="hljs-string">' '</span> + <span class="hljs-keyword">this</span>.lastName</span>      &#125;    &#125;,    computed: &#123;<span class="actionscript">      fullName: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;</span><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'fullName'</span>);</span><span class="actionscript">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.firstName + <span class="hljs-string">' '</span> + <span class="hljs-keyword">this</span>.lastName</span>      &#125;    &#125;  &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><blockquote><p>👩注意👩: 由此可见计算属性有缓存，在<code>this.firstName + &quot; &quot; + this.lastName</code>的属性不变的情况下，<code>methods</code>调用了四次，而计算属性才调用了一次，性能上计算属性明显比<code>methods</code>好。而且在改动<code>firstName</code>的情况下，计算属性只调用一次，<code>methods</code>依然要调用4次。</p></blockquote><p>以上笔记是根据王红元老师的课程整理的。</p><p>More info: <a href="https://www.bilibili.com/video/BV15741177Eh?p=12" target="_blank" rel="noopener">王红元 | Vue 课程</a></p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue 笔记整理03</title>
    <link href="/2020/04/26/vue3/"/>
    <url>/2020/04/26/vue3/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue-笔记整理03"><a href="#Vue-笔记整理03" class="headerlink" title="Vue 笔记整理03"></a>Vue 笔记整理03</h1><p>🔺 前面我们学习的指令主要作用是将值插入到我们模板的内容当中。</p><p>🔺 但是，除了内容需要动态来决定外，某些属性我们也希望动态来绑定。</p><p>🔺 比如动态绑定a元素的<code>href</code>属性</p><p>🔺 比如动态绑定<code>img</code>元素的<code>src</code>属性</p><p>🔺 这个时候，我们可以使用<code>v-bind指令</code>：</p><p>​    🔺  <strong>作用</strong>：动态绑定属性</p><p>​    🔺  <strong>缩写</strong>：<code>:</code></p><p>​    🔺  <strong>预期</strong>：<code>any (with argument) | Object (without argument)</code></p><p>​    🔺  <strong>参数</strong>：<code>attrOrProp (optional)</code></p><p>🔺 下面，我们就具体来学习v-bind的使用。</p><h2 id="三-v-bind"><a href="#三-v-bind" class="headerlink" title="三. v-bind"></a>三. v-bind</h2><h3 id="3-1-v-bind绑定基本属性"><a href="#3-1-v-bind绑定基本属性" class="headerlink" title="3.1. v-bind绑定基本属性"></a>3.1. v-bind绑定基本属性</h3><h4 id="🚩-v-bind的基本使用"><a href="#🚩-v-bind的基本使用" class="headerlink" title="🚩 v-bind的基本使用"></a>🚩 <code>v-bind</code>的基本使用</h4><ul><li><p>v-bind用于绑定一个或多个属性值，或者向另一个组件传递props值(这个学到组件时再介绍)</p></li><li><p>在开发中，有哪些属性需要动态进行绑定呢？</p></li><li><p>还是有很多的，比如图片的链接<code>src</code>、网站的链接<code>href</code>、动态绑定一些类、样式等</p><p>🔺 其实，在 某些时候我们并不想将变量放在标签内容中，像这样<code>&lt;h2&gt;&lt;/h2&gt;</code>是将变量<code>h2</code>标签括起来，类似<code>js</code>的<code>innerHTML</code>。但是我们期望将变量<code>imgURL</code>写在如下位置，想这样<code>&lt;img src=&quot;imgURL&quot; alt=&quot;&quot;&gt;</code>导入图片是希望动态获取图片的链接，此时的<code>imgURL</code>并非变量而是字符串<code>imgURL</code>，如果要将其生效为变量，需要使用到一个标签<code>v-bind:</code>，像这样<code>&lt;img v-bind:src=&quot;imgURL&quot; alt=&quot;&quot;&gt;</code>，而且这里也不能使用Mustache语法，类似<code>&lt;img v-bind:src=&quot;&quot; alt=&quot;&quot;&gt;</code>，这也是错误的。</p></li></ul><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 错误的做法: 这里不可以使用mustache语法--&gt;</span>  <span class="hljs-comment">&lt;!--&lt;img src="&#123;&#123;imgURL&#125;&#125;" alt=""&gt;--&gt;</span>  <span class="hljs-comment">&lt;!-- 正确的做法: 使用v-bind指令 --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">v-bind:src</span>=<span class="hljs-string">"imgURL"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:href</span>=<span class="hljs-string">"aHref"</span>&gt;</span>百度一下<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>  <span class="hljs-comment">&lt;!--&lt;h2&gt;&#123;&#123;&#125;&#125;&lt;/h2&gt;--&gt;</span>  <span class="hljs-comment">&lt;!--语法糖的写法--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">"imgURL"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">"aHref"</span>&gt;</span>百度一下<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">    el: <span class="hljs-string">'#app'</span>,</span>    data: &#123;<span class="actionscript">      message: <span class="hljs-string">'你好啊'</span>,</span><span class="actionscript">      imgURL: <span class="hljs-string">'https://img11.360buyimg.com/mobilecms/s350x250_jfs/t1/20559/1/1424/73138/5c125595E3cbaa3c8/74fc2f84e53a9c23.jpg!q90!cc_350x250.webp'</span>,</span><span class="actionscript">      aHref: <span class="hljs-string">'http://www.baidu.com'</span></span>    &#125;  &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>🔺 此时<code>vue</code>对象中定义的<code>imgURL</code>变量和<code>aHerf</code>变量可以动态的绑定到<code>img</code>标签的<code>src</code>属性和<code>a</code>标签的<code>href</code>属性。</p><p>🔺 第十五行的<code>:href</code>：<code>v-bind:</code>由于用的很多，<code>vue</code>对他有一个语法糖的优化写法也就是<code>:</code>，此时修改<code>imgURL</code>变量图片页重新加载。</p><h3 id="3-2-v-bind动态绑定class"><a href="#3-2-v-bind动态绑定class" class="headerlink" title="3.2. v-bind动态绑定class"></a>3.2. v-bind动态绑定class</h3><p>🔺  很多时候，我们希望动态的来切换class，比如：当数据为某个状态时，字体显示红色;当数据另一个状态时，字体显示黑色。</p><p>🔺  绑定class有两种方式：</p><ul><li><p>对象语法</p></li><li><p>数组语法</p></li></ul><h4 id="🚩-对象语法-作业-class-’-类名-boolean-’"><a href="#🚩-对象语法-作业-class-’-类名-boolean-’" class="headerlink" title="🚩 对象语法: 作业 :class=’{类名: boolean}’"></a>🚩 对象语法: 作业 :class=’{类名: boolean}’</h4><p>🔺 对象语法的含义是:class后面跟的是一个对象。</p><p>🔺 对象语法有下面这些用法：</p><ul><li>用法一：直接通过{}绑定一个类</li></ul><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"&#123;'active': isActive&#125;"</span>&gt;</span>Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></code></pre><ul><li>用法二：也可以通过判断，传入多个值</li></ul><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"&#123;'active': isActive, 'line': isLine&#125;"</span>&gt;</span>Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></code></pre><ul><li>用法三：和普通的类同时存在，并不冲突</li></ul><p>注：如果<code>isActive</code>和<code>isLine</code>都为<code>true</code>，那么会有<code>title/active/line</code>三个类</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"title"</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"&#123;'active': isActive, 'line': isLine&#125;"</span>&gt;</span>Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></code></pre><ul><li>用法四：如果过于复杂，可以放在一个<code>methods</code>或者<code>computed</code>中</li></ul><p>注：<code>classes</code>是一个计算属性</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"title"</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"classes"</span>&gt;</span>Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></code></pre><p> 🔺 有时候我们期望对Dom元素的节点的class进行动态绑定，选择此Dom是否有指定class属性。例如，给h2标签加上<code>class=&quot;active&quot;</code>，当Dom元素有次class时候，变红<code>&lt;style&gt;.active{color:red;}&lt;/style&gt;</code>，在写一个按钮绑定事件，点击变黑色，再次点击变红色。</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    <span class="hljs-selector-class">.active</span> &#123;</span>      color: red;    &#125;  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-comment">&lt;!--&lt;h2 class="active"&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;--&gt;</span>  <span class="hljs-comment">&lt;!--&lt;h2 :class="active"&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;--&gt;</span>  <span class="hljs-comment">&lt;!--&lt;h2 v-bind:class="&#123;key1: value1, key2: value2&#125;"&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;--&gt;</span>  <span class="hljs-comment">&lt;!--&lt;h2 v-bind:class="&#123;类名1: true, 类名2: boolean&#125;"&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"title"</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">"&#123;active: isActive, line: isLine&#125;"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"title"</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">"getClasses()"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">"change"</span>&gt;</span>点击变色<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">    el: <span class="hljs-string">'#app'</span>,</span>    data: &#123;<span class="actionscript">      message: <span class="hljs-string">'你好啊'</span>,</span><span class="actionscript">      active:<span class="hljs-string">"active"</span>，</span><span class="actionscript">      isActive: <span class="hljs-literal">true</span></span>    &#125;,    methods: &#123;      change () &#123;<span class="actionscript">        <span class="hljs-keyword">this</span>.isActive = !<span class="hljs-keyword">this</span>.isActive</span>      &#125;,      getClasses () &#123;<span class="actionscript">        <span class="hljs-keyword">return</span> &#123;active: <span class="hljs-keyword">this</span>.isActive&#125;</span>    &#125;  &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p> 🔺  定义两个变量<code>active</code>和<code>isActive</code>，在Dom元素中使用<code>:class={active:isActive}</code>，此时绑定的<code>class=&#39;active&#39;</code>，<code>isActive</code>为<code>true</code>，<code>active</code>显示，定义方法<code>change()</code>绑定在按钮上，点击按钮<code>this.isActive = !this.isActive</code>，控制Dom元素是否有<code>class=&#39;active&#39;</code>的属性。</p><h4 id="🚩-数组语法"><a href="#🚩-数组语法" class="headerlink" title="🚩 数组语法:"></a>🚩 数组语法:</h4><p>🔺 数组语法的含义是<code>:class</code>后面跟的是一个数组。</p><p>🔺 数组语法有下面这些用法：</p><ul><li>用法一：直接通过{}绑定一个类</li></ul><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"['active']"</span>&gt;</span>Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></code></pre><ul><li>用法二：也可以传入多个值</li></ul><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">“[‘active’,</span> '<span class="hljs-attr">line</span>']"&gt;</span>Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></code></pre><ul><li>用法三：和普通的类同时存在，并不冲突</li></ul><p>注：会有title/active/line三个类</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"title"</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">“[‘active’,</span> '<span class="hljs-attr">line</span>']"&gt;</span>Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></code></pre><p>用法四：如果过于复杂，可以放在一个<code>methods</code>或者<code>computed</code>中</p><p>注：classes是一个计算属性</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"title"</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"classes"</span>&gt;</span>Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></code></pre><p>  🔺 class属性中可以放数组，会依次解析成对应的class</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"title"</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"[active, line]"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"title"</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"getClasses()"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">    el: <span class="hljs-string">'#app'</span>,</span>    data: &#123;<span class="actionscript">      message: <span class="hljs-string">'你好啊'</span>,</span><span class="actionscript">      active: <span class="hljs-string">'aaaaaa'</span>,</span><span class="actionscript">      line: <span class="hljs-string">'bbbbbbb'</span></span>    &#125;,    methods: &#123;<span class="actionscript">      getClasses: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;</span><span class="actionscript">        <span class="hljs-keyword">return</span> [<span class="hljs-keyword">this</span>.active, <span class="hljs-keyword">this</span>.line]</span>      &#125;    &#125;  &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><h3 id="3-3-v-bind动态绑定style"><a href="#3-3-v-bind动态绑定style" class="headerlink" title="3.3. v-bind动态绑定style"></a>3.3. v-bind动态绑定style</h3><p>🔺 我们可以利用<code>v-bind:style</code>来绑定一些<code>CSS</code>内联样式。</p><p>🔺 在写<code>CSS</code>属性名的时候，比如<code>font-size</code></p><p>🔺 我们可以使用驼峰式<code>(camelCase) fontSize</code></p><p>🔺 或短横线分隔<code>(kebab-case，记得用单引号括起来)`` ‘font-size’</code></p><p>🔺 绑定class有两种方式：</p><ul><li><p>对象语法</p></li><li><p>数组语法</p></li></ul><h4 id="🚩-对象语法"><a href="#🚩-对象语法" class="headerlink" title="🚩 对象语法:"></a>🚩 对象语法:</h4><pre><code class="hljs html">:style="&#123;color: currentColor, fontSize: fontSize + 'px'&#125;"</code></pre><p>🔺 <code>style</code>后面跟的是一个对象类型</p><p>🔺 对象的<code>key</code>是<code>CSS</code>属性名称</p><p>🔺 对象的<code>value</code>是具体赋的值，值可以来自于<code>data</code>中的属性</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    <span class="hljs-selector-class">.title</span> &#123;</span>      font-size: 50px;      color: red;    &#125;  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-comment">&lt;!--&lt;h2 :style="&#123;key(属性名): value(属性值)&#125;"&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;--&gt;</span>  <span class="hljs-comment">&lt;!--'50px'必须加上单引号, 否则是当做一个变量去解析--&gt;</span>  <span class="hljs-comment">&lt;!--&lt;h2 :style="&#123;fontSize: '50px'&#125;"&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;--&gt;</span>  <span class="hljs-comment">&lt;!--finalSize当成一个变量使用--&gt;</span>  <span class="hljs-comment">&lt;!--&lt;h2 :style="&#123;fontSize: finalSize&#125;"&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">"&#123;fontSize: finalSize + 'px', backgroundColor: finalColor&#125;"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">"getStyles()"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">    el: <span class="hljs-string">'#app'</span>,</span>    data: &#123;<span class="actionscript">      message: <span class="hljs-string">'你好啊'</span>,</span>      finalSize: 100,<span class="actionscript">      finalColor: <span class="hljs-string">'red'</span>,</span>    &#125;,    methods: &#123;<span class="actionscript">      getStyles: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;</span><span class="actionscript">        <span class="hljs-keyword">return</span> &#123;fontSize: <span class="hljs-keyword">this</span>.finalSize + <span class="hljs-string">'px'</span>, backgroundColor: <span class="hljs-keyword">this</span>.finalColor&#125;</span>      &#125;    &#125;  &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><h4 id="🚩-数组语法-1"><a href="#🚩-数组语法-1" class="headerlink" title="🚩 数组语法:"></a>🚩 数组语法:</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:style</span>=<span class="hljs-string">"[baseStyles, overridingStyles]"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre><p>🔺 style后面跟的是一个数组类型</p><p>🔺 多个值时，分割即可</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">"[baseStyle, baseStyle1]"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">    el: <span class="hljs-string">'#app'</span>,</span>    data: &#123;<span class="actionscript">      message: <span class="hljs-string">'你好啊'</span>,</span><span class="actionscript">      baseStyle: &#123;backgroundColor: <span class="hljs-string">'red'</span>&#125;,</span><span class="actionscript">      baseStyle1: &#123;fontSize: <span class="hljs-string">'100px'</span>&#125;,</span>    &#125;  &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>以上笔记是根据王红元老师的课程整理的。</p><p>More info: <a href="https://www.bilibili.com/video/BV15741177Eh?p=12" target="_blank" rel="noopener">王红元 | Vue 课程</a></p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue 笔记整理02</title>
    <link href="/2020/04/25/vue2/"/>
    <url>/2020/04/25/vue2/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue-笔记整理02"><a href="#Vue-笔记整理02" class="headerlink" title="Vue 笔记整理02"></a>Vue 笔记整理02</h1><h3 id="二-插值语法"><a href="#二-插值语法" class="headerlink" title="二.插值语法"></a>二.插值语法</h3><h4 id="🚩mustache语法"><a href="#🚩mustache语法" class="headerlink" title="🚩mustache语法"></a>🚩mustache语法</h4><ul><li><p>如何将data中的文本数据，插入到HTML中呢？</p></li><li><p>我们已经学习过了，可以通过Mustache语法(也就是双大括号)。</p></li><li><p>mustach：胡子，胡须</p></li><li>我们可以像下面这样来使用，并且数据是响应式的</li></ul><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>mustache语法<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Hello &#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;, Oyeah!<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-comment">&lt;!--mustache语法中,不仅仅可以直接写变量,也可以写简单的表达式--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;firstName + lastName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;firstName + ' ' + lastName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;counter * 2&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">    el: <span class="hljs-string">'#app'</span>,</span>    data: &#123;<span class="actionscript">      message: <span class="hljs-string">'哈哈哈，oyeah'</span>,</span><span class="actionscript">      firstName: <span class="hljs-string">'o'</span>,</span><span class="actionscript">      lastName: <span class="hljs-string">'yeah'</span>,</span>      counter: 100    &#125;,  &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><ul><li><p>第10行：mustache 插入到标签中</p></li><li><p>第14行：mustache 可以为一个表达式</p></li><li><p>第16行： 使用了两个mustache </p><p>🔺但是，在某些情况下，我们可能不希望界面随意的跟随改变，这个时候，我们就可以使用一个Vue的指令</p></li></ul><h4 id="🚩v-once"><a href="#🚩v-once" class="headerlink" title="🚩v-once"></a>🚩v-once</h4><ul><li><p>该指令后面不需要跟任何表达式(比如之前的v-for后面是跟表达式的)</p></li><li><p>该指令表示元素和组件(组件后面才会学习)只渲染一次，不会随着数据的改变而改变。</p></li></ul><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-once使用<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-once</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">    el: <span class="hljs-string">'#app'</span>,</span>    data: &#123;<span class="actionscript">      message: <span class="hljs-string">'你好啊'</span></span>    &#125;  &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>若控制台中输入一下代码：</p><pre><code class="hljs html">vm.message='Hello World'</code></pre><p>🔺 此时，message改变，界面并没有重新渲染</p><p>🔺上述<code>{{message}}</code>的message修改后，第一个h2标签数据会自动改变，第二个h2不会。</p><h4 id="🚩v-html"><a href="#🚩v-html" class="headerlink" title="🚩v-html"></a>🚩v-html</h4><ul><li><p>某些情况下，我们从服务器请求到的数据本身就是一个HTML代码</p></li><li><p>如果我们直接通过<code>{{}}</code>来输出，会将HTML代码也一起输出。但是我们可能希望的是按照HTML格式进行解析，并且显示对应的内容。</p></li><li><p>如果我们希望解析出HTML展示，可以使用v-html指令</p></li><li><p>该指令后面往往会跟上一个string类型，会将string的html解析出来并且进行渲染</p></li></ul><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-html使用<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>不使用v-html<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;url&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>使用v-html，直接插入html<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">"url"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">    el: <span class="hljs-string">'#app'</span>,</span>    data: &#123;<span class="actionscript">      message: <span class="hljs-string">'你好啊'</span>,</span><span class="handlebars"><span class="xml">      url: '<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"http://www.baidu.com"</span>&gt;</span>百度一下<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>'</span></span>    &#125;  &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>输出结果如下：</p><p><img src="vue2-1.png" srcset="/img/loading.gif" alt=""></p><h4 id="🚩v-text"><a href="#🚩v-text" class="headerlink" title="🚩v-text"></a>🚩v-text</h4><ul><li><p>v-text作用和Mustache一致：</p></li><li><p>v-text通常情况下，接受一个string类型</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-test 使用<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;, 李银河!<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">"message"</span>&gt;</span>, 李银河!<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">    el: <span class="hljs-string">'#app'</span>,</span>    data: &#123;<span class="actionscript">      message: <span class="hljs-string">'你好啊'</span></span>    &#125;  &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>输出结果如下：</p><p><img src="vue2-2.png" srcset="/img/loading.gif" alt=""></p></li></ul><p>  🔺如图所示，使用<code></code>是拼接<code>变量和字符串</code>，而是用<code>v-text</code>是直接覆盖<code>字符串内容</code>。</p><h4 id="🚩v-pre"><a href="#🚩v-pre" class="headerlink" title="🚩v-pre"></a>🚩v-pre</h4><ul><li><p>v-pre用于跳过这个元素和它子元素的编译过程，用于显示原本的Mustache语法。</p></li><li><p>比如下面的代码：</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-pre</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">    el: <span class="hljs-string">'#app'</span>,</span>    data: &#123;<span class="actionscript">      message: <span class="hljs-string">'你好啊'</span></span>    &#125;  &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></li></ul><p>🔺第一个h2元素中的内容会被编译解析出来对应的内容-&gt;Hello World</p><p>🔺第二个h2元素中会直接显示<code></code>，直接显示出字符串</p><h4 id="🚩v-cloak-斗篷"><a href="#🚩v-cloak-斗篷" class="headerlink" title="🚩v-cloak: 斗篷"></a>🚩v-cloak: 斗篷</h4><ul><li><p>某些情况下，我们浏览器可能会直接显示出未编译的Mustache标签</p></li><li><p>有时候因为加载延时问题，比如卡掉了以及数据没有及时刷新，就造成了页面显示从<code></code>到message变量“你好啊”的变化，这样闪动的变化，会造成用户体验不好。此时需要使用到<code>v-cloak</code>的这个标签。在vue解析之前，div属性中有<code>v-cloak</code>这个标签，在vue解析完成之后，v-cloak标签被移除。简单，类似div开始有一个css属性<code>display:none;</code>，加载完成之后，css属性变成<code>display:block</code>，元素显示出来。</p></li></ul><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-cloak 斗篷使用<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">    <span class="hljs-selector-attr">[v-cloak]</span> &#123;</span>      display: none;    &#125;  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span> <span class="hljs-attr">v-cloak</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">  <span class="hljs-comment">// 在vue解析之前, div中有一个属性v-cloak</span></span><span class="actionscript">  <span class="hljs-comment">// 在vue解析之后, div中没有一个属性v-cloak</span></span><span class="actionscript">  setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;</span><span class="actionscript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">      el: <span class="hljs-string">'#app'</span>,</span>      data: &#123;<span class="actionscript">        message: <span class="hljs-string">'你好啊'</span></span>      &#125;    &#125;)  &#125;, 1000)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>以上笔记是根据王红元老师的课程整理的。</p><p>More info: <a href="https://www.bilibili.com/video/BV15741177Eh?p=12" target="_blank" rel="noopener">王红元 | Vue 课程</a></p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue 笔记整理01</title>
    <link href="/2020/04/24/vue1/"/>
    <url>/2020/04/24/vue1/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue-笔记整理01"><a href="#Vue-笔记整理01" class="headerlink" title="Vue 笔记整理01"></a>Vue 笔记整理01</h1><h3 id="一-邂逅Vuejs"><a href="#一-邂逅Vuejs" class="headerlink" title="一. 邂逅Vuejs"></a>一. 邂逅Vuejs</h3><h4 id="1-1-认识Vuejs"><a href="#1-1-认识Vuejs" class="headerlink" title="1.1. 认识Vuejs"></a>1.1. 认识Vuejs</h4><p>🚩为什么学习Vuejs</p><p>   ✍我相信每个人学习Vue的目的是各部相同的。</p><ul><li>可能你的公司正要将原有的项目使用Vue进行重构。</li><li><p>可能是你的公司新项目决定使用Vue的技术栈。</p></li><li><p>当然，如果你现在正在换工作，你会发现招聘前端的需求中，10个有8个都对Vue有或多或少的要求。</p></li><li><p>当然，作为学习者我们知道Vuejs目前非常火，可以说是前端必备的一个技能。</p></li></ul><p>🚩Vue的读音</p><ul><li>Vue (读音 /vjuː/，类似于 <strong>view</strong>)，不要读错。</li></ul><p>🚩Vue的渐进式</p><ul><li><p>Vue是一个渐进式的框架，什么是渐进式的呢？</p><p> ◻ 渐进式意味着你可以将Vue作为你应用的一部分嵌入其中，带来更丰富的交互体验。</p></li></ul><p>​       ◻ 或者如果你希望将更多的业务逻辑使用Vue实现，那么Vue的核心库以及其生态系统。</p><p>​       ◻ 比如Core+Vue-router+Vuex，也可以满足你各种各样的需求。</p><p>🚩Vue的特点</p><ul><li><p>解耦视图和数据</p></li><li><p>可复用的组件</p></li><li><p>前端路由技术</p></li><li><p>状态管理</p></li></ul><h4 id="1-2-安装Vue"><a href="#1-2-安装Vue" class="headerlink" title="1.2. 安装Vue"></a>1.2. 安装Vue</h4><p>🚩CDN引入</p><pre><code class="hljs javascript">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt; &lt;script src=<span class="hljs-string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;&lt;<span class="hljs-regexp">/script&gt;</span><span class="hljs-regexp">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span><span class="hljs-regexp">&lt;script src="https:/</span><span class="hljs-regexp">/cdn.jsdelivr.net/</span>npm/vue<span class="hljs-string">"&gt;&lt;/script&gt;</span></code></pre><p>🚩下载引入</p><p> <strong>开发环境</strong> <a href="https://vuejs.org/js/vue.js" target="_blank" rel="noopener">https://vuejs.org/js/vue.js</a><br> <strong>生产环境</strong> <a href="https://vuejs.org/js/vue.min.js" target="_blank" rel="noopener">https://vuejs.org/js/vue.min.js</a></p><p>🚩npm安装</p><pre><code class="hljs bash"><span class="hljs-comment"># 查看版本</span><span class="hljs-comment">#npm 版本需要大于 3.0，如果低于此版本需要升级它</span>$ npm -v2.3.0<span class="hljs-comment">#升级 npm</span>cnpm install npm -g<span class="hljs-comment"># 升级或安装 cnpm(cnpm为淘宝镜像)</span>npm install cnpm -g<span class="hljs-comment"># 最新稳定版</span>$ cnpm install vue</code></pre><pre><code class="hljs bash"><span class="hljs-comment">#大家都知道国内直接使用 npm 的官方镜像是非常慢的，这里推荐使用淘宝 NPM 镜像。</span><span class="hljs-comment">#淘宝 NPM 镜像是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</span><span class="hljs-comment">#你可以使用淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm:</span>$ npm install -g cnpm --registry=https://registry.npm.taobao.org<span class="hljs-comment">#下载好了就可以使用cnpm来安装模块</span>$ cnpm install [模块名]</code></pre><h4 id="1-3-Vue的初体验"><a href="#1-3-Vue的初体验" class="headerlink" title="1.3. Vue的初体验"></a>1.3. Vue的初体验</h4><p>🚩Hello Vuejs</p><pre><code class="hljs vue">&lt;div id&#x3D;&#39;app&#39;&gt;    &lt;h2&gt;Hello &#123;&#123;name&#125;&#125;  &lt;&#x2F;h2&gt;&lt;div&gt;     &lt;!-- 引入Vue.js 创建Vue对象 --&gt;   &lt;script src&#x3D;&quot;...&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;    let app&#x3D;new Vue(&#123;        el:&#39;#app&#39;,        data:&#123;            name:&#39;VueJS&#39;        &#125;    &#125;)&lt;&#x2F;script&gt;</code></pre><p>🔺创建Vue对象的时候，传入了一些options：{}</p><ul><li><p>{}中包含了el属性：该属性决定了这个Vue对象挂载到哪一个元素上，很明显，我们这里是挂载到了id为app的元素上</p></li><li><p>{}中包含了data属性：该属性中通常会存储一些数据</p></li><li><p>这些数据可以是我们直接定义出来的，比如像上面这样。也可能是来自网络，从服务器加载的</p></li></ul><p>🔺浏览器执行代码的流程：</p><ul><li><p>执行到1~4行代码显然出对应的HTML</p></li><li><p>执行第8行代码创建Vue实例，并且对原HTML进行解析和修改。</p></li><li><p>并且，目前我们的代码是可以做到响应式的，在浏览器端我们能看到<code>Hello VueJS</code></p></li></ul><p>🚩mustache -&gt; 体验vue响应式</p><p>🚩Vue列表展示</p><ul><li>现在，我们来展示一个更加复杂的数据：数据列表。</li></ul><p>​        ◻  比如我们现在从服务器请求过来一个列表</p><p>​        ◻  希望展示到HTML中</p><pre><code class="hljs vue">&lt;!-- 引入Vue.js 创建Vue对象 --&gt;   &lt;script src&#x3D;&quot;...&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;    let app&#x3D;new Vue(&#123;        el:&#39;#app&#39;,        data:&#123;            movies:[&#39;星际穿越,&#39;盗梦空间&#39;,&#39;大话西游&#39;]        &#125;    &#125;)&lt;&#x2F;script&gt;&lt;div id&#x3D;&#39;app&#39;&gt;    &lt;ul&gt;      &lt;li v-for&#x3D;&quot;item in movies&quot;&gt;      &#123;&#123;item&#125;&#125;      &lt;&#x2F;li&gt;    &lt;&#x2F;ul&gt;  &lt;div&gt;</code></pre><p>​      浏览器将显示：</p><ul><li>星际穿越</li></ul><ul><li><p>盗梦空间</p></li><li><p>大话西游</p><p>🔺HTML代码中，使用v-for指令,该指令我们后面会详细讲解，这里先学会使用。</p><p>🔺是不是变得So Easy，我们再也不需要在JavaScript代码中完成DOM的拼接相关操作了</p><p>🔺而且，更重要的是，它还是响应式的。也就是说，当我们数组中的数据发生改变时，界面会自动改变。</p><p>我们依然打开开发者模式的console，来试一下</p><p>console里面输入下列代码：</p><pre><code class="hljs plain">app.movies.push(&#39;等风来&#39;)</code></pre><p>浏览器将显示：</p><ul><li>星际穿越<ul><li>盗梦空间</li><li>大话西游</li><li>等风来</li></ul></li></ul></li></ul><p>🚩v-for</p><ul><li><p>v-for指令是循环渲染一组data中的数组，v-for 指令需要以 item in items 形式的特殊语法，items 是源数据数组并且item是数组元素迭代的别名。</p></li><li><p>模块写法</p><pre><code class="hljs vue">&lt;li v-for&#x3D;&quot;item in items&quot;&gt;     &#123;&#123;item&#125;&#125;&lt;li&gt;</code></pre></li></ul><ul><li><p>JS写法</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> Vue(&#123;   el:<span class="hljs-string">'app'</span>,   data:&#123;   items:[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>]   &#125;&#125;)</code></pre></li></ul><p>🚩后面给数组追加元素的时候, 新的元素也可以在界面中渲染出来</p><p>🚩Vue计数器小案例</p><ul><li>现在，我们来实现一个小的计数器</li></ul><p>​    ◻ 点击 + 计数器+1</p><p>​    ◻ 点击 -  计数器 -1</p><pre><code class="hljs vue">&lt;div id&#x3D;&#39;app&#39;&gt;    &lt;h2&gt;当前计数:&#123;&#123;counter&#125;&#125;&lt;&#x2F;h2&gt;    &lt;button @click&#x3D;&quot;increment&quot;&gt;+&lt;&#x2F;button&gt;    &lt;button @click&#x3D;&quot;decrement&quot;&gt;-&lt;&#x2F;button&gt; &lt;&#x2F;div&gt;    &lt;script src&#x3D;&quot;...&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;    let app&#x3D;new Vue(&#123;        el:&#39;#app&#39;,        data:&#123;           counter:0        &#125;,        methods:&#123;        increment()&#123;        this.counter++        &#125;,        decrement()&#123;        this.counter--        &#125;        &#125;    &#125;)&lt;&#x2F;script&gt;</code></pre><ul><li>这里，我们又要使用新的指令和属性了</li></ul><p>​        ◻ 新的属性：methods，该属性用于在Vue对象中定义方法。</p><p>​        ◻ 新的指令：@click, 该指令用于监听某个元素的点击事件，并且需要指定当发生点击时，执行的方法(方法通常是methods中定义的方法)</p><ul><li><p>你可能会疑惑？</p></li><li><p>这些@click是什么东西？</p></li></ul><p>​       ◻ Vue对象中又是定义el/data/methods，到底都有哪些东西可以定义，以及它们的作用是什么？</p><p>​       ◻ 这些疑惑在后续学习中都会一一解开。</p><p>🚩事件监听: click -&gt; methods</p><h4 id="1-4-Vue中的MVVM"><a href="#1-4-Vue中的MVVM" class="headerlink" title="1.4. Vue中的MVVM"></a>1.4. Vue中的MVVM</h4><p><img src="C:\Users\xqh\myblog\themes\fluid\source\img\bg\mvm.png" srcset="/img/loading.gif" alt=""></p><p>🚩通常我们学习一个概念，最好的方式是去看维基百科(对，千万别看成了百度百科)</p><p><a href="https://zh.wikipedia.org/wiki/MVVM" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/MVVM</a></p><p>🚩View层：</p><ul><li>视图层</li></ul><p>​       ◻ 在我们前端开发中，通常就是DOM层。</p><p>​       ◻ 主要的作用是给用户展示各种信息。</p><ul><li>Model层：</li></ul><p>​       ◻ 数据层</p><p>​       ◻ 数据可能是我们固定的死数据，更多的是来自我们服务器，从网络上请求下来的数据。</p><p>​       ◻ 在我们计数器的案例中，就是后面抽取出来的obj，当然，里面的数据可能没有这么简单。</p><ul><li>VueModel层：</li></ul><p>​       ◻ 视图模型层</p><p>​       ◻ 视图模型层是View和Model沟通的桥梁。</p><p>​       ◻ 一方面它实现了Data Binding，也就是数据绑定，将Model的改变实时的反应到View中</p><p>​       ◻ 另一方面它实现了DOM Listener，也就是DOM监听，当DOM发生一些事件(点击、滚动、touch等)时，可以监听到，并在需要的情况下改变对应的Data。</p><p>🚩计数器的MVVM</p><ul><li>我们的计数器中就有严格的MVVM思想</li></ul><p>​      ◻ View依然是我们的DOM</p><p>​      ◻ Model就是我们我们抽离出来的obj</p><p>​      ◻ ViewModel就是我们创建的Vue对象实例</p><ul><li>它们之间如何工作呢？</li></ul><p>​      ◻ 首先ViewModel通过Data Binding让obj中的数据实时的在DOM中显示。</p><p>​      ◻ 其次ViewModel通过DOM Listener来监听DOM事件，并且通过methods中的操作，来改变obj中的数据。</p><ul><li>有了Vue帮助我们完成VueModel层的任务，在后续的开发，我们就可以专注于数据的处理，以及DOM的编写工作了。</li></ul><h4 id="1-5-创建Vue时-options可以放那些东西"><a href="#1-5-创建Vue时-options可以放那些东西" class="headerlink" title="1.5. 创建Vue时, options可以放那些东西"></a>1.5. 创建Vue时, options可以放那些东西</h4><p>🚩你会发现，我们在创建Vue实例的时候，传入了一个对象options。</p><p>🚩这个options中可以包含哪些选项呢？</p><p>详细解析： <a href="https://cn.vuejs.org/v2/api/" target="_blank" rel="noopener">https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E6%95%B0%E6%8D%AE</a></p><p>🚩el:</p><ul><li><p>类型：string | HTMLElement</p></li><li><p>作用：决定之后Vue实例会管理哪一个DOM。</p></li></ul><p>🚩data:</p><ul><li><p>类型：Object | Function （组件当中data必须是一个函数）</p></li><li><p>作用：Vue实例对应的数据对象。</p></li></ul><p>🚩methods:</p><ul><li><p>类型：{ [key: string]: Function }</p></li><li><p>作用：定义属于Vue的一些方法，可以在其他地方调用，也可以在指令中使用。</p></li></ul><p>🚩生命周期函数</p><ul><li><a href="https://cn.vuejs.org/v2/guide/instance.html#生命周期图示" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA</a></li></ul><p>以上笔记是根据王红元老师的课程整理的。</p><p>More info: <a href="https://www.bilibili.com/video/BV15741177Eh?p=12" target="_blank" rel="noopener">王红元 | Vue 课程</a></p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>读书分享 | 被讨厌的勇气</title>
    <link href="/2020/04/22/cour/"/>
    <url>/2020/04/22/cour/</url>
    
    <content type="html"><![CDATA[<h2 id="内容导读"><a href="#内容导读" class="headerlink" title="内容导读"></a>内容导读</h2><h3 id="作者：岸见一郎-amp-古贺史健"><a href="#作者：岸见一郎-amp-古贺史健" class="headerlink" title="作者：岸见一郎 &amp; 古贺史健"></a>作者：岸见一郎 &amp; 古贺史健</h3><p>​      </p><p>​      🔺 看到书名，你可能会有疑问。现在不仅仅是爱需要勇气，就连被讨厌也需要勇气。那么，究竟被讨厌  时需要什么样的勇气呢？</p><p>​      🔺 你是否因为生活被工作支配而感到力不从心？</p><p>​      🔺 你是否因为学习被他人打扰而感到烦躁不安？</p><p>​      🔺 你是否因为想发展其他事业却抱怨没有空闲时间？</p><p>​      🔺  你是否因为自己的能力配不上野心时感到迷茫和焦虑？</p><p>​      🔺  或许是因为，我们过分关注自己。</p><p>​      🔺   这本书，从头到尾都是以一位年轻人和哲人的对话辩论来进入阿德勒式的心灵成长世界的，并且使用阿德勒的思想来解决人生的几大课题，以此教会我们在繁杂的日常琐碎、复杂的人际关系中用自己的双去获得属于自己的快乐以及幸福，挣脱人生的三大加锁。</p><p>​            🔸 来自过去的束缚</p><p>​            🔸 来自人际关系的束缚</p><p>​            🔸 来自未来的束缚</p><p>​     🔺  如果你感到人生很迷茫，找不到生活的方向，或是失去了信心，或是不知道自己的人生有什么意义，那么请你静下心来读一读这本书。</p><h2 id="语录摘抄"><a href="#语录摘抄" class="headerlink" title="语录摘抄"></a>语录摘抄</h2><h3 id="Power"><a href="#Power" class="headerlink" title="Power"></a>Power</h3><p>​      🔺 人生三大课题：工作课题、交友课题、爱的课题。人生课题中最难的是爱的课题。阿德勒说：当人能够感觉到“与这个人在一起可以无拘无束”的时候，才能够体会到爱。既没有自卑感也不必炫耀优越性，能够保持一种平静而自然的状态。真正的爱是这样的。</p><p>​      🔺 你现在无法体会到幸福，因为你不会爱你自己。而且，为了能够爱自己，你希望“变成别人”。你之所以想要变成别人，就是因为你只一味关注着“被给予了什么”。其实，你应该把注意力放在“如何利用被给予的东西”上。</p><p>​      🔺 你为什么讨厌自己呢？为什么只盯着缺点就是不肯去喜欢自己呢？那是因为你太害怕被他人讨厌、害怕在人际关系中受伤。</p><p>​     🔺  人只有在能够感觉到“我对别人有用”的时候才能体会到自己的价值。但是，这种贡献也可以通过看不见的形式实现。只要有“对别人有用”的主观感觉，即“贡献感”就可以，幸福就是“贡献感”。</p><p>​    🔺  真诚地接受不能交换的“这个我”，这就是自我接纳。对他人寄予无条件的信赖即他者信赖。既能接纳自己又能信赖他人，对你来说他人就是伙伴的存在，那你也就能够在所属共同体中找到自己的位置，继而也就能够获得“可以在这里”的归属感。</p><p>​    🔺  当期待发生矛盾，我们注定满足不了所有人。</p><p>​    🔺  起点是“课题分离”，终点是“共同体感觉”，共同体感觉就是把他人看成朋友，并且在其中能够感受到有自己的位置。</p><p>​    🔺   对人而言，最大的不幸就是不喜欢自己。</p><h2 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h2><h3 id="Thought"><a href="#Thought" class="headerlink" title="Thought"></a>Thought</h3><p>​      🔺  把他人的期待换成对自己的接纳。</p><p>​      🔺  你要拥有甘于平凡的勇气。</p><p>​      🔺  你要放下“被认同”的需求。</p><p>​      🔺   活出自己的核心渴望。</p><p>​      🔺   早日拥有“被讨厌的勇气”。</p><p>​      🔺   少说“如果…就好了”，因为这就像是借口，你觉得它对于自己来说很困难，这就会变成自己不去行动的理由。</p><p>​      🔺   决定人生的是当下的自己。</p>]]></content>
    
    
    <categories>
      
      <category>Reading</category>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Reading</tag>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo + Github 博客搭建</title>
    <link href="/2020/04/21/hello-world/"/>
    <url>/2020/04/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>2020/4/21,我记录了博客搭建的全过程。就以今天开始，多尝试，找到自己擅长的领域，高效学习，发现自己身上隐藏的能量，有所爱，有所期待。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="为什么要搭建自己的博客"><a href="#为什么要搭建自己的博客" class="headerlink" title="为什么要搭建自己的博客"></a>为什么要搭建自己的博客</h3><p>​      🔺 自己的博客就是自己的标签</p><p>​      🔺 自己的博文就是自己的思想成果</p><p>​      🔺 利用自己的博客打造自己的网上名片</p><p>​      🔺  独立的博客网站是记录人生的工具</p><p>​      🔺  博客是专属于自己写作、记录、呈现的一片耕地</p><p>​      🔺  自行建站一切都可以自己定制</p><p>​      🔺   自行建站可以寻找志同道合的朋友做友链</p><p>More info: <a href="http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/" target="_blank" rel="noopener">刘未鹏 | Mind Hacks</a></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>​      🔺 安装 Node.js: <a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p><p>​      🔺 安装 Git: <a href="https://github.com/waylau/git-for-win" target="_blank" rel="noopener">https://github.com/waylau/git-for-win</a></p><p>​      🔺 注册 <code>Github</code>账号: <a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></p><h3 id="Github-配置"><a href="#Github-配置" class="headerlink" title="Github 配置"></a>Github 配置</h3><p>​     🔺 登录<code>Github</code> 账号: <a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></p><p>​        🔺 创建仓库，点击右上角的<code>Create a new repository</code>:<a href="https://github.com/new" target="_blank" rel="noopener">https://github.com/new</a></p><p>​            🔸 新建一个名为<code>你的用户名.github.io</code>的仓库，比如说，如果我的github用户名是oyeah-hua，那么你就新建oyeah-hua.github.io`的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 <a href="http://oyeah-hua.github.io了" target="_blank" rel="noopener">http://oyeah-hua.github.io了</a></p><p>​           🔸 仓库创建完成后，开始生成添加秘钥 SSH Key</p><p>​                在终端 (Windows:cmd) 下输入：</p><pre><code class="hljs bash">$ ssh-keygen -t rsa -C <span class="hljs-string">"Github的注册邮箱地址"</span></code></pre><p>​              一直Enter下来就可以，待秘钥生成完毕，会得到两   个文件<code>id_rsa</code>和<code>id_rsa.pub</code>，用文本编辑器打开<code>id_rsa.pub</code>，<code>Ctrl + A</code>复制里面的所有内容，然后进入<br><a href="https://github.com/settings/ssh" target="_blank" rel="noopener">https://github.com/settings/ssh</a> 把复制内容添加在这里</p><p>​        🔺 测试是否添加成功。在命令行（即Git Bash）依次输入以下命令</p><pre><code class="hljs bash">$ ssh -T git@github.com</code></pre><p>如果出现提示<code>Are you sure you want to continue connecting (yes/no)?</code>，输入yes，然后会看到返回<code>You&#39;ve successfully authenticated</code>即成功。</p><h2 id="hexo简介"><a href="#hexo简介" class="headerlink" title="hexo简介"></a>hexo简介</h2><h3 id="hexo是什么"><a href="#hexo是什么" class="headerlink" title="hexo是什么"></a>hexo是什么</h3><p>​      🔺 Hexo是一个简单、快速、强大的基于 Github Pages     的博客框架，支持Markdown格式，有众多优秀插件和主题。</p><p>​      🔺 github: <a href="https://link.jianshu.com/?t=https://github.com/hexojs/hexo" target="_blank" rel="noopener">https://github.com/hexojs/hexo</a></p><p>​      🔺  Hexo中文官网： <a href="https://link.jianshu.com/?t=https://hexo.io/zh-cn/" target="_blank" rel="noopener">https://hexo.io/zh-cn/</a></p><p>​      🔺 Hexo官方使用文档：<a href="https://link.jianshu.com/?t=https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a></p><h3 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo安装</h3><p>​     🔺 hexo 安装</p><p>​    在git bush输入以下命令：</p><pre><code class="hljs bash">$ npm install -g hexo</code></pre><p>​     🔺  hexo 初始化</p><p>​     在电脑的某个盘新建一个名为<code>hexo</code>的文件夹（名字可以随便取），比如我的是<code>D:\Workspaces\hexo</code>，由于这个文件夹将来就作为你存放代码的地方，请你最好不要随便放。</p><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> /d/Workspaces/hexo/$ hexo init</code></pre><p>   hexo会自动下载一些文件到这个目录，包括node_modules，目录结构如下图：</p><pre><code class="hljs plain">.├── _config.yml├── package.json├── scaffolds├── source|   ├── _drafts|   └── _posts└── themes·</code></pre><p>  🔺  hexo 命令</p><pre><code class="hljs bash">$ hexo generate<span class="hljs-comment"># 启动本地服务器</span>$ hexo server<span class="hljs-comment"># 在浏览器输入 http://localhost:4000/就可以看见网页和模板了</span>INFO  Start processingINFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</code></pre><p>🔺 直接使用<code>hexo deploy</code>部署到 Github，将出现如下错误：</p><pre><code class="hljs bash">ERROR Deployer not found:git</code></pre><p>​      🔔  这时候要使用下面的命令安装对应的插件</p><pre><code class="hljs bash">$ npm install hexo-deployer-git --save</code></pre><p>​      🔔   安装完成即可部署到Github</p><h2 id="配置博客"><a href="#配置博客" class="headerlink" title="配置博客"></a>配置博客</h2><h3 id="配置站点"><a href="#配置站点" class="headerlink" title="配置站点"></a>配置站点</h3><p>​         🔺 打开根目录下<strong>站点配置文件</strong><code>_config.yml</code>（比如我的是<code>D:\Workspaces\hexo\_config.yml</code>），配置有关deploy的部分：</p><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/oyeah/oyeah.github.io</span>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span></code></pre><p>​      🔔  修改的时候一定要注意<code>:</code>后面一定要有一个空格，否则会报错</p><p>​      🔔   <strong>repo</strong> 为<code>你的用户名.github.io</code>的仓库地址</p><h3 id="修改网站相关信息"><a href="#修改网站相关信息" class="headerlink" title="修改网站相关信息"></a>修改网站相关信息</h3><p>​    🔺 打开根目录下<strong>站点配置文件</strong><code>_config.yml</code>（比如我的是<code>D:\Workspaces\hexo\_config.yml</code>），修改网站信息</p><p>​      🔔  修改的时候一定要注意<code>:</code>后面一定要有一个空格，否则会报错</p><pre><code class="hljs yml"><span class="hljs-attr">title:</span> <span class="hljs-string">标题</span><span class="hljs-attr">subtitle:</span> <span class="hljs-string">副标题</span><span class="hljs-attr">description:</span> <span class="hljs-string">网页描述</span><span class="hljs-attr">author:</span> <span class="hljs-string">作者</span><span class="hljs-attr">language:</span> <span class="hljs-string">语言</span></code></pre><p>​    </p><h2 id="主题修改"><a href="#主题修改" class="headerlink" title="主题修改"></a>主题修改</h2><h3 id="选择合适的主题"><a href="#选择合适的主题" class="headerlink" title="选择合适的主题"></a>选择合适的主题</h3><p>​         🔺 官方主题：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a></p><h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><p>​         🔺  点击合适的主题，将Github clone 地址复制</p><p>​         🔺   在终端输入</p><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> `对应主题的Github地址`</code></pre><h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>​         🔺 打开根目录下<strong>站点配置文件</strong><code>_config.yml</code>， 找到 theme 字段，并将其值更改为 next</p><pre><code class="hljs yml"><span class="hljs-comment"># Schemes</span><span class="hljs-attr">scheme:</span> <span class="hljs-string">`你要修改的主题名称`</span></code></pre><h3 id="验证主题"><a href="#验证主题" class="headerlink" title="验证主题"></a>验证主题</h3><p>​         🔺 在终端清除缓存</p><pre><code class="hljs bash">$ hexo clean</code></pre><p>​        🔺  在终端重新生成</p><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html" target="_blank" rel="noopener">小茗同学 | 网站建设 </a></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
      <category>Github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
